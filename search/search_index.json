{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accueil","text":"<p>Vous \u00eates sur la page de ressources d\u00e9di\u00e9s \u00e0 la sp\u00e9cialit\u00e9 NSI du Lyc\u00e9e Saint-Charles - Saint Martin de Crau.</p>"},{"location":"#autres-ressources","title":"Autres ressources :","text":"<ul> <li>SNT seconde</li> <li>NSI premiere</li> <li>NSI terminale</li> </ul>"},{"location":"01_Memo_SQL/Memo_Sql/","title":"Memo Sql","text":"<p>Voici un r\u00e9sum\u00e9 des requ\u00eates essentielles \u00e0 ma\u00eetriserde en SQL :</p>"},{"location":"01_Memo_SQL/Memo_Sql/#1-definitions","title":"1. D\u00e9finitions","text":"<ul> <li>SQL (Structured Query Language) : Langage pour g\u00e9rer et interroger des bases de donn\u00e9es relationnelles.</li> <li>SGBD (Syst\u00e8me de Gestion de Bases de Donn\u00e9es) : Logiciel comme MySQL, PostgreSQL, Oracle, etc.</li> </ul>"},{"location":"01_Memo_SQL/Memo_Sql/#2-les-commandes-fondamentales","title":"2. Les commandes fondamentales","text":"<ul> <li> <p><code>SELECT</code> : Lire des donn\u00e9es <pre><code>SELECT colonne1, colonne2 FROM table WHERE condition;\n</code></pre>   Exemple : <pre><code>SELECT nom, age FROM clients WHERE ville = 'Paris';\n</code></pre></p> </li> <li> <p><code>INSERT</code> : Ajouter des donn\u00e9es <pre><code>INSERT INTO table (colonne1, colonne2) VALUES (valeur1, valeur2);\n</code></pre>   Exemple : <pre><code>INSERT INTO clients (nom, age) VALUES ('Jean', 30);\n</code></pre></p> </li> <li> <p><code>UPDATE</code> : Modifier des donn\u00e9es <pre><code>UPDATE table SET colonne = nouvelle_valeur WHERE condition;\n</code></pre>   Exemple : <pre><code>UPDATE clients SET age = 31 WHERE nom = 'Jean';\n</code></pre></p> </li> <li> <p><code>DELETE</code> : Supprimer des donn\u00e9es <pre><code>DELETE FROM table WHERE condition;\n</code></pre>   Exemple : <pre><code>DELETE FROM clients WHERE age &lt; 18;\n</code></pre></p> </li> </ul>"},{"location":"01_Memo_SQL/Memo_Sql/#3-clauses-importantes","title":"3. Clauses importantes","text":"<ul> <li><code>WHERE</code> : Filtre les r\u00e9sultats. <pre><code>SELECT * FROM produits WHERE prix &gt; 100;\n</code></pre></li> <li><code>ORDER BY</code> : Trier les r\u00e9sultats. <pre><code>SELECT * FROM clients ORDER BY nom ASC;  -- ASC (croissant) ou DESC (d\u00e9croissant)\n</code></pre></li> <li><code>GROUP BY</code> : Grouper pour des calculs (avec <code>COUNT</code>, <code>SUM</code>, <code>AVG</code>, etc.). <pre><code>SELECT ville, COUNT(*) FROM clients GROUP BY ville;\n</code></pre></li> <li><code>HAVING</code> : Filtre sur les groupes (apr\u00e8s <code>GROUP BY</code>). <pre><code>SELECT ville, COUNT(*) FROM clients GROUP BY ville HAVING COUNT(*) &gt; 5;\n</code></pre></li> </ul>"},{"location":"01_Memo_SQL/Memo_Sql/#4-jointure-join","title":"4. Jointure (JOIN)","text":"<ul> <li><code>JOIN</code> : R\u00e9cup\u00e8re les donn\u00e9es communes entre 2 tables. <pre><code>SELECT table1.colonne, table2.colonne\nFROM table1\nJOIN table2 ON table1.id = table2.table1_id;\n</code></pre> Exemple : <pre><code>SELECT commandes.id, clients.nom\nFROM commandes\nJOIN clients ON commandes.client_id = clients.id;\n</code></pre></li> <li>\u00c9viter les ambigu\u00eft\u00e9s : Si 2 tables ont une colonne du m\u00eame nom, pr\u00e9cise la table : <pre><code>SELECT clients.nom, commandes.date  -- Mieux que juste \"nom\" ou \"date\"\nFROM clients\nJOIN commandes ON clients.id = commandes.client_id;\n</code></pre></li> <li>Jointures multiples : <pre><code>SELECT produits.nom, commandes.date, clients.nom\nFROM produits\nJOIN commandes ON produits.id = commandes.produit_id\nJOIN clients ON commandes.client_id = clients.id;\n</code></pre></li> </ul>"},{"location":"01_Memo_SQL/Memo_Sql/#exemple-complet-avec-join","title":"Exemple complet avec <code>JOIN</code>","text":"<pre><code>-- Trouver les commandes pass\u00e9es par des clients de Paris, tri\u00e9es par date\nSELECT clients.nom, commandes.date, commandes.montant\nFROM clients\nJOIN commandes ON clients.id = commandes.client_id\nWHERE clients.ville = 'Paris'\nORDER BY commandes.date DESC;\n</code></pre>"},{"location":"01_Memo_SQL/Memo_Sql/#5-schema-de-base-de-donnees","title":"5. Sch\u00e9ma de base de donn\u00e9es","text":"<ul> <li>Cl\u00e9 primaire (PRIMARY KEY) : Identifiant unique (ex: <code>id</code>).  </li> <li>Cl\u00e9 \u00e9trang\u00e8re (FOREIGN KEY) : Lien entre tables.  </li> </ul> <p>Exemple de cr\u00e9ation de table : <pre><code>CREATE TABLE clients (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    nom VARCHAR(50) NOT NULL,\n    age INT,\n    ville VARCHAR(50)\n);\n</code></pre></p>"},{"location":"01_Memo_SQL/Memo_Sql/#a-retenir","title":"\u00c0 retenir","text":"<ul> <li>Ma\u00eetriser les requ\u00eates <code>SELECT</code> (avec <code>WHERE</code>, <code>ORDER BY</code>, <code>GROUP BY</code>).</li> <li>Savoir \u00e9crire des <code>INSERT</code>/<code>UPDATE</code>/<code>DELETE</code> simples.</li> <li>Comprendre les jointures (<code>JOIN</code>).</li> <li>Conna\u00eetre les op\u00e9rateurs (<code>=</code>, <code>&gt;</code>, <code>LIKE</code>, <code>AND</code>, <code>OR</code>).</li> </ul>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/","title":"\u00c9preuve Pratique BNS 2023","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-01","title":"\u25b6 Sujet 01","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-011","title":"Exercice 01.1","text":"<p>Exercice 01.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>verifie</code> qui prend en param\u00e8tre un tableau de valeurs num\u00e9riques non vide et qui renvoie <code>True</code> si ce tableau est tri\u00e9 dans l\u2019ordre croissant, <code>False</code> sinon.</p> <p>Exemples :</p> <pre><code>Exemples :\n&gt;&gt;&gt; verifie([0, 5, 8, 8, 9])\nTrue\n&gt;&gt;&gt; verifie([8, 12, 4])\nFalse\n&gt;&gt;&gt; verifie([-1, 4])\nTrue\n&gt;&gt;&gt; verifie([5])\nTrue\n</code></pre> <pre><code>def verifie(tab):\n    for i in range(1, len(tab)):\n        if tab[i] &lt; tab[i-1]:\n            return False\n    return True\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-012","title":"Exercice 01.2","text":"<p>Exercice 01.2</p> \u00c9nonc\u00e9Correction <p>Les r\u00e9sultats d'un vote ayant trois issues possibles 'A', 'B' et 'C' sont stock\u00e9s dans un tableau.</p> <p>Exemple :</p> <pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n</code></pre> <p>La fonction <code>depouille</code> doit permettre de compter le nombre de votes exprim\u00e9s pour chaque artiste. Elle prend en param\u00e8tre un tableau et renvoie le r\u00e9sultat dans un dictionnaire dont les cl\u00e9s sont les noms des artistes et les valeurs le nombre de votes en leur faveur.</p> <p>La fonction vainqueur doit d\u00e9signer le nom du ou des gagnants. Elle prend en param\u00e8tre un dictionnaire dont la structure est celle du dictionnaire renvoy\u00e9 par la fonction <code>depouille</code> et renvoie un tableau. Ce tableau peut donc contenir plusieurs \u00e9l\u00e9ments s\u2019il y a des artistes ex- aequo. Compl\u00e9ter les fonctions <code>depouille</code> et vainqueur ci-apr\u00e8s pour qu\u2019elles renvoient les r\u00e9sultats attendus.</p> <pre><code>urne = ['A', 'A', 'A','B', 'C', 'B', 'C','B', 'C', 'B']\n\ndef depouille(urne):\n    resultat = ...\n    for bulletin in urne:\n        if ...:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            ...\n    return resultat\n\ndef vainqueur(election):\n    vainqueur = ''\n    nmax = 0\n    for candidat in election:\n        if ... &gt; ... :\n            nmax = ...\n            vainqueur = candidat\n    liste_finale = [nom for nom in election if election[nom] == ...]\n    return ...\n</code></pre> <p>Exemples d\u2019utilisation :</p> <pre><code>&gt;&gt;&gt; election = depouille(urne)\n&gt;&gt;&gt; election\n{'A': 3, 'B': 4, 'C': 3}\n&gt;&gt;&gt; vainqueur(election)\n['B']\n</code></pre> <pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n\ndef depouille(urne):\n    resultat = {}\n    for bulletin in urne:\n        if bulletin in resultat:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            resultat[bulletin] = 1\n    return resultat\n\ndef vainqueur(election):\n    vainqueur = '' #(1)\n    nmax = 0\n    for candidat in election:\n        if election[candidat] &gt; nmax :\n            nmax = election[candidat]\n            vainqueur = candidat #(2)\n    liste_finale = [nom for nom in election if election[nom] == nmax]\n    return liste_finale\n</code></pre> <ol> <li>Il est pourtant tr\u00e8s d\u00e9conseill\u00e9 de nommer une variable avec le m\u00eame nom que la fonction qui la contient...</li> <li>Cette variable <code>vainqueur</code> est inutile, on ne s'en sert pas dans l'\u00e9laboration de la liste finale.</li> </ol>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-02","title":"\u25b6 Sujet 02","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-021","title":"Exercice 02.1","text":"<p>Exercice 02.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>indices_maxi</code> qui prend en param\u00e8tre une liste <code>tab</code>, non vide, de nombres entiers et renvoie un couple donnant d\u2019une part le plus grand \u00e9l\u00e9ment de cette liste et d\u2019autre part la liste des indices de la liste <code>tab</code> o\u00f9 appara\u00eet ce plus grand \u00e9l\u00e9ment.</p> <p>Exemple : <pre><code>&gt;&gt;&gt; indices_maxi([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, [3, 8])\n&gt;&gt;&gt; indices_maxi([7])\n(7, [0])\n</code></pre></p> <pre><code>def indices_maxi(tab):\n    val_max = tab[0]\n    ind_max = []\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n    for i in range(len(tab)):\n        if tab[i] == val_max:\n            ind_max.append(i)\n    return (val_max, ind_max)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-022","title":"Exercice 02.2","text":"<p>Exercice 02.2</p> \u00c9nonc\u00e9Correction <p>Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es en Python par des listes (type <code>list</code>).</p> <p>On rappelle que l\u2019expression <code>liste_1 = list(liste)</code> fait une copie de <code>liste</code>ind\u00e9pendante de <code>liste</code>, que l\u2019expression <code>x = liste.pop()</code> enl\u00e8ve le sommet de la pile <code>liste</code> et le place dans la variable <code>x</code> et, enfin, que l\u2019expression <code>liste.append(v)</code> place la valeur <code>v</code> au sommet de la pile <code>liste</code>.</p> <p>Compl\u00e9ter le code Python de la fonction <code>positif</code> ci-dessous qui prend une pile <code>liste</code> de nombres entiers en param\u00e8tre et qui renvoie la pile des entiers positifs dans le m\u00eame ordre, sans modifier la variable <code>liste</code>.</p> <pre><code>def positif(pile):\n    pile_1 = ...(pile)\n    pile_2 = ...\n    while pile_1 != []:\n        x = ...\n        if ... &gt;= 0:\n            pile_2.append(...)\n    while pile_2 != ...:\n        x = pile_2.pop()\n        ...\n    return pile_1\n</code></pre> <p>Exemple : <pre><code>&gt;&gt;&gt; positif([-1, 0, 5, -3, 4, -6, 10, 9, -8])\n[0, 5, 4, 10, 9]\n&gt;&gt;&gt; positif([-2])\n[]\n</code></pre></p> <pre><code>def positif(pile):\n    pile_1 = list(pile)\n    pile_2 = []\n    while pile_1 != []:\n        x = pile_1.pop()\n        if x &gt;= 0:\n            pile_2.append(x)\n    while pile_2 != []:\n        x = pile_2.pop()\n        pile_1.append(x)\n    return pile_1\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-03","title":"\u25b6 Sujet 03","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-031","title":"Exercice 03.1","text":"<p>Exercice 03.1</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, les nombres sont des entiers ou des flottants.</p> <p>\u00c9crire une fonction <code>moyenne</code> renvoyant la moyenne pond\u00e9r\u00e9e d\u2019une liste non vide, pass\u00e9e en param\u00e8tre, de tuples \u00e0 deux \u00e9l\u00e9ments de la forme (<code>valeur</code>, <code>coefficient</code>) o\u00f9 <code>valeur</code> et <code>coefficient</code> sont des nombres positifs ou nuls. Si la somme des coefficients est nulle, la fonction renvoie <code>None</code>, si la somme des coefficients est non nulle, la fonction renvoie, sous forme de flottant, la moyenne des valeurs affect\u00e9es de leur coefficient.</p> <p>Exemple : <pre><code>&gt;&gt;&gt; moyenne([(8, 2), (12, 0), (13.5, 1), (5, 0.5)])\n9.142857142857142\n&gt;&gt;&gt; moyenne([(3, 0), (5, 0)])\nNone\n</code></pre></p> <p>Dans le premier exemple la moyenne est calcul\u00e9e par la formule :</p> <p>\\(\\dfrac{8 \\times 2 + 12 \\times 0 + 13,5 \\times 1 + 5 \\times 0,5}{2+0+1+0,5}\\)</p> <pre><code>def moyenne(tab):\n    somme = 0\n    coeffs = 0\n    for couple in tab:\n        somme += couple[0] * couple[1]\n        coeffs += couple[1]\n    if coeffs == 0:\n        return None\n    return somme / coeffs\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-032","title":"Exercice 03.2","text":"<p>Exercice 03.2</p> \u00c9nonc\u00e9Correction <p> On travaille sur des dessins en noir et blanc obtenu \u00e0 partir de pixels noirs et blancs : La figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple. On la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs. Chaque sous-liste repr\u00e9sentera donc une ligne du dessin.</p> <p>Dans le code ci-dessous, la fonction <code>affiche</code> permet d\u2019afficher le dessin. Les pixels noirs (1 dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re \"*\" et les blancs (0 dans la grille) par deux espaces.</p> <p>La fonction <code>zoomListe</code> prend en argument une liste <code>liste_depart</code> et un entier <code>k</code>. Elle renvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de <code>liste_depart</code> est dupliqu\u00e9 <code>k</code> fois.</p> <p>La fonction <code>zoomDessin</code> prend en argument la grille <code>dessin</code> et renvoie une grille o\u00f9 toutes les lignes de <code>dessin</code> sont zoom\u00e9es <code>k</code> fois et r\u00e9p\u00e9t\u00e9es <code>k</code> fois.</p> <p>Soit le code ci-dessous :</p> <pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n    ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n        des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(\" *\", end=\"\")\n            else:\n                print(\"  \", end=\"\")\n        print()\n\n\ndef zoomListe(liste_depart,k):\n    '''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\n    liste_zoom = ...\n    for elt in ... :\n        for i in range(k):\n            ...\n    return liste_zoom\n\ndef zoomDessin(grille,k):\n    '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom=[]\n    for elt in grille:\n        liste_zoom = ...\n        for i in range(k):\n            ... .append(...)\n    return grille_zoom\n</code></pre> <p>R\u00e9sultats \u00e0 obtenir :</p> <p><pre><code>&gt;&gt;&gt; affiche(coeur)\n</code></pre> </p> <pre><code>&gt;&gt;&gt; affiche(zoomDessin(coeur,3))\n</code></pre> <pre><code>            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n      * * *                                           * * *            \n      * * *                                           * * *            \n      * * *                                           * * *            \n            * * *                               * * *                  \n            * * *                               * * *                  \n            * * *                               * * *                  \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                        * * *       * * *                              \n                        * * *       * * *                              \n                        * * *       * * *                              \n                              * * *                                    \n                              * * *                                    \n                              * * *\n</code></pre> <pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n    ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n    des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(' *',end='')\n            else:\n                print('  ',end='')\n        print()\n\n\ndef zoomListe(liste_depart, k):\n    '''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\n    liste_zoom = []\n    for elt in liste_depart:\n        for i in range(k):\n            liste_zoom.append(elt)\n    return liste_zoom\n\ndef zoomDessin(grille, k):\n    '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom = []\n    for elt in grille:\n        liste_zoom = zoomListe(elt, k)\n        for i in range(k):\n            grille_zoom.append(liste_zoom)\n    return grille_zoom\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-04","title":"\u25b6 Sujet 04","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-041","title":"Exercice 04.1","text":"<p>Exercice 04.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>a_doublon</code> qui prend en param\u00e8tre une liste tri\u00e9e de nombres et renvoie <code>True</code> si la liste contient au moins deux nombres identiques, <code>False</code> sinon.</p> <p>Par exemple :</p> <pre><code>&gt;&gt;&gt; a_doublon([])\nFalse\n&gt;&gt;&gt; a_doublon([1])\nFalse\n&gt;&gt;&gt; a_doublon([1, 2, 4, 6, 6])\nTrue\n&gt;&gt;&gt; a_doublon([2, 5, 7, 7, 7, 9])\nTrue\n&gt;&gt;&gt; a_doublon([0, 2, 3])\nFalse\n</code></pre> <pre><code>def a_doublon(lst):\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return True\n    return False\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-042","title":"Exercice 04.2","text":"<p>Exercice 04.2</p> \u00c9nonc\u00e9Correction <p>On souhaite g\u00e9n\u00e9rer des grilles du jeu de d\u00e9mineur \u00e0 partir de la position des bombes \u00e0 placer. On se limite \u00e0 la g\u00e9n\u00e9ration de grilles carr\u00e9es de taille \\(n \\times n\\) o\u00f9 \\(n\\) est le nombre de bombes du jeu.  </p> <p>Dans le jeu du d\u00e9mineur, chaque case de la grille contient soit une bombe, soit une valeur qui correspond aux nombres de bombes situ\u00e9es dans le voisinage direct de la case (au- dessus, en dessous, \u00e0 droite, \u00e0 gauche ou en diagonale : chaque case a donc 8 voisins si elle n'est pas situ\u00e9e au bord de la grille).</p> <p>Voici un exemple de grille \\(5 \\times 5\\) de d\u00e9mineur dans laquelle la bombe est repr\u00e9sent\u00e9e par une \u00e9toile :</p> <p></p> <p>On utilise une liste de listes pour repr\u00e9senter la grille et on choisit de coder une bombe par la valeur -1.</p> <p>L'exemple ci-contre sera donc cod\u00e9 par la liste :</p> <pre><code>[[1, 1, 1, 0, 0],\n[1, -1, 1, 1, 1],\n[2, 2, 3, 2, -1],\n[1, -1, 2, -1, 3],\n[1, 1, 2, 2, -1]]\n</code></pre> <p>Compl\u00e9ter le code suivant afin de g\u00e9n\u00e9rer des grilles de d\u00e9mineur, on pourra v\u00e9rifier que l\u2019instruction <code>genere_grille([(1, 1), (2, 4), (3, 1), (3, 3), (4, 4)])</code> produit bien la liste donn\u00e9e en exemple.</p> <pre><code>def voisinage(n, ligne, colonne):\n    \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n    \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\n    voisins = ...\n    for l, c in voisins:\n        if grille[l][c] != ...: # si ce n'est pas une bombe\n            ...  # on ajoute 1 \u00e0 sa valeur\n\n\n\ndef genere_grille(bombes):\n    \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\n        grille[ligne][colonne] = ... # place la bombe\n        ... # incr\u00e9mente ses voisins\n\n    return grille\n</code></pre> <pre><code>def voisinage(n, ligne, colonne):\n    \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n    \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\n    voisins = voisinage(len(grille), ligne, colonne)\n    for l, c in voisins:\n        if grille[l][c] != -1: # si ce n'est pas une bombe\n            grille[l][c] += 1  # on ajoute 1 \u00e0 sa valeur\n\n\n\ndef genere_grille(bombes):\n    \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\n        grille[ligne][colonne] = -1 # place la bombe\n        incremente_voisins(grille, ligne, colonne) # incr\u00e9mente ses voisins\n\n    return grille\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-05","title":"\u25b6 Sujet 05","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-051","title":"Exercice 05.1","text":"<p>Exercice 05.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire en python deux fonctions :</p> <ul> <li> <p><code>lancer</code> de param\u00e8tre <code>n</code>, un entier positif, qui renvoie un tableau de type <code>list</code> de <code>n</code> entiers obtenus al\u00e9atoirement entre 1 et 6 (1 et 6 inclus) ;</p> </li> <li> <p><code>paire_6</code> de param\u00e8tre <code>tab</code>, un tableau de type <code>list</code> de <code>n</code> entiers entre 1 et 6 obtenus al\u00e9atoirement, qui renvoie un bool\u00e9en \u00e9gal \u00e0 <code>True</code> si le nombre de 6 est sup\u00e9rieur ou \u00e9gal \u00e0 2, <code>False</code> sinon.</p> </li> </ul> <p>On pourra utiliser la fonction <code>randint(a,b)</code> du module <code>random</code> pour laquelle la documentation officielle est la suivante :</p> <p><code>Renvoie un entier al\u00e9atoire N tel que a &lt;=N &lt;= b.</code></p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; lancer1 = lancer(5)\n[5, 6, 6, 2, 2]\n&gt;&gt;&gt; paire_6(lancer1)\nTrue\n&gt;&gt;&gt; lancer2 = lancer(5)\n[6, 5, 1, 6, 6]\n&gt;&gt;&gt; paire_6(lancer2)\nTrue\n&gt;&gt;&gt; lancer3 = lancer(3)\n[2, 2, 6]\n&gt;&gt;&gt; paire_6(lancer3)\nFalse\n&gt;&gt;&gt; lancer4 = lancer(0)\n[]\n&gt;&gt;&gt; paire_6(lancer4)\nFalse\n</code></pre> <pre><code>from random import randint\n\ndef lancer(n):\n    return [randint(1,6) for _ in range(n)]\n\ndef paire_6(tab):\n    nb = 0\n    for elt in tab:\n        if elt == 6:\n            nb += 1\n    if nb &gt;=2 :\n        return True\n    else:\n        return False\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-052","title":"Exercice 05.2","text":"<p>Exercice 05.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques.</p> <p>La largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le nombre de sous-listes.</p> <p>Chaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est un entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel.</p> <p>Le n\u00e9gatif d\u2019une image est l\u2019image constitu\u00e9e des pixels <code>x_n</code> tels que <code>x_n + x_i = 255</code> o\u00f9 <code>x_i</code> est le pixel correspondant de l\u2019image initiale.</p> <p>Compl\u00e9ter le programme suivant : <pre><code>def nbLig(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return ...\n\ndef nbCol(image):\n    '''renvoie la largeur de l'image'''\n    return ...\n\ndef negatif(image):\n    '''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(...):\n            L[i][j] = ...\n    return L\n\ndef binaire(image, seuil):\n    '''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil\n       et 1 sinon'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(...):\n            if image[i][j] &lt; ... :\n                L[i][j] = ...\n            else:\n                L[i][j] = ...\n    return L\n</code></pre></p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; img=[[20, 34, 254, 145, 6], [23, 124, 237, 225, 69], [197, 174,\n207, 25, 87], [255, 0, 24, 197, 189]]\n&gt;&gt;&gt; nbLig(img)\n4\n&gt;&gt;&gt; nbCol(img)\n5\n&gt;&gt;&gt; negatif(img)\n[[235, 221, 1, 110, 249], [232, 131, 18, 30, 186], [58, 81, 48, 230,\n168], [0, 255, 231, 58, 66]]\n&gt;&gt;&gt; binaire(img,120)\n[[0, 0, 1, 1, 0], [0, 1, 1, 1, 0], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]\n</code></pre> <pre><code>def nbLig(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return len(image)\n\ndef nbCol(image):\n    '''renvoie la largeur de l'image'''\n    return len(image[0])\n\ndef negatif(image):\n    '''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(nbCol(image)):\n            L[i][j] = 255 - image[i][j]\n    return L\n\ndef binaire(image, seuil):\n    '''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil\n       et 1 sinon'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(nbCol(image)):\n            if image[i][j] &lt; seuil :\n                L[i][j] = 0\n            else:\n                L[i][j] = 1\n    return L\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-06","title":"\u25b6 Sujet 06","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-061","title":"Exercice 06.1","text":"<p>Exercice 06.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>recherche</code>, prenant en param\u00e8tre un tableau non vide <code>tab</code> (type <code>list</code>) d'entiers et un entier <code>n</code>, et qui renvoie l'indice de la derni\u00e8re occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie la longueur du tableau.</p> <p>Exemples <pre><code>&gt;&gt;&gt; recherche([5, 3],1)\n2\n&gt;&gt;&gt; recherche([2,4],2)\n0\n&gt;&gt;&gt; recherche([2,3,5,2,4],2)\n3\n</code></pre></p> <pre><code>def recherche(tab, n):\n    indice_solution = len(tab)\n    for i in range(len(tab)):\n        if tab[i] == n:\n            indice_solution = i\n    return indice_solution\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-062","title":"Exercice 06.2","text":"<p>Exercice 06.2</p> \u00c9nonc\u00e9Correction <p>On souhaite programmer une fonction donnant la distance la plus courte entre un point de d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res. Les points sont donn\u00e9s sous la forme d'un tuple de deux entiers. La liste des points \u00e0 traiter est donc un tableau de tuples.</p> <p>On rappelle que la distance entre deux points du plan de coordonn\u00e9es \\((x;y)\\) et \\((x';y')\\) est donn\u00e9e par la formule :</p> \\[d=\\sqrt{(x-x')^2+(y-y')^2}\\] <p>On importe pour cela la fonction racine carr\u00e9e (<code>sqrt</code>) du module <code>math</code> de Python.</p> <p>Compl\u00e9ter le code des fonctions <code>distance</code> et <code>plus_courte_distance</code> fournies ci-dessous pour qu\u2019elles r\u00e9pondent \u00e0 leurs sp\u00e9cifications.</p> <pre><code>from math import sqrt     # import de la fonction racine carr\u00e9e\n\ndef distance(point1, point2):\n    \"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((...)**2 + (...)**2)\n\ndef plus_courte_distance(tab, depart):\n    \"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = ...\n    for i in range (1, ...):\n        if distance(tab[i], depart)...:\n            point = ...\n            min_dist = ...\n    return point\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; distance((1, 0), (5, 3))\n5.0\n&gt;&gt;&gt; distance((1, 0), (0, 1))\n1.4142135623730951\n&gt;&gt;&gt; plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0))\n(2, 5)\n&gt;&gt;&gt; plus_courte_distance([(7, 9), (2, 5), (5, 2)], (5, 2))\n(5, 2)\n</code></pre> <pre><code>from math import sqrt\n\ndef distance(point1, point2):\n    \"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((point1[0] - point2[0])**2 + ((point1[1] - point2[1]))**2)\n\ndef plus_courte_distance(tab, depart):\n    \"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = distance(point, depart)\n    for i in range (1, len(tab)):\n        if distance(tab[i], depart) &lt; min_dist:\n            point = tab[i]\n            min_dist = distance(tab[i], depart)\n    return point\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-07","title":"\u25b6 Sujet 07","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-071","title":"Exercice 07.1","text":"<p>Exercice 07.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>fusion</code> prenant en param\u00e8tres deux tableaux non vides <code>tab1</code> et <code>tab2</code> (type <code>list</code>) d'entiers, chacun dans l\u2019ordre croissant, et renvoyant un tableau tri\u00e9 dans l\u2019ordre croissant et contenant l\u2019ensemble des valeurs de <code>tab1</code> et <code>tab2</code>.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; fusion([3, 5], [2, 5])\n[2, 3, 5, 5]\n&gt;&gt;&gt; fusion([-2, 4], [-3, 5, 10])\n[-3, -2, 4, 5, 10]\n&gt;&gt;&gt; fusion([4], [2, 6])\n[2, 4, 6]\n</code></pre> <pre><code>def fusion(tab1, tab2):\n    tab_fusion = []\n    i1 = 0\n    i2 = 0\n    while i1 &lt; len(tab1) and i2 &lt; len(tab2):\n        if tab1[i1] &lt; tab2[i2]:\n            tab_fusion.append(tab1[i1])\n            i1 += 1\n        else:\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n\n    if i1 == len(tab1):\n        while i2 &lt; len(tab2):\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n    else:\n        while i1 &lt; len(tab1):\n            tab_fusion.append(tab1[i1])\n            i1 += 1        \n\n    return tab_fusion\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-072","title":"Exercice 07.2","text":"<p>Exercice 07.2</p> \u00c9nonc\u00e9Correction <p>Le but de cet exercice est d\u2019\u00e9crire une fonction r\u00e9cursive <code>traduire_romain</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res, non vide, repr\u00e9sentant un nombre \u00e9crit en chiffres romains et qui renvoie son \u00e9criture d\u00e9cimale.</p> <p>Les chiffres romains consid\u00e9r\u00e9s sont : I, V, X, L, C, D et M. Ils repr\u00e9sentent respectivement les nombres 1, 5, 10, 50, 100, 500, et 1000 en base dix.</p> <p>On dispose d\u2019un dictionnaire <code>romains</code> dont les cl\u00e9s sont les caract\u00e8res apparaissant dans l\u2019\u00e9criture en chiffres romains et les valeurs sont les nombres entiers associ\u00e9s en \u00e9criture d\u00e9cimale :</p> <p><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}</code></p> <p>Le code de la fonction <code>traduire_romain</code> fournie repose sur le principe suivant :</p> <ul> <li> <p>la valeur d\u2019un caract\u00e8re est ajout\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur sup\u00e9rieure (ou \u00e9gale) \u00e0 celle du caract\u00e8re qui le suit ;</p> </li> <li> <p>la valeur d\u2019un caract\u00e8re est retranch\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur strictement inf\u00e9rieure \u00e0 celle du caract\u00e8re qui le suit.</p> </li> </ul> <p>Ainsi, XIV correspond au nombre 10 + 5 - 1 puisque :</p> <ul> <li> <p>la valeur de X (10) est sup\u00e9rieure \u00e0 celle de I (1), on ajoute donc 10 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire IV ;</p> </li> <li> <p>la valeur de I (1) est strictement inf\u00e9rieure \u00e0 celle de V (5), on soustrait donc 1 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire V.</p> </li> </ul> <p>On rappelle que pour priver une cha\u00eene de caract\u00e8res de son premier caract\u00e8re, on utilisera l\u2019instruction :</p> <p><code>nom_de_variable[1:]</code></p> <p>Par exemple, si la variable <code>mot</code> contient la cha\u00eene <code>\"CDI\"</code>, <code>mot[1:]</code> renvoie <code>\"DI\"</code>.</p> <pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n    \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\n        return ...\n    elif romains[nombre[0]] &gt;= ...\n        return romains[nombre[0]] + ...\n    else:\n        return ...\n</code></pre> <p>Compl\u00e9ter le code de la fonction <code>traduire_romain</code> et le tester.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; traduire_romain(\"XIV\")\n14\n&gt;&gt;&gt; traduire_romain(\"CXLII\")\n142\n&gt;&gt;&gt; traduire_romain(\"MMXXIII\")\n2023\n</code></pre> <pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n    \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\n        return romains[nombre]\n    elif romains[nombre[0]] &gt;= romains[nombre[1]]:\n        return romains[nombre[0]] + traduire_romain(nombre[1:])\n    else:\n        return traduire_romain(nombre[1:]) - romains[nombre[0]]\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-08","title":"\u25b6 Sujet 08","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-081","title":"Exercice 08.1","text":"<p>Exercice 08.1</p> \u00c9nonc\u00e9Correction <p>Sur le r\u00e9seau social TipTop, on s\u2019int\u00e9resse au nombre de \u00ab like \u00bb des abonn\u00e9s. Les donn\u00e9es sont stock\u00e9es dans des dictionnaires o\u00f9 les cl\u00e9s sont les pseudos et les valeurs correspondantes sont les nombres de \u00ab like \u00bb comme ci-dessous :</p> <p><code>{'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50}</code></p> <p>\u00c9crire une fonction <code>max_dico</code> qui :</p> <ul> <li>Prend en param\u00e8tre un dictionnaire <code>dico</code> non vide dont les cl\u00e9s sont des cha\u00eenes de caract\u00e8res et les valeurs associ\u00e9es sont des entiers ;</li> <li>Renvoie un tuple dont :<ul> <li>La premi\u00e8re valeur est la cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale ;</li> <li>La seconde valeur est la premi\u00e8re valeur maximale pr\u00e9sente dans le dictionnaire.</li> </ul> </li> </ul> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; max_dico({'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50})\n('Ada', 201)\n&gt;&gt;&gt; max_dico({'Alan': 222, 'Ada': 201, 'Eve': 220, 'Tim': 50})\n('Alan', 222)\n</code></pre> <pre><code>def max_dico(dico):\n    cle_max = ''\n    val_max = 0\n    for cle in dico:\n        if dico[cle] &gt; val_max:\n            val_max = dico[cle]\n            cle_max = cle\n    return (cle_max, val_max)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-082","title":"Exercice 08.2","text":"<p>Exercice 08.2</p> \u00c9nonc\u00e9Correction <p>Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme par exemple : (2 + 3) \u00d7 5. </p> <p>Il existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en saisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On mod\u00e9lise cette saisie par le tableau [2, 3, '+', 5, '*']. </p> <p>Autre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : </p> <p>[3, 2, '*', 5, '+']. </p> <p>D\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation postfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche \u00e0 droite de la fa\u00e7on suivante :</p> <ul> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ;</li> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au sommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet de la pile.</li> <li>\u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de l\u2019expression arithm\u00e9tique.</li> </ul> <p>Dans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +.</p> <p>Pour cet exercice, on dispose d\u2019une classe <code>Pile</code> qui impl\u00e9mente les m\u00e9thodes de base sur la structure de pile.</p> <p>Compl\u00e9ter le script de la fonction <code>eval_expression</code> qui re\u00e7oit en param\u00e8tre une liste python repr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur associ\u00e9e.</p> <pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for ... in tab:\n        if element != '+' ... element != '*':\n            p.empiler(...)\n        else:\n            if element == ...:\n                resultat = p.depiler() + ...\n            else:\n                resultat = ...\n            p.empiler(...)\n    return ...\n</code></pre> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; eval_expression([2, 3, '+', 5, '*'])\n25\n</code></pre> <pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for element in tab:\n        if element != '+' and element != '*':\n            p.empiler(element)\n        else:\n            if element == '+':\n                resultat = p.depiler() + p.depiler()\n            else:\n                resultat = p.depiler() * p.depiler()\n            p.empiler(resultat)\n    return p.depiler()\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-09","title":"\u25b6 Sujet 09","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-091","title":"Exercice 09.1","text":"<p>Exercice 09.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>Exemples : <pre><code>&gt;&gt;&gt; multiplication(3,5)\n15\n&gt;&gt;&gt; multiplication(-4,-8)\n32\n&gt;&gt;&gt; multiplication(-2,6)\n-12\n&gt;&gt;&gt; multiplication(-2,0)\n0\n</code></pre></p> <pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-092","title":"Exercice 09.2","text":"<p>Exercice 09.2</p> \u00c9nonc\u00e9Correction <p>Soit <code>tab</code> un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et <code>n</code> un entier.</p> <p>La fonction <code>chercher</code> ci-dessous doit renvoyer un indice o\u00f9 la valeur <code>n</code> appara\u00eet dans <code>tab</code> si cette valeur y figure et <code>None</code> sinon. </p> <p>Les param\u00e8tres de la fonction sont :</p> <ul> <li><code>tab</code>, le tableau dans lequel s'effectue la recherche ;</li> <li><code>n</code>, l'entier \u00e0 chercher dans le tableau ;</li> <li><code>i</code>, l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ;</li> <li><code>j</code>, l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche.</li> </ul> <p>L\u2019algorithme demand\u00e9 est une recherche dichotomique r\u00e9cursive.</p> <p>Recopier et compl\u00e9ter le code de la fonction <code>chercher</code> suivante :</p> <pre><code>def chercher(tab, n, i, j):\n    if i &lt; 0 or j &gt; len(tab) :\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // ...\n    if ... &lt; n :\n        return chercher(tab, n, ... , ...)\n    elif ... &gt; n :\n        return chercher(tab, n, ... , ... )\n    else :\n        return ...\n</code></pre> <p>L'ex\u00e9cution du code doit donner : <pre><code>&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 10)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 5)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 9, 0, 5)\n4\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 6, 0, 5)\n2\n</code></pre></p> <pre><code>def chercher(tab, n, i, j):\n    if i &lt; 0 or j &gt; len(tab) :\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // 2\n    if tab[m] &lt; n :\n        return chercher(tab, n, m+1 , j)\n    elif tab[m] &gt; n :\n        return chercher(tab, n, i , m-1 )\n    else :\n        return m\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-10","title":"\u25b6 Sujet 10","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-101","title":"Exercice 10.1","text":"<p>Exercice 10.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire la fonction <code>maxliste</code>, prenant en param\u00e8tre un tableau non vide de nombres <code>tab</code> (de type <code>list</code>) et renvoyant le plus grand \u00e9l\u00e9ment de ce tableau.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; maxliste([98, 12, 104, 23, 131, 9])\n131\n&gt;&gt;&gt; maxliste([-27, 24, -3, 15])\n24\n</code></pre> <pre><code>def maxliste(tab):\n    maximum = tab[0]\n    for element in tab:\n        if element &gt; maximum:\n            maximum = element\n    return maximum\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-102","title":"Exercice 10.2","text":"<p>Exercice 10.2</p> \u00c9nonc\u00e9Correction <p>On dispose de cha\u00eenes de caract\u00e8res contenant uniquement des parenth\u00e8ses ouvrantes et fermantes. </p> <p>Un parenth\u00e9sage est correct si :</p> <ul> <li>le nombre de parenth\u00e8ses ouvrantes de la cha\u00eene est \u00e9gal au nombre de parenth\u00e8ses fermantes.</li> <li>en parcourant la cha\u00eene de gauche \u00e0 droite, le nombre de parenth\u00e8ses d\u00e9j\u00e0 ouvertes doit \u00eatre, \u00e0 tout moment, sup\u00e9rieur ou \u00e9gal au nombre de parenth\u00e8ses d\u00e9j\u00e0 ferm\u00e9es.</li> </ul> <p>Ainsi, <code>((()())(()))</code> est un parenth\u00e9sage correct. </p> <p>Les parenth\u00e9sages <code>())(()</code> et <code>(())(()</code> sont, eux, incorrects.</p> <p>On dispose du code de la classe <code>Pile</code> suivant :</p> <pre><code>class Pile:\n    \"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self):\n        self.valeurs = []\n\n    def est_vide(self):\n        \"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n        \"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n        \"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n</code></pre> <p>On souhaite programmer une fonction parenthesage qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>ch</code> form\u00e9e de parenth\u00e8ses et renvoie <code>True</code> si la cha\u00eene est bien parenth\u00e9s\u00e9e et <code>False</code> sinon.</p> <p>Cette fonction utilise une pile et suit le principe suivant : en parcourant la cha\u00eene de gauche \u00e0 droite, si on trouve une parenth\u00e8se ouvrante, on l\u2019empile au sommet de la pile et si on trouve une parenth\u00e8se fermante, on d\u00e9pile (si possible) la parenth\u00e8se ouvrante stock\u00e9e au sommet de la pile. </p> <p>La cha\u00eene est alors bien parenth\u00e9s\u00e9e si, \u00e0 la fin du parcours, la pile est vide. </p> <p>Elle est, par contre, mal parenth\u00e9s\u00e9e : </p> <ul> <li>si dans le parcours, on trouve une parenth\u00e8se fermante, alors que la pile est vide ;</li> <li>ou si, \u00e0 la fin du parcours, la pile n\u2019est pas vide.</li> </ul> <pre><code>def parenthesage(ch):\n    \"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == ...:\n            p.empiler(c)\n        elif c == ...:\n            if p.est_vide():\n                return ...\n            else:\n                ...\n    return p.est_vide()\n</code></pre> <p>Compl\u00e9ter le code de la fonction <code>parenthesage</code>.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; parenthesage(\"((()())(()))\")\nTrue\n&gt;&gt;&gt; parenthesage(\"())(()\")\nFalse\n&gt;&gt;&gt; parenthesage(\"(())(()\")\nFalse\n</code></pre> <pre><code>class Pile:\n    \"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self):\n        self.valeurs = []\n\n    def est_vide(self):\n        \"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n        \"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n        \"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n\ndef parenthesage(ch):\n    \"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == '(':\n            p.empiler(c)\n        elif c == ')':\n            if p.est_vide():\n                return False\n            else:\n                p.depiler()\n    return p.est_vide()\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-11","title":"\u25b6 Sujet 11","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-111","title":"Exercice 11.1","text":"<p>Exercice 11.1</p> \u00c9nonc\u00e9Correction <p>On mod\u00e9lise la repr\u00e9sentation binaire d'un entier non sign\u00e9 par un tableau d'entiers dont les \u00e9l\u00e9ments sont 0 ou 1. Par exemple, le tableau <code>[1, 0, 1, 0, 0, 1, 1]</code> repr\u00e9sente l'\u00e9criture binaire de l'entier dont l'\u00e9criture d\u00e9cimale est <code>2**6 + 2**4 + 2**1 + 2**0 = 83</code>.</p> <p>\u00c0 l'aide d'un parcours s\u00e9quentiel, \u00e9crire la fonction <code>convertir</code> r\u00e9pondant aux sp\u00e9cifications suivantes :</p> <p><pre><code>def convertir(tab):\n    \"\"\"\n    tab est un tableau d'entiers, dont les \u00e9l\u00e9ments sont 0 ou 1 et\n    repr\u00e9sentant un entier \u00e9crit en binaire. Renvoie l'\u00e9criture\n    d\u00e9cimale de l'entier positif dont la repr\u00e9sentation binaire\n    est donn\u00e9e par le tableau tab\n    \"\"\"\n</code></pre> Exemple : <pre><code>&gt;&gt;&gt; convertir([1, 0, 1, 0, 0, 1, 1])\n83\n&gt;&gt;&gt; convertir([1, 0, 0, 0, 0, 0, 1, 0])\n130\n</code></pre></p> <pre><code>def convertir(tab):\n    puissance = 0\n    total = 0\n    for i in range(len(tab)-1, -1, -1):\n        total += tab[i]*(2**puissance)\n        puissance += 1\n    return total\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-112","title":"Exercice 11.2","text":"<p>Exercice 11.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>tri_insertion</code> suivante prend en argument une liste <code>tab</code> et trie cette liste en utilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la sp\u00e9cification demand\u00e9e.</p> <p>On rappelle le principe du tri par insertion : on consid\u00e8re les \u00e9l\u00e9ments \u00e0 trier un par un, le premier \u00e9l\u00e9ment constituant, \u00e0 lui tout seul, une liste tri\u00e9e de longueur 1. On range ensuite le second \u00e9l\u00e9ment pour constituer une liste tri\u00e9e de longueur 2, puis on range le troisi\u00e8me \u00e9l\u00e9ment pour avoir une liste tri\u00e9e de longueur 3 et ainsi de suite\u2026 A chaque \u00e9tape, le premier \u00e9l\u00e9ment de la sous-liste non tri\u00e9e est plac\u00e9 dans la sous-liste des \u00e9l\u00e9ments d\u00e9j\u00e0 tri\u00e9s de sorte que cette sous-liste demeure tri\u00e9e.  </p> <p>Le principe du tri par insertion est donc d'ins\u00e9rer \u00e0 la n-i\u00e8me it\u00e9ration, le n-i\u00e8me \u00e9l\u00e9ment \u00e0 la bonne place.</p> <pre><code>def tri_insertion(tab):\n    n = len(tab)\n    for i in range(1, n):\n        valeur_insertion = tab[...]\n        # la variable j sert \u00e0 d\u00e9terminer o\u00f9 placer la valeur \u00e0 ranger\n        j = ...\n        # tant qu'on a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer\n        # on d\u00e9cale les valeurs du tableau vers la droite\n        while j &gt; ... and valeur_insertion &lt; tab[...]:\n            tab[j] = tab[j-1]\n            j = ...\n        tab[j] = ...\n</code></pre> <p>Exemples : <pre><code>&gt;&gt;&gt; liste = [9, 5, 8, 4, 0, 2, 7, 1, 10, 3, 6]\n&gt;&gt;&gt; tri_insertion(liste)\n&gt;&gt;&gt; liste\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre></p> <pre><code>def tri_insertion(tab):\n    n = len(tab)\n    for i in range(1, n):\n        valeur_insertion = tab[i]\n        # la variable j sert \u00e0 d\u00e9terminer o\u00f9 placer la valeur \u00e0 ranger\n        j = i\n        # tant qu'on a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer\n        # on d\u00e9cale les valeurs du tableau vers la droite\n        while j &gt; 0 and valeur_insertion &lt; tab[j-1]:\n            tab[j] = tab[j-1]\n            j = j - 1\n        tab[j] = valeur_insertion\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-12","title":"\u25b6 Sujet 12","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-121","title":"Exercice 12.1","text":"<p>Exercice 12.1</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la classe <code>ABR</code>, dont le constructeur est le suivant :</p> <pre><code>class ABR:\n    def __init__(self, g0, v0, d0):\n        self.gauche = g0\n        self.cle = v0\n        self.droit = d0\n\n    def __repr__(self):\n        if self is None:\n            return ''\n        else:\n            return '(' + (self.gauche).__repr__() + ',' + str(self.cle) + ',' +(self.droit).__repr__() + ')'\n</code></pre> <p></p> <p>Ainsi, l\u2019arbre binaire de recherche <code>abr1</code> ci- contre est cr\u00e9\u00e9 par le code python ci- dessous</p> <pre><code>n0 = ABR(None, 0, None)\nn3 = ABR(None, 3, None)\nn2 = ABR(None, 2, n3)\nn3 = ABR(n0, 1, n2)\n</code></pre> <p>Dans tout le code, <code>None</code> correspondra \u00e0 un arbre vide.</p> <p>La classe <code>ABR</code> dispose aussi d\u2019une m\u00e9thode de repr\u00e9sentation (<code>__repr__</code> ), qui affiche entre parenth\u00e8ses le contenu du sous arbre gauche, puis la cl\u00e9 de l\u2019arbre, et enfin le contenu du sous arbre droit. Elle s\u2019utilise en console de la mani\u00e8re suivante :</p> <pre><code>&gt;&gt;&gt; abr1\n((None,0,None),1,(None,2,(None,3,None)))\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>ajoute(cle, a)</code> qui prend en param\u00e8tres une cl\u00e9 <code>cle</code> et un arbre binaire de recherche <code>a</code>  , et qui renvoie un arbre binaire de recherche dans lequel <code>cle</code> a \u00e9t\u00e9 ins\u00e9r\u00e9e. Dans le cas o\u00f9 <code>cle</code> est d\u00e9j\u00e0 pr\u00e9sente dans <code>a</code>, la fonction renvoie l\u2019arbre <code>a</code> inchang\u00e9.</p> <p>R\u00e9sultats \u00e0 obtenir :</p> <pre><code>&gt;&gt;&gt; a = ajoute(4, abr1)\n&gt;&gt;&gt; a\n((None,0,None),1,(None,2,(None,3,(None,4,None))))\n\n&gt;&gt;&gt; ajoute(-5, abr1)\n(((None,-5,None),0,None),1,(None,2,(None,3,None)))\n\n&gt;&gt;&gt; ajoute(2, abr1)\n((None,0,None),1,(None,2,(None,3,None)))\n</code></pre> <pre><code>def ajoute(cle, a): \n    if a is None:\n        a = ABR(None, cle, None)\n    elif cle &gt; a.cle:\n        a.droit = ajoute(cle, a.droit)\n    elif cle &lt; a.cle:\n        a.gauche = ajoute(cle, a.gauche)\n    return a\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-122","title":"Exercice 12.2","text":"<p>Exercice 12.2</p> \u00c9nonc\u00e9Correction <p>On dispose d\u2019un ensemble d\u2019objets dont on conna\u00eet, pour chacun, la masse. On souhaite ranger l\u2019ensemble de ces objets dans des boites identiques de telle mani\u00e8re que la somme des masses des objets contenus dans une bo\u00eete ne d\u00e9passe pas la capacit\u00e9 <code>c</code> de la bo\u00eete. On souhaite utiliser le moins de bo\u00eetes possibles pour ranger cet ensemble d\u2019objets.</p> <p>Pour r\u00e9soudre ce probl\u00e8me, on utilisera un algorithme glouton consistant \u00e0 placer chacun des objets dans la premi\u00e8re bo\u00eete o\u00f9 cela est possible.</p> <p>Par exemple, pour ranger dans des bo\u00eetes de capacit\u00e9 <code>c = 5</code> un ensemble de trois objets dont les masses sont repr\u00e9sent\u00e9es en Python par la liste <code>[1, 5, 2]</code>, on proc\u00e8de de la fa\u00e7on suivante :</p> <ul> <li>Le premier objet, de masse 1, va dans une premi\u00e8re boite.</li> <li>Le deuxi\u00e8me objet, de masse 5, ne peut pas aller dans la m\u00eame boite que le premier objet car cela d\u00e9passerait la capacit\u00e9 de la boite. On place donc cet objet dans une deuxi\u00e8me bo\u00eete.</li> <li>Le troisi\u00e8me objet, de masse 2, va dans la premi\u00e8re bo\u00eete.</li> </ul> <p>On a donc utilis\u00e9 deux bo\u00eetes de capacit\u00e9 <code>c = 5</code> pour ranger les 3 objets.</p> <p>Compl\u00e9ter la fonction Python <code>empaqueter(liste_masses, c)</code> suivante pour qu\u2019elle renvoie le nombre de bo\u00eetes de capacit\u00e9 c n\u00e9cessaires pour empaqueter un ensemble d\u2019objets dont les masses sont contenues dans la liste <code>liste_masses</code>.</p> <pre><code>def empaqueter(liste_masses, c):\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [0]*n\n    for masse in ... :\n        i = 0\n        while i &lt;= nb_boites and boites[i] + ... &gt; C:\n            i = i + 1\n        if i == nb_boites + 1:\n            ...\n        boites[i] = ...\n    return ...\n</code></pre> <p>Tester ensuite votre fonction : <pre><code>&gt;&gt;&gt; empaqueter([7, 6, 3, 4, 8, 5, 9, 2], 11)\n5\n</code></pre></p> <pre><code>def empaqueterR(liste_masses, c):\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [0]*n\n    for masse in liste_masses :\n        i = 0\n        while i &lt;= nb_boites and boites[i] + masse &gt; c:\n            i = i + 1\n        if i == nb_boites + 1:\n            nb_boites = nb_boites + 1\n        boites[i] = boites[i] + masse\n    return nb_boites + 1\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-13","title":"\u25b6 Sujet 13","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-131","title":"Exercice 13.1","text":"<p>Exercice 13.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire en langage Python une fonction <code>recherche</code> prenant comme param\u00e8tres une variable <code>a</code> de type num\u00e9rique (<code>float</code> ou <code>int</code>) et un tableau <code>tab</code> (type <code>list</code>) et qui renvoie le nombre d'occurrences de <code>a</code> dans <code>tab</code>.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; recherche(5, [])\n0\n&gt;&gt;&gt; recherche(5, [-2, 3, 4, 8])\n0\n&gt;&gt;&gt; recherche(5, [-2, 3, 1, 5, 3, 7, 4])\n1\n&gt;&gt;&gt; recherche(5, [-2, 5, 3, 5, 4, 5])\n3\n</code></pre></p> <pre><code>def recherche(a, tab):\n    nb = 0\n    for element in tab:\n        if element == a:\n            nb += 1\n    return nb\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-132","title":"Exercice 13.2","text":"<p>Exercice 13.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>rendu_monnaie</code> prend en param\u00e8tres deux nombres entiers positifs <code>somme_due</code> et <code>somme_versee</code> et elle permet de proc\u00e9der au rendu de monnaie de la diff\u00e9rence <code>somme_versee \u2013 somme_due</code> pour des achats effectu\u00e9s avec le syst\u00e8me de pi\u00e8ces de la zone Euro. On utilise pour cela un algorithme glouton qui commence par rendre le maximum de pi\u00e8ces de plus grandes valeurs et ainsi de suite. Par la suite, on assimilera les billets \u00e0 des pi\u00e8ces.</p> <p>La fonction <code>rendu_monnaie</code> renvoie un tableau de type <code>list</code> contenant les pi\u00e8ces qui composent le rendu.</p> <p>Toutes les sommes sont exprim\u00e9es en euros. Les valeurs possibles pour les pi\u00e8ces sont donc <code>[1, 2, 5, 10, 20, 50, 100, 200]</code>.</p> <p>Ainsi, l\u2019instruction <code>rendu_monnaie(452, 500)</code> renvoie le tableau <code>[20, 20, 5, 2, 1]</code>.</p> <p>En effet, la somme \u00e0 rendre est de <code>48</code> euros soit <code>20 + 20 + 5 + 2 + 1</code>.</p> <p>Le code de la fonction <code>rendu_monnaie</code> est donn\u00e9 ci-dessous :</p> <pre><code>def rendu_monnaie(somme_due, somme_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = ...\n    a_rendre = ...\n    i = len(pieces) - 1\n    while a_rendre &gt; ... :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(...)\n            a_rendre = ...\n        else :\n            i = ...\n    return rendu\n</code></pre> <p>Compl\u00e9ter ce code et le tester : <pre><code>&gt;&gt;&gt; rendu_monnaie(700,700)\n[]\n&gt;&gt;&gt; rendu_monnaie(102,500)\n[200, 100, 50, 20, 20, 5, 2, 1]\n</code></pre></p> <pre><code>def rendu_monnaie(somme_due, somme_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = []\n    a_rendre = somme_versee - somme_due\n    i = len(pieces) - 1\n    while a_rendre &gt; 0 :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(pieces[i])\n            a_rendre = a_rendre - pieces[i]\n        else :\n            i = i - 1\n    return rendu\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-14","title":"\u25b6 Sujet 14","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-141","title":"Exercice 14.1","text":"<p>Exercice 14.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p> <pre><code>def recherche(elt, tab):\n    '''\n    renvoie l\u2019indice de la premi\u00e8re occurrence de\n    elt dans tab si elt est dans tab et -1 sinon. \n    '''\n    assert tab != [], \"le tableau est vide\"\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            return i        \n    return -1         \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-142","title":"Exercice 14.2","text":"<p>Exercice 14.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la fonction <code>insere</code> ci-dessous qui prend en argument un entier <code>a</code> et un tableau <code>tab</code> d'entiers tri\u00e9s par ordre croissant. Cette fonction cr\u00e9e et renvoie un nouveau tableau \u00e0 partir de celui fourni en param\u00e8tre en y ins\u00e9rant la valeur <code>a</code> de sorte que le tableau renvoy\u00e9 soit encore tri\u00e9 par ordre croissant. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes Python.</p> <pre><code>def insere(a, tab):\n    \"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = ...\n    while a &lt; ... and i &gt;= 0:\n        l[i+1] = ...\n        l[i] = a\n        i = ...\n    return l\n</code></pre> <p>Compl\u00e9ter la fonction <code>insere</code> ci-dessus.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; insere(3, [1, 2, 4, 5])\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; insere(30, [1, 2, 7, 12, 14, 25])\n[1, 2, 7, 12, 14, 25, 30]\n&gt;&gt;&gt; insere(1, [2, 3, 4])\n[1, 2, 3, 4]\n&gt;&gt;&gt; insere(1, [])\n[1]\n</code></pre></p> <pre><code>def insere(a, tab):\n    \"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = len(l) - 2\n    while a &lt; l[i] and i &gt;= 0:\n        l[i+1] = l[i]\n        l[i] = a\n        i = i - 1\n    return l\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-15","title":"\u25b6 Sujet 15","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-151","title":"Exercice 15.1","text":"<p>Exercice 15.1</p> \u00c9nonc\u00e9Correction <p>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es : <pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n</code></pre></p> <p>\u00c9crire la fonction <code>mini</code> qui prend en param\u00e8tres un tableau <code>releve</code> des relev\u00e9s et un tableau <code>date</code> des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante. On suppose que la temp\u00e9rature minimale est atteinte une seule fois.</p> <p>Exemple : <pre><code>&gt;&gt;&gt; mini(t_moy, annees)\n(12.5, 2016)\n</code></pre></p> <pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n\ndef mini(releve, date):\n    temp_mini = releve[0]\n    date_mini = date[0]\n    for i in range(len(releve)):\n        if releve[i] &lt; temp_mini:\n            temp_mini = releve[i]\n            date_mini = date[i]\n    return temp_mini, date_mini\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-152","title":"Exercice 15.2","text":"<p>Exercice 15.2</p> \u00c9nonc\u00e9Correction <p>Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : bob, radar, et non sont des mots palindromes.</p> <p>De m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543.</p> <p>L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome.</p> <p>Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous sachant que la fonction <code>est_nbre_palindrome</code> s\u2019appuiera sur la fonction <code>est_palindrome</code> qui elle-m\u00eame s\u2019appuiera sur la fonction <code>inverse_chaine</code>.</p> <p>La fonction <code>inverse_chaine</code> inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoie la cha\u00eene invers\u00e9e.</p> <p>La fonction <code>est_palindrome</code> teste si une chaine de caract\u00e8res <code>chaine</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>La fonction <code>est_nbre_palindrome</code> teste si un nombre <code>nbre</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>Compl\u00e9ter le code des trois fonctions ci-dessous.</p> <p><pre><code>def inverse_chaine(chaine):\n    result = ...\n    for caractere in chaine:\n        result = ...\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return ...\n\ndef est_nbre_palindrome(nbre):\n    chaine = ...\n    return est_palindrome(chaine)\n</code></pre> Exemples :</p> <pre><code>&gt;&gt;&gt; inverse_chaine('bac')\n'cab'\n&gt;&gt;&gt; est_palindrome('NSI')\nFalse\n&gt;&gt;&gt; est_palindrome('ISN-NSI')\nTrue\n&gt;&gt;&gt; est_nbre_palindrome(214312)\nFalse\n&gt;&gt;&gt; est_nbre_palindrome(213312)\nTrue\n</code></pre> <pre><code>def inverse_chaine(chaine):\n    result = ''\n    for caractere in chaine:\n        result = caractere + result\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return chaine == inverse\n\ndef est_nbre_palindrome(nbre):\n    chaine = str(nbre)\n    return est_palindrome(chaine)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-16","title":"\u25b6 Sujet 16","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-161","title":"Exercice 16.1","text":"<p>Exercice 16.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche_indices_classement</code> qui prend en param\u00e8tres un entier <code>elt</code> et une liste d\u2019entiers <code>tab</code>, et qui renvoie trois listes :</p> <ul> <li>la premi\u00e8re liste contient les indices des valeurs de la liste <code>tab</code> strictement inf\u00e9rieures \u00e0 <code>elt</code> ;</li> <li>la deuxi\u00e8me liste contient les indices des valeurs de la liste <code>tab</code> \u00e9gales \u00e0 <code>elt</code> ;</li> <li>la troisi\u00e8me liste contient les indices des valeurs de la liste <code>tab</code> strictement sup\u00e9rieures \u00e0 <code>elt</code>.</li> </ul> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; recherche_indices_classement(3, [1, 3, 4, 2, 4, 6, 3, 0])\n([0, 3, 7], [1, 6], [2, 4, 5])\n&gt;&gt;&gt; recherche_indices_classement(3, [1, 4, 2, 4, 6, 0])\n([0, 2, 5], [], [1, 3, 4])\n&gt;&gt;&gt;recherche_indices_classement(3, [1, 1, 1, 1])\n([0, 1, 2, 3], [], [])\n&gt;&gt;&gt; recherche_indices_classement(3, [])\n([], [], [])\n</code></pre> <pre><code>def recherche_indices_classement(elt, tab):\n    ind_inf = []\n    ind_egal = []\n    ind_sup = [] \n    for i in range(len(tab)):\n        if tab[i] &lt; elt:\n            ind_inf.append(i)\n        elif tab[i] &gt; elt:\n            ind_sup.append(i)\n        else:\n            ind_egal.append(i)\n    return (ind_inf, ind_egal, ind_sup)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-162","title":"Exercice 16.2","text":"<p>Exercice 16.2</p> \u00c9nonc\u00e9Correction <p>Un professeur de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un dictionnaire :</p> <ul> <li>les clefs sont les noms des \u00e9l\u00e8ves ;</li> <li>les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves sous forme de cha\u00eene de caract\u00e8res et les valeurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients dans une liste.</li> </ul> <p>Avec :</p> <pre><code>resultats = {'Dupont': {\n                        'DS1': [15.5, 4],\n                        'DM1': [14.5, 1],\n                        'DS2': [13, 4],\n                        'PROJET1': [16, 3],\n                        'DS3': [14, 4]\n                    },\n            'Durand': {\n                        'DS1': [6 , 4],\n                        'DM1': [14.5, 1],\n                        'DS2': [8, 4],\n                        'PROJET1': [9, 3],\n                        'IE1': [7, 2],\n                        'DS3': [8, 4],\n                        'DS4':[15, 4]\n                    }\n            }\n</code></pre> <p>L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4.</p> <p>Le professeur cr\u00e9e une fonction <code>moyenne</code> qui prend en param\u00e8tre le nom d\u2019un de ses \u00e9l\u00e8ves et renvoie sa moyenne arrondie au dixi\u00e8me.</p> <p>Compl\u00e9ter le code du professeur ci-dessous :</p> <pre><code>def moyenne(nom, dico_result):\n    if nom in ...:\n        notes = dico_result[nom]\n        total_points = ...\n        total_coefficients = ...\n        for ...  in notes.values():\n            note, coefficient = valeurs\n            total_points = total_points + ... * coefficient\n            total_coefficients = ... + coefficient\n        return round( ... / total_coefficients, 1 )\n    else:\n        return -1\n</code></pre> <pre><code>def moyenne(nom, dico_result):\n    if nom in dico_result:\n        notes = dico_result[nom]\n        total_points = 0.\n        total_coefficients = 0\n        for valeurs  in notes.values():\n            note, coefficient = valeurs\n            total_points = total_points + note * coefficient\n            total_coefficients = total_coefficients + coefficient\n        return round( total_points / total_coefficients, 1 )\n    else:\n        return -1\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-17","title":"\u25b6 Sujet 17","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-171","title":"Exercice 17.1","text":"<p>Exercice 17.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>moyenne(liste_notes)</code> qui renvoie la moyenne pond\u00e9r\u00e9e des r\u00e9sultats contenus dans la liste <code>liste_notes</code>, non vide, donn\u00e9e en param\u00e8tre. Cette liste contient des couples <code>(note, coefficient)</code> dans lesquels :</p> <ul> <li><code>note</code> est un nombre de type flottant (<code>float</code>) compris entre 0 et 20 ;</li> <li><code>coefficient</code> est un nombre entier strictement positif.</li> </ul> <p>Ainsi l\u2019expression <code>moyenne([(15,2),(9,1),(12,3)])</code> devra renvoyer <code>12.5</code>.</p> <p>\\(\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5\\)</p> <pre><code>def moyenne(liste_notes):\n    somme_notes = 0\n    somme_coeffs = 0\n    for devoir in liste_notes:\n        note = devoir[0]\n        coeff = devoir[1]\n        somme_notes += note * coeff\n        somme_coeffs += coeff\n    return somme_notes / somme_coeffs\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-172","title":"Exercice 17.2","text":"<p>Exercice 17.2</p> \u00c9nonc\u00e9Correction <p>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal (Figure 1).</p> <p>Dans le triangle de Pascal, chaque ligne commence et se termine par le nombre 1. Comme l\u2019illustre la Figure 2, on additionne deux valeurs successives d\u2019une ligne pour obtenir la valeur qui se situe sous la deuxi\u00e8me valeur.</p> <p></p> <p>Compl\u00e9ter la fonction <code>pascal</code> ci-apr\u00e8s prenant en param\u00e8tre un entier <code>n</code> sup\u00e9rieur ou \u00e9gal \u00e0 2. Cette fonction doit renvoyer une liste correspondant au triangle de Pascal de la ligne 0 \u00e0 la ligne <code>n</code>. Le tableau repr\u00e9sentant le triangle de Pascal sera contenu dans la variable <code>triangle</code>.</p> <pre><code>def pascal(n):\n    triangle = [[1]]\n    for k in range(1,...):\n        ligne_k = [...]\n        for i in range(1,k):\n            ligne_k.append(triangle[...][i-1]+triangle[...][...])\n        ligne_k.append(...)\n        triangle.append(ligne_k)\n    return triangle\n</code></pre> <p>Pour <code>n = 4</code>, voici ce qu'on devra obtenir : <pre><code>&gt;&gt;&gt; pascal(4)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n</code></pre> Pour <code>n = 5</code>, voici ce qu'on devra obtenir : <pre><code>&gt;&gt;&gt; pascal(5)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n</code></pre></p> <pre><code>def pascal(n):\n    triangle = [[1]]\n    for k in range(1, n+1):\n        ligne_k = [1]\n        for i in range(1, k):\n            ligne_k.append(triangle[k-1][i-1] + triangle[k-1][i])\n        ligne_k.append(1)\n        triangle.append(ligne_k)\n    return triangle\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-18","title":"\u25b6 Sujet 18","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-181","title":"Exercice 18.1","text":"<p>Exercice 18.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>max_et_indice</code> qui prend en param\u00e8tre une liste non vide <code>tab</code> de nombres entiers et qui renvoie la valeur du plus grand \u00e9l\u00e9ment de cette liste ainsi que l\u2019indice de sa premi\u00e8re apparition dans cette liste.</p> <p>L\u2019utilisation de la fonction native <code>max</code> n\u2019est pas autoris\u00e9e.</p> <p>Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; max_et_indice([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, 3)\n&gt;&gt;&gt; max_et_indice([-2])\n(-2, 0)\n&gt;&gt;&gt; max_et_indice([-1, -1, 3, 3, 3])\n(3, 2)\n&gt;&gt;&gt; max_et_indice([1, 1, 1, 1])\n(1, 0)\n</code></pre> <pre><code>def max_et_indice(tab):\n    '''\n    renvoie la valeur du plus grand \u00e9l\u00e9ment de cette liste ainsi\n    que l\u2019indice de sa premi\u00e8re apparition dans cette liste.\n    '''\n    assert tab != [], 'le tableau est vide'\n\n    val_max = tab[0]\n    ind_max = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n            ind_max = i\n    return (val_max, ind_max)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-182","title":"Exercice 18.2","text":"<p>Exercice 18.2</p> \u00c9nonc\u00e9Correction <p>L\u2019ordre des g\u00e8nes sur un chromosome est repr\u00e9sent\u00e9 par un tableau <code>ordre</code> de <code>n</code> cases d\u2019entiers distincts deux \u00e0 deux et compris entre 1 et <code>n</code>.</p> <p>Par exemple, <code>ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]</code> dans le cas <code>n = 9</code>.</p> <p>On dit qu\u2019il y a un point de rupture dans <code>ordre</code> dans chacune des situations suivantes :</p> <ul> <li>la premi\u00e8re valeur de <code>ordre</code> n\u2019est pas 1 ;</li> <li>l\u2019\u00e9cart entre deux g\u00e8nes cons\u00e9cutifs n\u2019est pas \u00e9gal \u00e0 1 ;</li> <li>la derni\u00e8re valeur de <code>ordre</code> n\u2019est pas n.</li> </ul> <p>Par exemple, si <code>ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]</code> avec <code>n = 9</code>, on a</p> <ul> <li>un point de rupture au d\u00e9but car 5 est diff\u00e9rent de 1</li> <li>un point de rupture entre 3 et 6 (l\u2019\u00e9cart est de 3)</li> <li>un point de rupture entre 7 et 2 (l\u2019\u00e9cart est de 5)</li> <li>un point de rupture entre 1 et 8 (l\u2019\u00e9cart est de 7)</li> </ul> <p>Il y a donc 4 points de rupture.</p> <p>Compl\u00e9ter les fonctions Python <code>est_un_ordre</code> et <code>nombre_points_rupture</code> propos\u00e9es \u00e0 la page suivante pour que :</p> <ul> <li> <p>la fonction <code>est_un_ordre</code> renvoie <code>True</code> si le tableau pass\u00e9 en param\u00e8tre repr\u00e9sente bien un ordre de g\u00e8nes de chromosome et <code>False</code> sinon ;</p> </li> <li> <p>la fonction <code>nombre_points_rupture</code> renvoie le nombre de points de rupture d\u2019un tableau pass\u00e9 en param\u00e8tre repr\u00e9sentant l\u2019ordre de g\u00e8nes d\u2019un chromosome.</p> </li> </ul> <pre><code>def est_un_ordre(tab):\n    '''\n    Renvoie True si tab est de longueur n et contient tous les entiers\n    de 1 \u00e0 n, False sinon\n    '''\n    for i in range(1,...):\n        if ...:\n            return False\n    return True\n\n\ndef nombre_points_rupture(ordre):\n    '''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente un ordre\n    de g\u00e8nes de chromosome\n    '''\n    assert ... # ordre n'est pas un ordre de g\u00e8nes\n    n = len(ordre)\n    nb = 0\n    if ordre[...] != 1: # le premier n'est pas 1\n        nb = nb + 1\n    i = 0\n    while i &lt; ...:\n        if ... not in [-1, 1]: # l'\u00e9cart n'est pas 1\n            nb = nb + 1\n        i = i + 1\n    if ordre[...] != n: # le dernier n'est pas n\n        nb = nb + 1\n    return nb\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; est_un_ordre([1, 6, 2, 8, 3, 7])\nFalse\n&gt;&gt;&gt; est_un_ordre([5, 4, 3, 6, 7, 2, 1, 8, 9])\nTrue\n&gt;&gt;&gt; nombre_points_rupture([5, 4, 3, 6, 7, 2, 1, 8, 9])\n4\n&gt;&gt;&gt; nombre_points_rupture([1, 2, 3, 4, 5])\n0\n&gt;&gt;&gt; nombre_points_rupture([1, 6, 2, 8, 3, 7, 4, 5])\n7\n&gt;&gt;&gt; nombre_points_rupture([2, 1, 3, 4])\n2\n</code></pre> <pre><code>def est_un_ordre(tab):\n    '''\n    Renvoie True si tab est de longueur n et contient tous les entiers\n    de 1 \u00e0 n, False sinon\n    '''\n    for i in range(1, len(tab)+1):\n        if i not in tab:\n            return False\n    return True\n\n\ndef nombre_points_rupture(ordre):\n    '''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente un ordre\n    de g\u00e8nes de chromosome\n    '''\n    assert est_un_ordre(ordre) # ordre n'est pas un ordre de g\u00e8nes\n    n = len(ordre)\n    nb = 0\n    if ordre[0] != 1: # le premier n'est pas 1\n        nb = nb + 1\n    i = 0\n    while i &lt; n-1:\n        if ordre[i+1] - ordre[i] not in [-1, 1]: # l'\u00e9cart n'est pas 1\n            nb = nb + 1\n        i = i + 1\n    if ordre[n-1] != n: # le dernier n'est pas n\n        nb = nb + 1\n    return nb\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-19","title":"\u25b6 Sujet 19","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-191","title":"Exercice 19.1","text":"<p>Exercice 19.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres un tableau <code>tab</code> de nombres entiers tri\u00e9s par ordre croissant et un nombre entier <code>n</code>, et qui effectue une recherche dichotomique du nombre entier <code>n</code> dans le tableau non vide <code>tab</code>.</p> <p>Cette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le tableau, <code>-1</code> sinon.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5)\n-1\n</code></pre></p> <pre><code>def recherche(tab, n):\n    ind_debut = 0\n    ind_fin = len(tab) - 1\n    while ind_debut &lt;= ind_fin:\n        ind_milieu = (ind_debut + ind_fin) // 2\n        if tab[ind_milieu] == n:\n            return ind_milieu\n        elif tab[ind_milieu] &lt; n:\n            ind_debut = ind_milieu + 1\n        else:\n            ind_fin = ind_milieu - 1\n    return -1\n</code></pre> <pre><code>\u00c9crire une fonction `recherche` qui prend en param\u00e8tres un tableau `tab` de nombres\nentiers tri\u00e9s par ordre croissant et un nombre entier `n`, et qui effectue une recherche\ndichotomique du nombre entier `n` dans le tableau non vide `tab`.\n\nCette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le\ntableau, `-1` sinon.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5)\n-1\n```\n</code></pre> <p> R\u00e9digez votre code sur Basthon</p>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-192","title":"Exercice 19.2","text":"<p>Exercice 19.2</p> \u00c9nonc\u00e9Correction <p>Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant dans l\u2019alphabet. Par exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A, le Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019 ...) ne sont pas cod\u00e9s.</p> <p>La fonction <code>position_alphabet</code> ci-dessous prend en param\u00e8tre un caract\u00e8re <code>lettre</code> et renvoie la position de <code>lettre</code> dans la cha\u00eene de caract\u00e8res <code>ALPHABET</code> s\u2019il s\u2019y trouve.</p> <p>La fonction <code>cesar</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>message</code> et un nombre entier <code>decalage</code> et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant le d\u00e9calage <code>decalage</code>.</p> <pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    resultat = ''\n    for ... in message:\n        if 'A' &lt;= c and c &lt;= 'Z':\n            indice = ( ... ) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = ...\n    return resultat\n</code></pre> <p>Compl\u00e9ter la fonction <code>cesar</code>.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; cesar('BONJOUR A TOUS. VIVE LA MATIERE NSI !', 4)\n'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !'\n&gt;&gt;&gt; cesar('GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !', -5)\n'BONJOUR A TOUS. VIVE LA MATIERE NSI !'\n</code></pre> <pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    resultat = ''\n    for c in message:\n        if 'A' &lt;= c and c &lt;= 'Z':\n            indice = (position_alphabet(c) + decalage) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = resultat + c\n    return resultat\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-20","title":"\u25b6 Sujet 20","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-201","title":"Exercice 20.1","text":"<p>Exercice 20.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>ajoute_dictionnaires</code> qui prend en param\u00e8tres deux dictionnaires <code>d1</code> et <code>d2</code> dont les cl\u00e9s sont des nombres et renvoie le dictionnaire <code>d</code> d\u00e9fini de la fa\u00e7on suivante :</p> <ul> <li>Les cl\u00e9s de <code>d</code> sont celles de <code>d1</code> et celles de <code>d2</code> r\u00e9unies.</li> <li>Si une cl\u00e9 est pr\u00e9sente dans les deux dictionnaires <code>d1</code> et <code>d2</code>, sa valeur associ\u00e9e dans le dictionnaire d est la somme de ses valeurs dans les dictionnaires <code>d1</code> et <code>d2</code>.</li> <li>Si une cl\u00e9 n\u2019est pr\u00e9sente que dans un des deux dictionnaires, sa valeur associ\u00e9e dans le dictionnaire <code>d</code> est la m\u00eame que sa valeur dans le dictionnaire o\u00f9 elle est pr\u00e9sente.</li> </ul> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {2: 9, 3: 11})\n{1: 5, 2: 16, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({}, {2: 9, 3: 11})\n{2: 9, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {})\n{1: 5, 2: 7}\n</code></pre> <pre><code>def ajoute_dictionnaires(d1, d2):\n    for cle in d2:\n        if cle in d1:\n            d1[cle] += d2[cle]\n        else:\n            d1[cle] = d2[cle]\n    return d1\n</code></pre> <pre><code>\u00c9crire une fonction `ajoute_dictionnaires` qui prend en param\u00e8tres deux\ndictionnaires `d1` et `d2` dont les cl\u00e9s sont des nombres et renvoie le dictionnaire `d` d\u00e9fini de\nla fa\u00e7on suivante :\n\n- Les cl\u00e9s de `d` sont celles de `d1` et celles de `d2` r\u00e9unies.\n- Si une cl\u00e9 est pr\u00e9sente dans les deux dictionnaires `d1` et `d2`, sa valeur associ\u00e9e\ndans le dictionnaire d est la somme de ses valeurs dans les dictionnaires `d1` et `d2`.\n- Si une cl\u00e9 n\u2019est pr\u00e9sente que dans un des deux dictionnaires, sa valeur associ\u00e9e\ndans le dictionnaire `d` est la m\u00eame que sa valeur dans le dictionnaire o\u00f9 elle est\npr\u00e9sente.\n\nExemples :\n\n```python\n&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {2: 9, 3: 11})\n{1: 5, 2: 16, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({}, {2: 9, 3: 11})\n{2: 9, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {})\n{1: 5, 2: 7}\n```\n</code></pre> <p> R\u00e9digez votre code sur Basthon</p>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-202","title":"Exercice 20.2","text":"<p>Exercice 20.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re une piste carr\u00e9e qui contient 4 cases par c\u00f4t\u00e9. Les cases sont num\u00e9rot\u00e9es de 0 inclus \u00e0 12 exclu comme ci-dessous :</p> <p></p> <p>L\u2019objectif de l\u2019exercice est d\u2019impl\u00e9menter le jeu suivant :</p> <p>Au d\u00e9part, le joueur place son pion sur la case 0. A chaque coup, il lance un d\u00e9 \u00e9quilibr\u00e9 \u00e0 six faces et avance son pion d\u2019autant de cases que le nombre indiqu\u00e9 par le d\u00e9 (entre 1 et 6 inclus) dans le sens des aiguilles d\u2019une montre.</p> <p>Par exemple, s\u2019il obtient 2 au premier lancer, il pose son pion sur la case 2 puis s\u2019il obtient 6 au deuxi\u00e8me lancer, il le pose sur la case 8, puis s\u2019il obtient \u00e0 nouveau 6, il pose le pion sur la case 2.</p> <p>Le jeu se termine lorsque le joueur a pos\u00e9 son pion sur toutes les cases de la piste.</p> <p>Compl\u00e9ter la fonction <code>nbre_coups</code> ci-dessous de sorte qu\u2019elle renvoie le nombre de lancers al\u00e9atoires n\u00e9cessaires pour terminer le jeu.</p> <p>Proposer ensuite quelques tests pour en v\u00e9rifier le fonctionnement.</p> <pre><code>from random import randint\n\ndef nbre_coups():\n    n = ...\n    cases_vues = [0]\n    case_en_cours = 0\n    nbre_cases = 12\n    while ... &lt; ...:\n        x = randint(1, 6)\n        case_en_cours = (case_en_cours + ...) % ...\n        if ...:\n            cases_vues.append(case_en_cours)\n        n = ...\n    return n\n</code></pre> <pre><code>from random import randint\n\ndef nbre_coups():\n    n = 0\n    cases_vues = [0]\n    case_en_cours = 0\n    nbre_cases = 12\n    while len(cases_vues) &lt; nbre_cases:\n        x = randint(1, 6)\n        case_en_cours = (case_en_cours + x) % nbre_cases\n        if case_en_cours not in cases_vues:\n            cases_vues.append(case_en_cours)\n        n = n + 1\n    return n\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-21","title":"\u25b6 Sujet 21","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-211","title":"Exercice 21.1","text":"<p>Exercice 21.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Le codage par diff\u00e9rence (delta encoding en anglais) permet de compresser un tableau de donn\u00e9es en indiquant pour chaque donn\u00e9e, sa diff\u00e9rence avec la pr\u00e9c\u00e9dente (plut\u00f4t que la donn\u00e9e elle-m\u00eame). On se retrouve alors avec un tableau de donn\u00e9es plus petit, n\u00e9cessitant moins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives sont proches. </p> <p>Programmer la fonction <code>delta(liste)</code> qui prend en param\u00e8tre un tableau non vide de nombres entiers et qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; delta([1000, 800, 802, 1000, 1003])\n[1000, -200, 2, 198, 3]\n&gt;&gt;&gt; delta([42])\n[42] \n</code></pre> <pre><code>def delta(tab):\n    diff = [tab[0]]\n    for i in range(1, len(tab)):\n        diff.append(tab[i] - tab[i-1])\n    return diff\n</code></pre> <pre><code>Le codage par diff\u00e9rence (*delta encoding* en anglais) permet de compresser un tableau de\ndonn\u00e9es en indiquant pour chaque donn\u00e9e, sa diff\u00e9rence avec la pr\u00e9c\u00e9dente (plut\u00f4t que la\ndonn\u00e9e elle-m\u00eame). On se retrouve alors avec un tableau de donn\u00e9es plus petit, n\u00e9cessitant\nmoins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives\nsont proches.\n\nProgrammer la fonction `delta(liste)` qui prend en param\u00e8tre un tableau non vide de nombres entiers\net qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique.\n\nExemples :\n\n```python\n&gt;&gt;&gt; delta([1000, 800, 802, 1000, 1003])\n[1000, -200, 2, 198, 3]\n&gt;&gt;&gt; delta([42])\n[42] \n```\n</code></pre> <p> R\u00e9digez votre code sur Basthon</p>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-212","title":"Exercice 21.2","text":"<p>Exercice 21.2</p> \u00c9nonc\u00e9Correction <p>Une expression arithm\u00e9tique ne comportant que les quatre op\u00e9rations +, \u2212, \u00d7, \u00f7 peut \u00eatre repr\u00e9sent\u00e9e sous forme d\u2019arbre binaire. Les n\u0153uds internes sont des op\u00e9rateurs et les feuilles sont des nombres. Dans un tel arbre, la disposition des n\u0153uds joue le r\u00f4le des parenth\u00e8ses que nous connaissons bien.  </p> <p></p> <p>En parcourant en profondeur infixe l\u2019arbre binaire ci-dessus, on retrouve l\u2019expression not\u00e9e habituellement :  </p> \\[(3 \\times (8 + 7)) \u2212 (2 + 1)\\] <p>La classe <code>Noeud</code> ci-apr\u00e8s permet d\u2019impl\u00e9menter une structure d\u2019arbre binaire.</p> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>expression_infixe</code> qui prend en param\u00e8tre un objet de la classe <code>Noeud</code> et qui renvoie l\u2019expression arithm\u00e9tique repr\u00e9sent\u00e9e par l\u2019arbre binaire pass\u00e9 en param\u00e8tre, sous forme d\u2019une cha\u00eene de caract\u00e8res contenant des parenth\u00e8ses.  </p> <p>R\u00e9sultat attendu avec l\u2019arbre ci-dessus :</p> <pre><code>&gt;&gt;&gt; e = Noeud(Noeud(Noeud(None, 3, None), '*', Noeud(Noeud(None, 8, None),\n'+', Noeud(None, 7, None))), '-', Noeud(Noeud(None, 2, None), '+',\nNoeud(None, 1, None)))\n\n&gt;&gt;&gt; expression_infixe(e)\n'((3*(8+7))-(2+1))'\n</code></pre> <pre><code>class Noeud:\n    '''\n    classe impl\u00e9mentant un noeud d'arbre binaire\n    '''\n\n    def __init__(self, g, v, d):\n        '''\n        un objet Noeud poss\u00e8de 3 attributs :\n        - gauche : le sous-arbre gauche,\n        - valeur : la valeur de l'\u00e9tiquette,\n        - droit : le sous-arbre droit.\n        '''\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def __str__(self):\n        '''\n        renvoie la repr\u00e9sentation du noeud en chaine de caract\u00e8res\n        '''\n        return str(self.valeur)\n\n    def est_une_feuille(self):\n        '''\n        renvoie True si et seulement si le noeud est une feuille\n        '''\n        return self.gauche is None and self.droit is None\n\n\ndef expression_infixe(e):\n    s = ...\n    if e.gauche is not None:\n        s = '(' + s + expression_infixe(...)\n    s = s + ...\n    if ... is not None:\n        s = s + ... + ...\n    return s\n</code></pre> <pre><code>class Noeud:\n    '''\n    classe impl\u00e9mentant un noeud d'arbre binaire\n    '''\n\n    def __init__(self, g, v, d):\n        '''\n        un objet Noeud poss\u00e8de 3 attributs :\n        - gauche : le sous-arbre gauche,\n        - valeur : la valeur de l'\u00e9tiquette,\n        - droit : le sous-arbre droit.\n        '''\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def __str__(self):\n        '''\n        renvoie la repr\u00e9sentation du noeud en chaine de caract\u00e8res\n        '''\n        return str(self.valeur)\n\n    def est_une_feuille(self):\n        '''\n        renvoie True si et seulement si le noeud est une feuille\n        '''\n        return self.gauche is None and self.droit is None\n\n\ndef expression_infixe(e):\n    s = ''\n    if e.gauche is not None:\n        s = '(' + s + expression_infixe(e.gauche)\n    s = s + str(e.valeur)\n    if e.droit is not None:\n        s = s + expression_infixe(e.droit) + ')'\n    return s\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-22","title":"\u25b6 Sujet 22","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-221","title":"Exercice 22.1","text":"<p>Exercice 22.1</p> \u00c9nonc\u00e9Correction <p>On rappelle que :</p> <ul> <li>le nombre \\(a^n\\) est le nombre \\(a \\times a \\times a \\times \\dots \\times a\\), o\u00f9 le facteur \\(a\\) appara\u00eet \\(n\\) fois,</li> <li>en langage Python, l\u2019instruction <code>t[-1]</code> permet d\u2019acc\u00e9der au dernier \u00e9l\u00e9ment du tableau <code>t</code>.</li> </ul> <p>Dans cet exercice, l\u2019op\u00e9rateur <code>**</code>  et la fonction <code>pow</code> ne sont pas autoris\u00e9s.</p> <p>Programmer en langage Python une fonction <code>liste_puissances</code> qui prend en argument un nombre entier <code>a</code>, un entier strictement positif <code>n</code> et qui renvoie la liste de ses puissances \\(\\rm{[a^1, a^2, ..., a^n]}\\).</p> <p>Programmer \u00e9galement une fonction <code>liste_puisssances_borne</code> qui prend en argument un nombre entier <code>a</code> sup\u00e9rieur ou \u00e9gal \u00e0 2 et un entier <code>borne</code>, et qui renvoie la liste de ses puissances, \u00e0 l\u2019exclusion de \\(\\rm{a^0}\\), strictement inf\u00e9rieures \u00e0 <code>borne</code>.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; liste_puissances(3, 5)\n[3, 9, 27, 81, 243]\n&gt;&gt;&gt; liste_puissances(-2, 4)\n[-2, 4, -8, 16]\n&gt;&gt;&gt; liste_puissances_borne(2, 16)\n[2, 4, 8]\n&gt;&gt;&gt; liste_puissances_borne(2, 17)\n[2, 4, 8, 16]\n&gt;&gt;&gt; liste_puissances_borne(5, 5)\n[]\n</code></pre> <pre><code>def liste_puissances(a,n):\n    puissances = [a]\n    for i in range(n-1):\n        puissances.append(puissances[-1] * a)\n    return puissances\n\ndef liste_puissances_borne(a, borne):\n    lst = []\n    val = a\n    while val &lt; borne:\n        lst.append(val)\n        val = val * a\n    return lst\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-222","title":"Exercice 22.2","text":"<p>Exercice 22.2</p> \u00c9nonc\u00e9Correction <p>On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous :</p> A B C D E F G H I J K L M 1 2 3 4 5 6 7 8 9 10 11 12 13 N O P Q R S T U V W X Y Z 14 15 16 17 18 19 20 21 22 23 24 25 26 <p>Pour un mot donn\u00e9, on d\u00e9termine d\u2019une part son code alphab\u00e9tique concat\u00e9n\u00e9, obtenu par la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, son code additionn\u00e9, qui est la somme des codes de chacun de ses caract\u00e8res.</p> <p>Par ailleurs, on dit que ce mot est \u00ab parfait \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.</p> <p>Exemples :</p> <ul> <li> <p>Pour le mot <code>\"PAUL\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1612112'</code>, soit l\u2019entier 1 612 112. Son code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50. 50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot <code>\"PAUL\"</code> n\u2019est pas parfait.</p> </li> <li> <p>Pour le mot <code>\"ALAIN\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1121914'</code>, soit l\u2019entier 1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37. 37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot <code>\"ALAIN\"</code> est parfait.</p> </li> </ul> <p>Compl\u00e9ter la fonction <code>est_parfait</code> ci-dessous qui prend comme argument une cha\u00eene de caract\u00e8res <code>mot</code> (en lettres majuscules) et qui renvoie le code alphab\u00e9tique concat\u00e9n\u00e9, le code additionn\u00e9 de <code>mot</code>, ainsi qu\u2019un bool\u00e9en qui indique si <code>mot</code> est parfait ou pas.</p> <pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\n\ndef est_parfait(mot):\n    # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_concatene = \"\"\n    code_additionne = ...\n    for c in mot:\n        code_concatene = code_concatene + ...\n        code_additionne = ...\n    code_concatene = int(code_concatene)\n    if ... :\n        mot_est_parfait = True\n    else:\n        mot_est_parfait = False\n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre> <p>Exemples : <pre><code>&gt;&gt;&gt; est_parfait(\"PAUL\")\n(50, 1612112, False)\n&gt;&gt;&gt; est_parfait(\"ALAIN\")\n(37, 1121914, True)\n</code></pre></p> <pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\n\ndef est_parfait(mot):\n    # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_concatene = \"\"\n    code_additionne = 0\n    for c in mot:\n        code_concatene = code_concatene + str(dico[c])\n        code_additionne = code_additionne + dico[c]\n    code_concatene = int(code_concatene)\n    if code_concatene % code_additionne == 0:\n        mot_est_parfait = True\n    else:\n        mot_est_parfait = False\n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-23","title":"\u25b6 Sujet 23","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-231","title":"Exercice 23.1","text":"<p>Exercice 23.1</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re des tables (des tableaux de dictionnaires) qui contiennent des enregistrements relatifs \u00e0 des animaux h\u00e9berg\u00e9s dans un refuge. Les attributs des enregistrements sont <code>'nom'</code>, <code>'espece'</code>, <code>'age'</code>, <code>'enclos'</code>. Voici un exemple d'une telle table :</p> <pre><code>animaux = [ {'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2},\n            {'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n            {'nom':'Tom', 'espece':'chat', 'age':7, 'enclos':4},\n            {'nom':'Belle', 'espece':'chien', 'age':6, 'enclos':3},\n            {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n</code></pre> <p>Programmer une fonction <code>selection_enclos</code> qui :</p> <ul> <li>prend en param\u00e8tres :<ul> <li>une table <code>table_animaux</code> contenant des enregistrements relatifs \u00e0 des animaux (comme dans l'exemple ci-dessus),</li> <li>un num\u00e9ro d'enclos <code>num_enclos</code> ;</li> </ul> </li> <li>renvoie une table contenant les enregistrements de <code>table_animaux</code> dont l'attribut <code>'enclos'</code> est <code>num_enclos</code>.</li> </ul> <p>Exemples avec la table <code>animaux</code> ci-dessus :</p> <pre><code>&gt;&gt;&gt; selection_enclos(animaux, 5)\n[{'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 2)\n[{'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 7)\n[]\n</code></pre> <pre><code>def selection_enclos(table_animaux, num_enclos):\n    table = []\n    for animal in table_animaux:\n        if animal['enclos'] == num_enclos:\n            table.append(animal)\n    return table\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-232","title":"Exercice 23.2","text":"<p>Exercice 23.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re des tableaux de nombres dont tous les \u00e9l\u00e9ments sont pr\u00e9sents exactement trois fois \u00e0 la suite, sauf un \u00e9l\u00e9ment qui est pr\u00e9sent une unique fois et que l'on appelle \u00ab l'intrus \u00bb. Voici quelques exemples :</p> <p><pre><code>tab_a = [3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n#l'intrus est 7\n\ntab_b = [8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3]\n#l'intrus est 8\n\ntab_c = [5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8]\n#l'intrus est 3\n</code></pre> On remarque qu'avec de tels tableaux :</p> <ul> <li>pour les indices multiples de 3 situ\u00e9s strictement avant l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite sont \u00e9gaux,</li> <li>pour les indices multiples de 3 situ\u00e9s apr\u00e8s l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite - s'il existe - sont diff\u00e9rents.</li> </ul> <p>Ce que l'on peut observer ci-dessous en observant les valeurs des paires de voisins marqu\u00e9es par des caract\u00e8res ^ :</p> <pre><code>[3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^\n 0        3        6        9        12       15       18       21\n</code></pre> <p>Dans des listes comme celles ci-dessus, un algorithme r\u00e9cursif pour trouver l'intrus consiste alors \u00e0 choisir un indice <code>i</code> multiple de 3 situ\u00e9 approximativement au milieu des indices parmi lesquels se trouve l'intrus. </p> <p>Puis, en fonction des valeurs de l'\u00e9l\u00e9ment d'indice <code>i</code> et de son voisin de droite, \u00e0 appliquer r\u00e9cursivement l'algorithme \u00e0 la moiti\u00e9 droite ou \u00e0 la moiti\u00e9 gauche des indices parmi lesquels se trouve l'intrus. </p> <p>Par exemple, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 12, on voit les valeurs 2 et 4 qui sont diff\u00e9rentes : l\u2019intrus est donc \u00e0 gauche de l\u2019indice 12 (indice 12 compris)</p> <p>En revanche, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 3, on voit les valeurs 9 et 9 qui sont identiques : l\u2019intrus est donc \u00e0 droite des indices 3-4-5, donc \u00e0 partir de l\u2019indice 6.</p> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>trouver_intrus</code> propos\u00e9e page suivante qui met en \u0153uvre cet algorithme.</p> <pre><code>def trouver_intrus(tab, g, d):\n    '''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return ...\n\n    else:\n        nombre_de_triplets = (d - g) // ...\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if ... :\n            return ...\n        else:\n            return ...\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; trouver_intrus([3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8,\n8, 5, 5, 5], 0, 21)\n7\n\n&gt;&gt;&gt; trouver_intrus([8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3], 0, 12)\n8\n\n&gt;&gt;&gt; trouver_intrus([5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8], 0, 15)\n3\n</code></pre> <pre><code>def trouver_intrus(tab, g, d):\n    '''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return tab[g]\n\n    else:\n        nombre_de_triplets = (d - g) // 3\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if tab[indice] != tab[indice + 1] :\n            return trouver_intrus(tab, g, indice)\n        else:\n            return trouver_intrus(tab, indice + 3, d)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-24","title":"\u25b6 Sujet 24","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-241","title":"Exercice 24.1","text":"<p>Exercice 24.1</p> \u00c9nonc\u00e9Correction <p>Le nombre d\u2019occurrences d\u2019un caract\u00e8re dans une cha\u00eene de caract\u00e8re est le nombre d\u2019apparitions de ce caract\u00e8re dans la cha\u00eene.</p> <p>Exemples :</p> <ul> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018o\u2019 dans \u2018bonjour\u2019 est 2 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018b\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018B\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018 \u2018 dans \u2018Hello world !\u2019 est 2.</li> </ul> <p>On cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et les valeurs l\u2019occurrence de ces caract\u00e8res.</p> <p>Par exemple : avec la phrase 'Hello world !' le dictionnaire est le suivant :</p> <p><code>{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}</code></p> <p>L\u2019ordre des clefs n\u2019a pas d\u2019importance.</p> <p>\u00c9crire une fonction <code>nbr_occurrences</code> prenant comme param\u00e8tre une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoyant le dictionnaire des nombres d\u2019occurrences des caract\u00e8res de cette cha\u00eene.</p> <pre><code>def nbr_occurrences(chaine):\n    nb_occ = {}\n    for caractere in chaine:\n        if caractere in nb_occ:\n            nb_occ[caractere] += 1\n        else:\n            nb_occ[caractere] = 1\n    return nb_occ\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-242","title":"Exercice 24.2","text":"<p>Exercice 24.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>fusion</code> prend deux listes <code>lst1</code>, <code>lst2</code> d\u2019entiers tri\u00e9es par ordre croissant et les fusionne en une liste tri\u00e9e <code>lst12</code> qu\u2019elle renvoie.</p> <p>Le code Python de la fonction <code>fusion</code> est</p> <pre><code>def fusion(lst1,lst2):\n    n1 = len(lst1)\n    n2 = len(lst2)\n    lst12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ... :\n        if lst1[i1] &lt; lst2[i2]:\n            lst12[i] = ...\n            i1 = ...\n        else:\n            lst12[i] = lst2[i2]\n            i2 = ...\n        i += 1\n    while i1 &lt; n1:\n        lst12[i] = ...\n        i1 = i1 + 1\n        i = ...\n    while i2 &lt; n2:\n        lst12[i] = ...\n        i2 = i2 + 1\n        i = ...\n    return lst12\n</code></pre> <p>Compl\u00e9ter le code.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; fusion([1, 6, 10],[0, 7, 8, 9])\n[0, 1, 6, 7, 8, 9, 10]\n</code></pre> <pre><code>def fusion(lst1, lst2):\n    n1 = len(lst1)\n    n2 = len(lst2)\n    lst12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and i2 &lt; n2 :\n        if lst1[i1] &lt; lst2[i2]:\n            lst12[i] = lst1[i1]\n            i1 = i1 + 1\n        else:\n            lst12[i] = lst2[i2]\n            i2 = i2 + 1\n        i += 1\n    while i1 &lt; n1:\n        lst12[i] = lst1[i1]\n        i1 = i1 + 1\n        i = i + 1\n    while i2 &lt; n2:\n        lst12[i] = lst2[i2]\n        i2 = i2 + 1\n        i = i + 1\n    return lst12\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-25","title":"\u25b6 Sujet 25","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-251","title":"Exercice 25.1","text":"<p>Exercice 25.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>enumere</code> qui prend en param\u00e8tre une liste <code>L</code> et renvoie un dictionnaire <code>d</code> dont les cl\u00e9s sont les \u00e9l\u00e9ments de <code>L</code> avec pour valeur associ\u00e9e la liste des indices de l\u2019\u00e9l\u00e9ment dans la liste <code>L</code>.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; enumere([1, 1, 2, 3, 2, 1])\n{1: [0, 1, 5], 2: [2, 4], 3: [3]}\n</code></pre> <pre><code>def enumere(L):\n    d = {}\n    for i in range(len(L)):\n        if L[i] in d:\n            d[L[i]].append(i)\n        else:\n            d[L[i]] = [i]\n    return d\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-252","title":"Exercice 25.2","text":"<p>Exercice 25.2</p> \u00c9nonc\u00e9Correction <p>Un arbre binaire est impl\u00e9ment\u00e9 par la classe <code>Arbre</code> donn\u00e9e ci-dessous. Les attributs <code>fg</code> et <code>fd</code> prennent pour valeurs des instances de la classe <code>Arbre</code> ou <code>None</code>.</p> <pre><code>class Arbre:\n    def __init__(self, etiquette):\n        self.v = etiquette\n        self.fg = None\n        self.fd = None\n\ndef parcours(arbre, liste):\n    if arbre != None:\n        parcours(arbre.fg, liste)\n        liste.append(arbre.v)\n        parcours(arbre.fd, liste)\n    return liste\n</code></pre> <p>La fonction r\u00e9cursive <code>parcours</code> renvoie la liste des \u00e9tiquettes des n\u0153uds de l\u2019arbre impl\u00e9ment\u00e9 par l\u2019instance <code>arbre</code> dans l\u2019ordre du parcours en profondeur infixe \u00e0 partir d\u2019une liste vide pass\u00e9e en argument.</p> <p>Compl\u00e9ter le code de la fonction <code>insere</code> qui ins\u00e8re un n\u0153ud d\u2019\u00e9tiquette <code>cle</code> en feuille de l\u2019arbre impl\u00e9ment\u00e9 par l\u2019instance <code>arbre</code> selon la sp\u00e9cification indiqu\u00e9e et de fa\u00e7on que l\u2019arbre ainsi compl\u00e9t\u00e9 soit encore un arbre binaire de recherche.</p> <p>Tester ensuite ce code en utilisant la fonction <code>parcours</code> et en ins\u00e9rant successivement des n\u0153uds d\u2019\u00e9tiquette 1, 4, 6 et 8 dans l\u2019arbre binaire de recherche repr\u00e9sent\u00e9 ci- dessous :</p> <p></p> <pre><code>def insere(arbre, cle):\n    \"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente\n        un arbre binaire de recherche.\n    \"\"\"\n    if ...:\n        if ...:\n            insere(arbre.fg, cle)\n        else:\n            arbre.fg = Arbre(cle)\n    else:\n        if ...:\n            insere(arbre.fd, cle)\n        else:\n            arbre.fd = Arbre(cle)\n</code></pre> <pre><code>def insere(arbre, cle):\n\"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente\n    un arbre binaire de recherche.\n\"\"\"\n    if cle &lt; arbre.v:\n        if arbre.fg is not None:\n            insere(arbre.fg, cle)\n        else:\n            arbre.fg = Arbre(cle)\n    else:\n        if arbre.fd is not None:\n            insere(arbre.fd, cle)\n        else:\n            arbre.fd = Arbre(cle)\n</code></pre> <p>Tests :</p> <pre><code>&gt;&gt;&gt; a = Arbre(5)\n&gt;&gt;&gt; insere(a, 2)\n&gt;&gt;&gt; insere(a, 7)\n&gt;&gt;&gt; insere(a, 3)\n&gt;&gt;&gt; parcours(a, [])\n[2, 3, 5, 7]\n&gt;&gt;&gt; insere(a, 1)\n&gt;&gt;&gt; insere(a, 4)\n&gt;&gt;&gt; insere(a, 6)\n&gt;&gt;&gt; insere(a, 8)\n&gt;&gt;&gt; parcours(a, [])\n[1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-26","title":"\u25b6 Sujet 26","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-261","title":"Exercice 26.1","text":"<p>Exercice 26.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres.</p> <p>Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <pre><code>&gt;&gt;&gt; multiplication(3, 5)\n15\n&gt;&gt;&gt; multiplication(-4, -8)\n32\n&gt;&gt;&gt; multiplication(-2, 6)\n-12\n&gt;&gt;&gt; multiplication(-2, 0)\n0\n</code></pre> <pre><code>def multiplication(n1, n2):\n    # on se ram\u00e8ne d'abord au cas o\u00f9 n1 et n2 sont tous les deux positifs :\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-262","title":"Exercice 26.2","text":"<p>Exercice 26.2</p> \u00c9nonc\u00e9Correction <p>Recopier et compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. On ne recopiera pas les commentaires.</p> <pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples : <pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\nFalse\n</code></pre></p> <pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-27","title":"\u25b6 Sujet 27","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-271","title":"Exercice 27.1","text":"<p>Exercice 27.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche_min</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9 <code>tab</code>, et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; recherche_min([5])\n0\n&gt;&gt;&gt; recherche_min([2, 4, 1])\n2\n&gt;&gt;&gt; recherche_min([5, 3, 2, 2, 4])\n2\n</code></pre></p> <pre><code>def recherche_min(tab):\n    indice_min = 0\n    for i in range(len(tab)):\n        if tab[i] &lt; tab[indice_min]:\n            indice_min = i\n    return indice_min\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-272","title":"Exercice 27.2","text":"<p>Exercice 27.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la fonction <code>separe</code> ci-dessous qui prend en argument un tableau <code>tab</code> dont les \u00e9l\u00e9ments sont des <code>0</code> et des <code>1</code> et qui s\u00e9pare les <code>0</code> des <code>1</code> en pla\u00e7ant les <code>0</code> en d\u00e9but de tableau et les <code>1</code> \u00e0 la suite.</p> <pre><code>def separe(tab):\n    gauche = 0\n    droite = ...\n    while gauche &lt; droite :\n        if tab[gauche] == 0 :\n            gauche = ...\n        else :\n            tab[gauche], tab[droite] = ...\n            droite = ...\n    return tab\n</code></pre> <p>Compl\u00e9ter la fonction <code>separe</code> ci-dessus.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; separe([1, 0, 1, 0, 1, 0, 1, 0])\n[0, 0, 0, 0, 1, 1, 1, 1]\n&gt;&gt;&gt; separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0])\n[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre> <p>Description d\u2019\u00e9tapes effectu\u00e9es par la fonction separe sur le tableau ci-dessous : <code>tab = [1, 0, 1, 0, 1, 0, 1, 0]</code></p> <ul> <li> <p>Etape 1 : on regarde la premi\u00e8re case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec la derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus la derni\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 2 : on regarde \u00e0 nouveau la premi\u00e8re case, qui contient maintenant un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la premi\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 3 : on regarde la seconde case, qui contient un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la seconde case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 4 : on regarde la troisi\u00e8me case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec l\u2019avant-derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus l\u2019avant-derni\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> </ul> <p>Et ainsi de suite...</p> <p><code>tab = [0, 0, 0, 0, 1, 1, 1, 1]</code></p> <p>Compl\u00e9ter la fonction <code>separe</code> pr\u00e9sent\u00e9e \u00e0 la page pr\u00e9c\u00e9dente</p> <pre><code>def separe(tab):\n    gauche = 0\n    droite = len(tab) - 1\n    while gauche &lt; droite :\n        if tab[gauche] == 0 :\n            gauche = gauche + 1\n        else :\n            tab[gauche], tab[droite] = tab[droite], tab[gauche]\n            droite = droite - 1\n    return tab\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-28","title":"\u25b6 Sujet 28","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-281","title":"Exercice 28.1","text":"<p>Exercice 28.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction qui prend en param\u00e8tre un tableau d'entiers non vide et qui renvoie la moyenne de ces entiers. La fonction est sp\u00e9cifi\u00e9e ci-apr\u00e8s et doit passer les assertions fournies. <pre><code>def moyenne (tab):\n    '''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n\nassert moyenne([1]) == 1\nassert moyenne([1, 2, 3, 4, 5, 6, 7]) == 4\nassert moyenne([1, 2]) == 1.5\n</code></pre></p> <pre><code>def moyenne(tab):\n    '''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n    somme = 0\n    for elt in tab:\n        somme += elt\n    return somme / len(tab)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-282","title":"Exercice 28.2","text":"<p>Exercice 28.2</p> \u00c9nonc\u00e9Correction <p>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente dans un tableau de valeurs tri\u00e9es dans l'ordre croissant.</p> <p>L'algorithme traite le cas du tableau vide et il est \u00e9crit pour que la recherche dichotomique ne se fasse que dans le cas o\u00f9 la valeur est comprise entre les valeurs extr\u00eames du tableau.</p> <p>On distingue les trois cas qui renvoient <code>False</code> en renvoyant <code>False, 1</code> , <code>False, 2</code> et <code>False, 3</code>.</p> <p>Compl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s.</p> <pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if ...:\n        return False, 1\n\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or ...:\n        return False, 2\n\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\n(False, 3)\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],1)\n(False, 2)\n&gt;&gt;&gt; dichotomie([],28)\n(False, 1)\n</code></pre> <pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if tab == []:\n        return False, 1\n\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or (x &gt; tab[-1]):\n        return False, 2\n\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False, 3\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-29","title":"\u25b6 Sujet 29","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-291","title":"Exercice 29.1","text":"<p>Exercice 29.1</p> \u00c9nonc\u00e9Correction <p>Un arbre binaire est impl\u00e9ment\u00e9 par la classe <code>Arbre</code> donn\u00e9e ci-dessous. Les attributs <code>fg</code> et <code>fd</code> prennent pour valeurs des instances de la classe <code>Arbre</code> ou <code>None</code>.</p> <pre><code>class Arbre:\n    def __init__(self, etiquette):\n        self.v = etiquette\n        self.fg = None\n        self.fd = None\n</code></pre> <p></p> <p>L\u2019arbre ci-dessus sera donc impl\u00e9ment\u00e9 de la mani\u00e8re suivante : <pre><code>a = Arbre(1)\na.fg = Arbre(4)\na.fd = Arbre(0)\na.fd.fd = Arbre(7)\n</code></pre></p> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tre une instance <code>a</code> de la classe <code>Arbre</code> et qui renvoie la taille de l\u2019arbre que cette instance impl\u00e9mente.</p> <p>\u00c9crire de m\u00eame une fonction r\u00e9cursive <code>hauteur</code> prenant en param\u00e8tre une instance <code>a</code> de la classe <code>Arbre</code> et qui renvoie la hauteur de l\u2019arbre que cette instance impl\u00e9mente.</p> <p>Si un arbre a un seul n\u0153ud, sa taille et sa hauteur sont \u00e9gales \u00e0 1. S\u2019il est vide, sa taille et sa hauteur sont \u00e9gales \u00e0 0.</p> <p>Tester les deux fonctions sur l\u2019arbre repr\u00e9sent\u00e9 ci-dessous :</p> <p></p> <pre><code>def taille(a):\n    if a is None:\n        return 0\n    else:\n        return 1 + taille(a.fg) + taille(a.fd)\n\ndef hauteur(a):\n    if a is None:\n        return 0\n    else:\n        return 1 + max(hauteur(a.fg), hauteur(a.fd))\n</code></pre> <p>Tests :</p> <pre><code>a = Arbre(0)\na.fg = Arbre(1)\na.fd = Arbre(2)\na.fg.fg = Arbre(3)\na.fd.fg = Arbre(4)\na.fd.fd = Arbre(5)\na.fd.fg.fd = Arbre(6)\n</code></pre> <pre><code>&gt;&gt;&gt; taille(a)\n7\n&gt;&gt;&gt; hauteur(a)\n4\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-292","title":"Exercice 29.2","text":"<p>Exercice 29.2</p> \u00c9nonc\u00e9Correction <p>La m\u00e9thode <code>insert</code> de la classe <code>list</code> permet d\u2019ins\u00e9rer un \u00e9l\u00e9ment dans une liste \u00e0 un <code>indice</code> donn\u00e9.</p> <p>Le but de cet exercice est, sans utiliser cette m\u00e9thode, d\u2019\u00e9crire une fonction <code>ajoute</code> r\u00e9alisant cette insertion en produisant une nouvelle liste.</p> <p>Cette fonction <code>ajoute</code> prend en param\u00e8tres trois variables <code>indice</code>, <code>element</code> et <code>liste</code> et renvoie une liste <code>L</code> dans laquelle les \u00e9l\u00e9ments sont ceux de la liste <code>liste</code> avec, en plus, l\u2019\u00e9l\u00e9ment <code>element</code> \u00e0 l\u2019indice <code>indice</code>. On consid\u00e8re que les variables <code>indice</code> et <code>element</code> sont des entiers positifs et que les \u00e9l\u00e9ments de <code>liste</code> sont \u00e9galement des entiers positifs. Les \u00e9l\u00e9ments de la liste <code>liste</code>, dont les indices sont sup\u00e9rieurs ou \u00e9gaux \u00e0 <code>indice</code> apparaissent d\u00e9cal\u00e9s vers la droite dans la liste <code>L</code>. Si <code>indice</code> est sup\u00e9rieur ou \u00e9gal au nombre d\u2019\u00e9l\u00e9ments de la liste <code>liste</code>, l\u2019\u00e9l\u00e9ment element est ajout\u00e9 dans <code>L</code> apr\u00e8s tous les \u00e9l\u00e9ments de la liste <code>liste</code>.</p> <p>Exemple : <pre><code>&gt;&gt;&gt; ajoute(1, 4, [7, 8, 9])\n[7, 4, 8, 9]\n&gt;&gt;&gt; ajoute(3, 4, [7, 8, 9])\n[7, 8, 9, 4]\n&gt;&gt;&gt; ajoute(4, 4, [7, 8, 9])\n[7, 8, 9, 4]\n</code></pre></p> <p>Compl\u00e9ter et tester le code ci-dessous :</p> <pre><code>def ajoute(indice, element, liste):\n    nbre_elts = len(liste)\n    L = [0 for i in range(nbre_elts + 1)]\n    if ...:\n        for i in range(indice):\n            L[i] = ...\n        L[...] = ...\n        for i in range(indice + 1, nbre_elts + 1):\n            L[i] = ...\n    else:\n        for i in range(nbre_elts):\n            L[i] = ...\n        L[...] = ...\n    return L\n</code></pre> <pre><code>def ajoute(indice, element, liste):\n    nbre_elts = len(liste)\n    L = [0 for i in range(nbre_elts + 1)]\n    if indice &lt; nbre_elts:\n        for i in range(indice):\n            L[i] = liste[i]\n        L[indice] = element\n        for i in range(indice + 1, nbre_elts + 1):\n            L[i] = liste[i-1]\n    else:\n        for i in range(nbre_elts):\n            L[i] = liste[i]\n        L[nbre_elts] = element \n    return L\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-30","title":"\u25b6 Sujet 30","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-301","title":"Exercice 30.1","text":"<p>Exercice 30.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>moyenne</code> qui prend en param\u00e8tre un tableau non vide de nombres flottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; moyenne([1.0])\n1.0\n&gt;&gt;&gt; moyenne([1.0, 2.0, 4.0])\n2.3333333333333335\n</code></pre></p> <pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-302","title":"Exercice 30.2","text":"<p>Exercice 30.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la fonction <code>binaire</code> ci-dessous qui prend en param\u00e8tre un entier positif <code>a</code> en \u00e9criture d\u00e9cimale et qui renvoie son \u00e9criture binaire sous la forme d'une chaine de caract\u00e8res.</p> <p>L\u2019algorithme utilise la m\u00e9thode des divisions euclidiennes successives comme l\u2019illustre l\u2019exemple ci-apr\u00e8s.</p> <p></p> <p><pre><code>def binaire(a):\n    bin_a = ...\n    a = a // 2\n    while a ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter le code de la fonction <code>binaire</code>.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; binaire(83)\n'1010011'\n&gt;&gt;&gt; binaire(127)\n'1111111'\n&gt;&gt;&gt; binaire(0)\n'0'\n</code></pre></p> <pre><code>def binaire(a):\n    bin_a = str(a%2)\n    a = a // 2\n    while a != 0 :\n        bin_a = str(a%2) + bin_a\n        a = a // 2\n    return bin_a\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-31","title":"\u25b6 Sujet 31","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-311","title":"Exercice 31.1","text":"<p>Exercice 31.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction Python appel\u00e9e <code>nb_repetitions</code> qui prend en param\u00e8tres un \u00e9l\u00e9ment <code>elt</code> et une liste <code>tab</code> et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans la liste.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; nb_repetitions(5, [2, 5, 3, 5, 6, 9, 5])\n3\n&gt;&gt;&gt; nb_repetitions('A', ['B', 'A', 'B', 'A', 'R'])\n2\n&gt;&gt;&gt; nb_repetitions(12, [1, '!', 7, 21, 36, 44])\n0\n</code></pre></p> <pre><code>def nb_repetitions(elt, tab):\n    nb = 0\n    for element in tab:\n        if element == elt:\n            nb += 1\n    return nb\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-312","title":"Exercice 31.2","text":"<p>Exercice 31.2</p> \u00c9nonc\u00e9Correction <p>Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide des divisions successives comme illustr\u00e9 ici :</p> <p></p> <p>Voici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de convertir un nombre entier positif en binaire :</p> <p><pre><code>def binaire(a):\n    bin_a = str(...)\n    a = a // 2\n    while a ... :\n        bin_a = ...(a%2) + ...\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter la fonction <code>binaire</code>.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; binaire(0)\n'0'\n&gt;&gt;&gt; binaire(77)\n'1001101'\n</code></pre> <pre><code>def binaire(a):\n    bin_a = str(a%2)\n    a = a // 2\n    while a != 0 :\n        bin_a = str(a%2) + bin_a\n        a = a // 2\n    return bin_a\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-32","title":"\u25b6 Sujet 32","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-321","title":"Exercice 32.1","text":"<p>Exercice 32.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>min_et_max</code> qui prend en param\u00e8tre un tableau de nombres <code>tab</code> non vide, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s <code>min</code> et <code>max</code>.</p> <p>Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>L\u2019utilisation des fonctions natives <code>min</code>, <code>max</code> et <code>sorted</code>, ainsi que la m\u00e9thode <code>sort</code> n\u2019est pas autoris\u00e9e.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; min_et_max([0, 1, 4, 2, -2, 9, 3, 1, 7, 1])\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; min_et_max([0, 1, 2, 3])\n{'min': 0, 'max': 3}\n&gt;&gt;&gt; min_et_max([3])\n{'min': 3, 'max': 3}\n&gt;&gt;&gt; min_et_max([1, 3, 2, 1, 3])\n{'min': 1, 'max': 3}\n&gt;&gt;&gt; min_et_max([-1, -1, -1, -1, -1])\n{'min': -1, 'max': -1}\n</code></pre> <pre><code>def min_et_max(tab):\n    d = {}\n    d['min'] = tab[0]\n    d['max'] = tab[0]\n    for val in tab:\n        if val &lt; d['min']:\n            d['min'] = val\n        if val &gt; d['max']:\n            d['max'] = val\n    return d\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-322","title":"Exercice 32.2","text":"<p>Exercice 32.2</p> \u00c9nonc\u00e9Correction <p>On dispose d\u2019une classe <code>Carte</code> permettant de cr\u00e9er des objets mod\u00e9lisant des cartes \u00e0 jouer.</p> <p>Compl\u00e9ter la classe <code>Paquet_de_cartes</code> suivante en respectant les sp\u00e9cifications donn\u00e9es dans les cha\u00eenes de documentation.</p> <p>Ajouter une assertion dans la m\u00e9thode <code>get_carte</code> afin de v\u00e9rifier que le param\u00e8tre <code>pos</code> est correct.</p> <pre><code>class Carte:\n    def __init__(self, c, v):\n        \"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def get_valeur(self):\n        \"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def get_couleur(self):\n        \"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n        \"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\n        # A compl\u00e9ter\n\n    def get_carte(self, pos):\n        \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\n        # A compl\u00e9ter\n</code></pre> <p>Exemple :</p> <pre><code>Exemple :\n&gt;&gt;&gt; jeu = Paquet_de_cartes()\n&gt;&gt;&gt; carte1 = jeu.get_carte(20)\n&gt;&gt;&gt; print(carte1.get_valeur() + \" de \" + carte1.get_couleur())\n8 de coeur\n&gt;&gt;&gt; carte2 = jeu.get_carte(0)\n&gt;&gt;&gt; print(carte2.get_valeur() + \" de \" + carte2.get_couleur())\nAs de pique\n&gt;&gt;&gt; carte3 = jeu.get_carte(52)\nAssertionError : param\u00e8tre pos invalide\n</code></pre> <pre><code>class Carte:\n    def __init__(self, c, v):\n        \"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def get_valeur(self):\n        \"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def get_couleur(self):\n        \"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n        \"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\n        self.contenu = [Carte(c, v) for c in range(1, 5) for v in range(1, 14)]  \n\n    def get_carte(self, pos):\n        \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\n        assert 0 &lt;= pos &lt;= 51,  'param\u00e8tre pos invalide'\n        return self.contenu[pos]\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-33","title":"\u25b6 Sujet 33","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-331","title":"Exercice 33.1","text":"<p>Exercice 33.1</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un dictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour chaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud.</p> <p>Par exemple, l\u2019arbre</p> <p></p> <p>est stock\u00e9 dans</p> <pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], \\\n'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], \\\n'H':['','']}\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tres un arbre binaire <code>arbre</code> sous la forme d\u2019un dictionnaire et un caract\u00e8re <code>lettre</code> qui est la valeur du sommet de l\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153uds.  </p> <p>On observe que, par exemple, <code>arbre[lettre][0]</code>, respectivement <code>arbre[lettre][1]</code>, permet d\u2019atteindre la cl\u00e9 du sous-arbre gauche, respectivement droit, de l\u2019arbre <code>arbre</code> de sommet <code>lettre</code>.</p> <p>Exemple : <pre><code>&gt;&gt;&gt; taille(a, \u2019F\u2019)\n9\n</code></pre></p> <pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], 'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], 'H':['','']}\n\ndef taille(arbre, lettre):\n    fils_gauche = arbre[lettre][0]\n    fils_droit = arbre[lettre][1]\n\n    if fils_gauche != '' and fils_droit != '':\n        return 1 + taille(arbre, fils_gauche) + taille(arbre, fils_droit)\n\n    if fils_gauche != '' and fils_droit == '':\n        return 1 + taille(arbre, fils_gauche)\n\n    if fils_gauche == '' and fils_droit != '':\n        return 1 + taille(arbre, fils_droit)\n\n    else:\n        return 1\n</code></pre> <p>ou plus simplement :</p> <pre><code>def taille(arbre, lettre):\n    if lettre == '':\n        return 0\n    return 1 + taille(arbre, arbre[lettre][0]) + taille(arbre, arbre[lettre][1])\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-332","title":"Exercice 33.2","text":"<p>Exercice 33.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt le sous- tableau des \u00e9l\u00e9ments non rang\u00e9s et on place le plus petit \u00e9l\u00e9ment en premi\u00e8re position de ce sous-tableau.</p> <p>Exemple avec le tableau : <code>t = [41, 55, 21, 18, 12, 6, 25]</code> </p> <ul> <li> <p>\u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus petit \u00e9l\u00e9ment avec le premier. Le tableau devient <code>t = [6, 55, 21, 18, 12, 41, 25]</code></p> </li> <li> <p>\u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments sauf le premier, on permute le plus petit \u00e9l\u00e9ment trouv\u00e9 avec le second. Le tableau devient : <code>t = [6, 12, 21, 18, 55, 41, 25]</code> </p> </li> </ul> <p>Et ainsi de suite. </p> <p>La code de la fonction <code>tri_selection</code> qui impl\u00e9mente cet algorithme est donn\u00e9 ci- dessous.</p> <pre><code>def tri_selection(tab):\n    N = len(tab)\n    for k in range(...):\n        imin = ...\n        for i in range(... , N):\n            if tab[i] &lt; ... :\n                imin = i\n        ... , tab[imin] = tab[imin] , ...\n</code></pre> <p>Compl\u00e9ter le code de cette fonction de fa\u00e7on \u00e0 obtenir :</p> <pre><code>&gt;&gt;&gt; liste = [41, 55, 21, 18, 12, 6, 25]\n&gt;&gt;&gt; tri_selection(liste)\n&gt;&gt;&gt; liste\n[6, 12, 18, 21, 25, 41, 55]\n</code></pre> <p>On rappelle que l'instruction <code>a, b = b, a</code> \u00e9change les contenus de <code>a</code> et de <code>b</code>.</p> <pre><code>def tri_selection(tab):\n    N = len(tab)\n    for k in range(N):\n        imin = k\n        for i in range(k+1, N):\n            if tab[i] &lt; tab[imin] :\n                imin = i\n        tab[k] , tab[imin] = tab[imin] , tab[k]\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-34","title":"\u25b6 Sujet 34","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-341","title":"Exercice 34.1","text":"<p>Exercice 34.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>moyenne</code>   prenant en param\u00e8tre un tableau d'entiers <code>tab</code> (de type <code>list</code>) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide. Proposer une fa\u00e7on de traiter le cas o\u00f9 le tableau pass\u00e9 en param\u00e8tre est vide.</p> <p>Dans cet exercice, on s\u2019interdira d\u2019utiliser la fonction Python <code>sum</code>.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; moyenne([5,3,8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1,2,3,4,5,6,7,8,9,10])\n5.5\n&gt;&gt;&gt; moyenne([])\n# Comportement diff\u00e9rent suivant le traitement propos\u00e9.\n</code></pre></p> <pre><code>def moyenne(tab):\n    if tab == []:\n        print('Le tableau donn\u00e9 est vide')\n        return None\n    else:\n        somme = 0\n        for elt in tab:\n            somme += elt\n        return somme / len(tab)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-342","title":"Exercice 34.2","text":"<p>Exercice 34.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re un tableau d'entiers <code>tab</code> (de type <code>list</code>) dont les \u00e9l\u00e9ments sont des <code>0</code> ou des <code>1</code>). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri, le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des <code>0</code>, la seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des <code>1</code>.</p> <p> Zone de 0Zone non tri\u00e9eZone de 1 </p> <p>Tant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier \u00e9l\u00e9ment :</p> <ul> <li>si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant que des 0 ;</li> <li>si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on consid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1.</li> </ul> <p>Dans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1.</p> <p>Recopier sous Python en la compl\u00e9tant la fonction <code>tri</code> suivante :</p> <pre><code>def tri(tab):\n    # i est le premier indice de la zone non tri\u00e9e,\n    # j est le dernier indice de cette zone non tri\u00e9e.\n    # Au d\u00e9but, la zone non tri\u00e9e est le tableau complet.\n    i = ...\n    j = ...\n    while i != j:\n        if tab[i]== 0:\n            i = ...\n        else:\n            valeur = tab[j]\n            tab[j] = ...\n            ...\n            j = ...\n    ...\n</code></pre> <p>Exemple : <pre><code>&gt;&gt;&gt; tri([0,1,0,1,0,1,0,1,0])\n[0, 0, 0, 0, 0, 1, 1, 1, 1]       \n</code></pre></p> <pre><code>def tri(tab):\n    # i est le premier indice de la zone non tri\u00e9e,\n    # j est le dernier indice de cette zone non tri\u00e9e.\n    # Au d\u00e9but, la zone non tri\u00e9e est le tableau complet.\n    i = 0\n    j = len(tab) - 1\n    while i != j :\n        if tab[i] == 0:\n            i = i + 1\n        else :\n            valeur = tab[j]\n            tab[j] = tab[i]\n            tab[i] = valeur\n            j = j - 1\n    return tab\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-35","title":"\u25b6 Sujet 35","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-351","title":"Exercice 35.1","text":"<p>Exercice 35.1</p> \u00c9nonc\u00e9Correction <p>L'op\u00e9rateur \u00ab ou exclusif \u00bb entre deux bits renvoie 0 si les deux bits sont \u00e9gaux et 1 s'ils sont diff\u00e9rents. Il est symbolis\u00e9 par le caract\u00e8re \u2295. Ainsi :</p> <ul> <li>0 \u2295 0 = 0</li> <li>0 \u2295 1 = 1</li> <li>1 \u2295 0 = 1</li> <li>1 \u2295 1 = 0  </li> </ul> <p>On repr\u00e9sente ici une suite de bits par un tableau contenant des 0 et des 1.</p> <p>Exemples :</p> <pre><code>a = [1, 0, 1, 0, 1, 1, 0, 1]\nb = [0, 1, 1, 1, 0, 1, 0, 0]\nc = [1, 1, 0, 1]\nd = [0, 0, 1, 1]\n</code></pre> <p>\u00c9crire la fonction <code>ou_exclusif</code> qui prend en param\u00e8tres deux tableaux de m\u00eame longueur et qui renvoie un tableau o\u00f9 l\u2019\u00e9l\u00e9ment situ\u00e9 \u00e0 position <code>i</code> est le r\u00e9sultat, par l\u2019op\u00e9rateur \u00ab ou exclusif \u00bb, des \u00e9l\u00e9ments \u00e0 la position <code>i</code> des tableaux pass\u00e9s en param\u00e8tres.</p> <p>En consid\u00e9rant les quatre exemples ci-dessus, cette fonction donne :</p> <pre><code>&gt;&gt;&gt; ou_exclusif(a, b)\n[1, 1, 0, 1, 1, 0, 0, 1]\n&gt;&gt;&gt; ou_exclusif(c, d)\n[1, 1, 1, 0]\n</code></pre> <pre><code>def ou_exclusif(tab1, tab2):\n    resultat = []\n    taille = len(tab1)\n    for i in range(taille):\n        resultat.append(tab1[i] ^ tab2[i])\n    return resultat\n</code></pre> <p>Si on ne connait pas la fonction native ^ qui fait le \u00abou exclusif\u00bb de deux entiers en Python, on peut la recoder :</p> <pre><code>def ou_exc(a, b):\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 1:\n        return 1\n    if a == 1 and b == 0:\n        return 1\n    if a == 1 and b == 1:\n        return 0\n</code></pre> <p>Le code devient alors :</p> <pre><code>def ou_exclusif(tab1, tab2):\n    resultat = []\n    taille = len(tab1)\n    for i in range(taille):\n        resultat.append(ou_exc(tab1[i],tab2[i]))\n    return resultat\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-352","title":"Exercice 35.2","text":"<p>Exercice 35.2</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, on appelle carr\u00e9 d\u2019ordre \\(n\\) un tableau de \\(n\\) lignes et \\(n\\) colonnes dont chaque case contient un entier naturel.</p> <p>Exemples : </p> <p>Un carr\u00e9 est dit semimagique lorsque les sommes des \u00e9l\u00e9ments situ\u00e9s sur chaque ligne, chaque colonne sont \u00e9gales.</p> <ul> <li> <p>Ainsi c2 et c3 sont semimagiques car la somme de chaque ligne, chaque colonne et chaque diagonale est \u00e9gale \u00e0 8 pour c2 et 12 pour c3.</p> </li> <li> <p>Le carre c3bis n'est pas semimagique car la somme de la premi\u00e8re ligne est \u00e9gale \u00e0 15 alors que celle de la deuxi\u00e8me ligne est \u00e9gale \u00e0 10.</p> </li> </ul> <p>La classe <code>Carre</code> ci-apr\u00e8s contient des m\u00e9thodes qui permettent de manipuler des carr\u00e9s.</p> <ul> <li> <p>La m\u00e9thode constructeur cr\u00e9e un carr\u00e9 sous forme d\u2019un tableau \u00e0 deux dimensions \u00e0 partir d\u2019une liste d\u2019entiers, et d\u2019un ordre.</p> </li> <li> <p>La m\u00e9thode <code>affiche</code> permet d\u2019afficher le carr\u00e9 cr\u00e9\u00e9.</p> </li> </ul> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; liste = (3, 4, 5, 4, 4, 4, 5, 4, 3)\n&gt;&gt;&gt; c3 = Carre(liste, 3)\n&gt;&gt;&gt; c3.affiche()\n[3, 4, 5]\n[4, 4, 4]\n[5, 4, 3]\n</code></pre> <p>Compl\u00e9ter la m\u00e9thode <code>est_semimagique</code> qui renvoie <code>True</code> si le carr\u00e9 est semimagique, <code>False</code> sinon. Puis tester la fonction <code>est_semimagique</code> sur les carr\u00e9s c2, c3 et c3bis.</p> <pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n        '''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n        '''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n        '''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\n        for i in range(...):\n            if ... != s:\n                return ...\n\n        #test de la somme de chaque colonne\n        for j in range(...):\n            if ... != s:\n                return ...\n\n        return ...\n</code></pre> <p>Listes permettant de g\u00e9n\u00e9rer les carr\u00e9s c2, c3 et c3bis :</p> <pre><code>lst_c2 = [1, 7, 7, 1]\nlst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\nlst_c3bis = [2, 9, 4, 7, 0, 3, 6, 1, 8]\n</code></pre> <pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n        '''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n        '''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n        '''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\n        for i in range(self.ordre):\n            if self.somme_ligne(i) != s:\n                return False\n\n        #test de la somme de chaque colonne\n        for j in range(self.ordre):\n            if self.somme_col(j) != s:\n                return False\n\n        return True\n</code></pre> <p>Tests avec :</p> <pre><code>lst_c2 = [1, 7, 7, 1]\nlst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\nlst_c3bis = [2, 9, 4, 7, 0, 3, 6, 1, 8]\n</code></pre> <pre><code>&gt;&gt;&gt; c2 = Carre(lst_c2, 2)\n&gt;&gt;&gt; c2.est_semimagique()\nTrue\n\n&gt;&gt;&gt; c3 = Carre(lst_c3, 3)\n&gt;&gt;&gt; c3.est_semimagique()\nTrue\n\n&gt;&gt;&gt; c3bis = Carre(lst_c3bis, 2)\n&gt;&gt;&gt; c3bis.est_semimagique()\nFalse\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-36","title":"\u25b6 Sujet 36","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-361","title":"Exercice 36.1","text":"<p>Exercice 36.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>couples_consecutifs</code> qui prend en param\u00e8tre une liste de nombres entiers <code>tab</code> non vide, et qui renvoie la liste (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans <code>tab</code>.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; couples_consecutifs([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; couples_consecutifs([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; couples_consecutifs([1, 1, 2, 4])\n[(1, 2)]\n&gt;&gt;&gt; couples_consecutifs([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; couples_consecutifs([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n</code></pre></p> <pre><code>def couples_consecutifs(tab):\n    solution = []\n    for i in range(len(tab)-1):\n        if tab[i] + 1 == tab[i+1]:\n            solution.append((tab[i], tab[i+1]))\n    return solution\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-362","title":"Exercice 36.2","text":"<p>Exercice 36.2</p> \u00c9nonc\u00e9Correction <p>Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments <code>M[i][j]</code>, appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 <code>0</code> soit \u00e0 <code>1</code>.</p> <p>Une composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de <code>1</code> et de <code>0</code> qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement.</p> <p>Par exemple, les composantes de  sont </p> <p>On souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 <code>1</code> dans une image <code>M</code>, donner la valeur <code>val</code> \u00e0 tous les pixels de la composante \u00e0 laquelle appartient ce pixel.</p> <p>La fonction <code>propager</code> prend pour param\u00e8tre une image <code>M</code> (repr\u00e9sent\u00e9e par une liste de listes), deux entiers <code>i</code> et <code>j</code> et unevaleur enti\u00e8re <code>val</code>. Elle met \u00e0 la valeur <code>val</code> tous les pixels de la composante du pixel <code>M[i][j]</code> s\u2019il vaut <code>1</code> et ne fait rien s\u2019il vaut <code>0</code>.</p> <p>Par exemple, <code>propager(M, 2, 1, 3)</code> donne </p> <p>Compl\u00e9ter le code r\u00e9cursif de la fonction <code>propager</code> donn\u00e9 ci-dessous :</p> <pre><code>def propager(M, i, j, val):\n    if M[i][j] == ...:\n        M[i][j] = val\n\n    # l'element en haut fait partie de la composante\n    if i-1 &gt;= 0 and M[i-1][j] == ...:\n        propager(M, i-1, j, val)\n\n    # l'element en bas fait partie de la composante\n    if ... &lt; len(M) and M[i+1][j] == 1:\n        propager(M, ..., j, val)\n\n    # l'element \u00e0 gauche fait partie de la composante\n    if ... and M[i][j-1] == 1:\n        propager(M, ..., ..., val)\n\n    # l'element \u00e0 droite fait partie de la composante\n    if ... and ...:\n        propager(..., ..., ..., ...)\n</code></pre> <p>Exemple : <pre><code>&gt;&gt;&gt; M = [[0, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 0], [0, 1, 1, 0]]\n&gt;&gt;&gt; propager(M, 2, 1, 3)\n&gt;&gt;&gt; M\n[[0, 0, 1, 0], [0, 3, 0, 1], [3, 3, 3, 0], [0, 3, 3, 0]]\n</code></pre></p> <pre><code>def propager(M, i, j, val):\n    if M[i][j] == 1:\n        M[i][j] = val\n\n    # l'element en haut fait partie de la composante\n    if i-1 &gt;= 0 and M[i-1][j] == 1:\n        propager(M, i-1, j, val)\n\n    # l'element en bas fait partie de la composante\n    if i+1 &lt; len(M) and M[i+1][j] == 1:\n        propager(M, i+1, j, val)\n\n    # l'element \u00e0 gauche fait partie de la composante\n    if j-1 &gt;= 0 and M[i][j-1] == 1:\n        propager(M, i, j-1, val)\n\n    # l'element \u00e0 droite fait partie de la composante\n    if j+1 &lt; len(M[i]) and M[i][j+1] == 1:\n        propager(M, i, j+1, val)\n</code></pre> <p> ce code va d\u00e9clencher la propagation m\u00eame si la cellule <code>i,j</code> n'est pas \u00e0 1. C'est sans doute une erreur d'\u00e9nonc\u00e9. Il faudrait plut\u00f4t \u00e9crire ceci :</p> <pre><code>def propager(M, i, j, val):\n    if M[i][j] == 1:\n        M[i][j] = val\n\n        # l'element en haut fait partie de la composante\n        if i-1 &gt;= 0 and M[i-1][j] == 1:\n            propager(M, i-1, j, val)\n\n        # l'element en bas fait partie de la composante\n        if i+1 &lt; len(M) and M[i+1][j] == 1:\n            propager(M, i+1, j, val)\n\n        # l'element \u00e0 gauche fait partie de la composante\n        if j-1 &gt;= 0 and M[i][j-1] == 1:\n            propager(M, i, j-1, val)\n\n        # l'element \u00e0 droite fait partie de la composante\n        if j+1 &lt; len(M[i]) and M[i][j+1] == 1:\n            propager(M, i, j+1, val)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-37","title":"\u25b6 Sujet 37","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-371","title":"Exercice 37.1","text":"<p>Exercice 37.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la derni\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(1, [1, 0, 42, 7])\n0\n&gt;&gt;&gt; recherche(1, [1, 50, 1])\n2\n&gt;&gt;&gt; recherche(1, [8, 1, 10, 1, 7, 1, 8])\n5\n</code></pre></p> <pre><code>def recherche(elt, tab):\n    for i in range(len(tab)-1, -1, -1):\n        if tab[i] == elt:\n            return i\n    return -1\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-372","title":"Exercice 37.2","text":"<p>Exercice 37.2</p> \u00c9nonc\u00e9Correction <p>On d\u00e9finit une classe g\u00e9rant une adresse IPv4.</p> <p>On rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale \u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec une plage d\u2019adresses IP de <code>192.168.0.0</code> \u00e0 <code>192.168.0.255</code>.</p> <p>On consid\u00e8re que les adresses IP saisies sont valides.</p> <p>Les adresses IP <code>192.168.0.0</code> et <code>192.168.0.255</code> sont des adresses r\u00e9serv\u00e9es.</p> <p>Le code ci-dessous impl\u00e9mente la classe <code>AdresseIP</code>.</p> <p><pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = ...\n\n    def liste_octet(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        return ... or ...\n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\n        if ... &lt; 254:\n            octet_nouveau = ... + ...\n            return AdresseIP('192.168.0.' + ...)\n        else:\n            return False\n</code></pre> Compl\u00e9ter le code ci-dessus et instancier trois objets : <code>adresse1</code>, <code>adresse2</code>, <code>adresse3</code> avec respectivement les arguments suivants :</p> <p><code>'192.168.0.1'</code>, <code>'192.168.0.2'</code>, <code>'192.168.0.0'</code></p> <p>V\u00e9rifier que :  <pre><code>&gt;&gt;&gt; adresse1.est_reservee()\nFalse\n&gt;&gt;&gt; adresse3.est_reservee()\nTrue\n&gt;&gt;&gt; adresse2.adresse_suivante().adresse\n'192.168.0.3'\n</code></pre></p> <pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = adresse\n\n    def liste_octet(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        return self.liste_octet()[3] == 0 or self.liste_octet()[3] == 255\n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\n        if self.liste_octet()[3] &lt; 254:\n            octet_nouveau = self.liste_octet()[3] + 1\n            return AdresseIP('192.168.0.' + str(octet_nouveau))\n        else:\n            return False\n\nadresse1 = AdresseIP('192.168.0.1')\nadresse2 = AdresseIP('192.168.0.2')\nadresse3 = AdresseIP('192.168.0.0')\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-38","title":"\u25b6 Sujet 38","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-381","title":"Exercice 38.1","text":"<p>Exercice 38.1</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re des mots \u00e0 trous : ce sont des cha\u00eenes de caract\u00e8res contenant uniquement des majuscules et des caract\u00e8res <code>*</code>. Par exemple <code>INFO*MA*IQUE</code>, <code>***I***E**</code> et <code>*S*</code> sont des mots \u00e0 trous.  </p> <p>Programmer une fonction <code>correspond</code> qui :</p> <ul> <li>prend en param\u00e8tres deux cha\u00eenes de caract\u00e8res <code>mot</code> et <code>mot_a_trous</code> o\u00f9 <code>mot_a_trous</code> est un mot \u00e0 trous comme indiqu\u00e9 ci-dessus, </li> <li>renvoie :<ul> <li><code>True</code> si on peut obtenir <code>mot</code> en rempla\u00e7ant convenablement les caract\u00e8res <code>'*'</code> de <code>mot_a_trous</code>.</li> <li><code>False</code> sinon.</li> </ul> </li> </ul> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; correspond('INFORMATIQUE', 'INFO*MA*IQUE')\nTrue\n&gt;&gt;&gt; correspond('AUTOMATIQUE', 'INFO*MA*IQUE')\nFalse\n&gt;&gt;&gt; correspond('STOP', 'S*')\nFalse\n&gt;&gt;&gt; correspond('AUTO', '*UT*')\nTrue\n</code></pre> <pre><code>def correspond(mot, mot_a_trous):\n    if len(mot) != len(mot_a_trous):\n        return False\n    for i in range(len(mot)):\n        if mot[i] != mot_a_trous[i] and mot_a_trous[i] != '*':\n            return False\n    return True\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-382","title":"Exercice 38.2","text":"<p>Exercice 38.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re au plus 26 personnes A, B, C, D, E, F ... qui peuvent s'envoyer des messages avec deux r\u00e8gles \u00e0 respecter :</p> <ul> <li>chaque personne ne peut envoyer des messages qu'\u00e0 une seule personne (\u00e9ventuellement elle-m\u00eame),</li> <li>chaque personne ne peut recevoir des messages qu'en provenance d'une seule personne (\u00e9ventuellement elle-m\u00eame).</li> </ul> <p>Voici un exemple - avec 6 personnes - de \u00ab plan d'envoi des messages \u00bb qui respecte les r\u00e8gles ci-dessus, puisque chaque personne est pr\u00e9sente une seule fois dans chaque colonne :</p> <ul> <li>A envoie ses messages \u00e0 E</li> <li>E envoie ses messages \u00e0 B</li> <li>B envoie ses messages \u00e0 F</li> <li>F envoie ses messages \u00e0 A</li> <li>C envoie ses messages \u00e0 D</li> <li>D envoie ses messages \u00e0 C</li> </ul> <p>Et le dictionnaire correspondant \u00e0 ce plan d'envoi est le suivant :</p> <p><code>plan_a = {'A':'E', 'B':'F', 'C':'D', 'D':'C', 'E':'B', 'F':'A'}</code></p> <p>Un cycle est une suite de personnes dans laquelle la derni\u00e8re est la m\u00eame que la premi\u00e8re.</p> <p>Sur le plan d'envoi <code>plan_a</code> des messages ci-dessus, il y a deux cycles distincts : un premier cycle avec A, E, B, F et un second cycle avec C et D.</p> <p>En revanche, le plan d\u2019envoi <code>plan_b</code> ci-dessous :</p> <p><code>plan_b = {'A':'C', 'B':'F', 'C':'E', 'D':'A', 'E':'B', 'F':'D'}</code></p> <p>comporte un unique cycle : A, C, E, B, F, D. Dans ce cas, lorsqu\u2019un plan d\u2019envoi comporte un unique cycle, on dit que le plan d\u2019envoi est cyclique.</p> <p>Pour savoir si un plan d'envoi de messages comportant N personnes est cyclique, on peut utiliser l'algorithme ci-dessous :</p> <ul> <li>on part d\u2019un exp\u00e9diteur (ici A) et on inspecte son destinataire dans le plan d'envoi,</li> <li>chaque destinataire devient \u00e0 son tour exp\u00e9diteur, selon le plan d\u2019envoi, tant qu\u2019on ne \u00ab retombe \u00bb pas sur l\u2019exp\u00e9diteur initial,</li> <li>le plan d\u2019envoi est cyclique si on l\u2019a parcouru en entier.</li> </ul> <p>Compl\u00e9ter la fonction <code>est_cyclique</code> en respectant la sp\u00e9cification.</p> <p>Remarque : la fonction python <code>len</code> permet d'obtenir la longueur d'un dictionnaire.</p> <pre><code>def est_cyclique(plan):\n    '''\n    Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et False sinon.\n    '''\n    expediteur = 'A'\n    destinataire = plan[ ... ]\n    nb_destinaires = 1\n\n    while destinataire != ...:\n        destinataire = plan[ ... ]\n        nb_destinaires += ...\n\n    return nb_destinaires == ...\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'})\nFalse\n&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'})\nFalse\n</code></pre> <pre><code>def est_cyclique(plan):\n    '''\n    Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et False sinon.\n    '''\n    expediteur = 'A'\n    destinataire = plan[expediteur]\n    nb_destinaires = 1\n\n    while destinataire != expediteur:\n        destinataire = plan[destinataire]\n        nb_destinaires += 1\n\n    return nb_destinaires == len(plan)\n\n#tests\nprint(est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'}))\nprint(est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'}))\nprint(est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'}))\nprint(est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'}))\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-39","title":"\u25b6 Sujet 39","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-391","title":"Exercice 39.1","text":"<p>Exercice 39.1</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par :</p> <ul> <li>les deux premiers termes sont \u00e9gaux \u00e0 1,</li> <li>ensuite, chaque terme est obtenu en faisant la somme des deux termes qui le pr\u00e9c\u00e8dent.</li> </ul> <p>En math\u00e9matiques, on le formule ainsi :</p> <p>\\(U_1 = 1\\), \\(U_2 = 1\\) et, pour tout entier naturel non nul \\(n\\), par \\(U_{n+2} = U_{n+1} + U_n\\).</p> <p>Cette suite est connue sous le nom de suite de Fibonacci. \u00c9crire en Python une fonction <code>fibonacci</code> qui prend en param\u00e8tre un entier <code>n</code> suppos\u00e9 strictement positif et qui renvoie le terme d\u2019indice <code>n</code> de cette suite.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n&gt;&gt;&gt; fibonacci(45)\n1134903170\n</code></pre> <p>Version r\u00e9cursive :</p> <pre><code>def fibonacci(n):\n    if n == 1 :\n        return 1   \n    elif n == 1 :\n        return 1\n    else :\n        return fibonacci(n-1) + fibonacci(n-2)\n</code></pre> <p>Version imp\u00e9rative : <pre><code>def fibonacci(n):\n    a = 1\n    b = 1\n    for k in range(n-2):\n        t = b\n        b = a + b\n        a = t\n    return b\n</code></pre></p> <p>Version programmation dynamique :</p> <pre><code>def fibonacci(n):\n    d = {}\n    d[1] = 1\n    d[2] = 1\n    for k in range(3, n+1):\n        d[k] = d[k-1] + d[k-2]\n    return d[n]\n</code></pre> <p>On peut constater que la version r\u00e9cursive \u00e9choue \u00e0 calculer <code>fibonacci(45)</code>, alors que les deux autres versions le font quasi-imm\u00e9diatement. </p>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-392","title":"Exercice 39.2","text":"<p>Exercice 39.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la fonction <code>pantheon</code> prenant en param\u00e8tres <code>eleves</code> et <code>notes</code> deux tableaux de m\u00eame longueur, le premier contenant le nom des \u00e9l\u00e8ves et le second, des entiers positifs d\u00e9signant leur note \u00e0 un contr\u00f4le de sorte que <code>eleves[i]</code> a obtenu la note <code>notes[i]</code>. Cette fonction renvoie le couple constitu\u00e9 de la note maximale attribu\u00e9e et des noms des \u00e9l\u00e8ves ayant obtenu cette note regroup\u00e9s dans un tableau. Ainsi, l\u2019instruction <code>pantheon(['a', 'b', 'c', 'd'], [15, 18, 12, 18])</code> renvoie le couple <code>(18, ['b', 'd'])</code>.</p> <pre><code>def pantheon(eleves, notes):\n    note_maxi = 0\n    meilleurs_eleves =  ...\n\n    for i in range(...) :\n        if notes[i] == ... :\n            meilleurs_eleves.append(...)\n        elif notes[i] &gt; note_maxi:\n            note_maxi = ...\n            meilleurs_eleves = [...]\n\n    return (note_maxi,meilleurs_eleves)\n</code></pre> <p>Compl\u00e9ter ce code.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; eleves_nsi = ['a','b','c','d','e','f','g','h','i','j']\n&gt;&gt;&gt; notes_nsi = [30, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n&gt;&gt;&gt; pantheon(eleves_nsi, notes_nsi)\n(80, ['c', 'f', 'h'])\n&gt;&gt;&gt; pantheon([],[])\n(0, [])\n</code></pre> <pre><code>def pantheon(eleves, notes):\n    note_maxi = 0\n    meilleurs_eleves =  []\n\n    for i in range(len(eleves)) :\n        if notes[i] == note_maxi :\n            meilleurs_eleves.append(eleves[i])\n        elif notes[i] &gt; note_maxi:\n            note_maxi = notes[i]\n            meilleurs_eleves = [eleves[i]]\n\n    return (note_maxi, meilleurs_eleves)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-40","title":"\u25b6 Sujet 40","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-401","title":"Exercice 40.1","text":"<p>Exercice 40.1</p> \u00c9nonc\u00e9Correction <p>Pour cet exercice :</p> <ul> <li> <p>On appelle \u00ab mot \u00bb une cha\u00eene de caract\u00e8res compos\u00e9e avec des caract\u00e8res choisis parmi les 26 lettres minuscules ou majuscules de l'alphabet,</p> </li> <li> <p>On appelle \u00ab phrase \u00bb une cha\u00eene de caract\u00e8res :</p> <ul> <li>compos\u00e9e avec un ou plusieurs \u00ab mots \u00bb s\u00e9par\u00e9s entre eux par un seul caract\u00e8re espace <code>' '</code>,</li> <li>se finissant :<ul> <li>soit par un point <code>'.'</code> qui est alors coll\u00e9 au dernier mot,</li> <li>soit par un point d'exclamation <code>'!'</code> ou d'interrogation <code>'?'</code> qui est alors s\u00e9par\u00e9 du dernier mot par un seul caract\u00e8re espace <code>' '</code>.</li> </ul> </li> </ul> </li> </ul> <p>Exemples :</p> <ul> <li>'Cet exercice est simple.'</li> <li>'Le point d exclamation est separe !'</li> </ul> <p>Apr\u00e8s avoir remarqu\u00e9 le lien entre le nombre de mots et le nombres de caract\u00e8res espace dans une phrase, programmer une fonction <code>nombre_de_mots</code> qui prend en param\u00e8tre une phrase et renvoie le nombre de mots pr\u00e9sents dans cette phrase.</p> <pre><code>&gt;&gt;&gt; nombre_de_mots('Le point d exclamation est separe !')\n6\n&gt;&gt;&gt; nombre_de_mots('Il y a un seul espace entre les mots !')\n9\n&gt;&gt;&gt; nombre_de_mots('Combien de mots y a t il dans cette phrase ?')\n10\n&gt;&gt;&gt; nombre_de_mots('Fin.')\n1\n</code></pre> <pre><code>def nombre_de_mots(phrase):\n    nb_mots = 0\n    for caractere in phrase:\n        if caractere == ' ' or caractere == '.':\n            nb_mots += 1\n    return nb_mots\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-402","title":"Exercice 40.2","text":"<p>Exercice 40.2</p> \u00c9nonc\u00e9Correction <p>La classe ABR ci-dessous permet d'impl\u00e9menter une structure d'arbre binaire de recherche.</p> <pre><code>class Noeud:\n    def __init__(self, valeur):\n        '''M\u00e9thode constructeur pour la classe Noeud.\n        Param\u00e8tre d'entr\u00e9e : valeur (str)'''\n        self.valeur = valeur\n        self.gauche = None\n        self.droit = None\n\n    def getValeur(self):\n        '''M\u00e9thode accesseur pour obtenir la valeur du noeud\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return self.valeur\n\n    def droitExiste(self):\n        '''M\u00e9thode renvoyant True si l'enfant droit existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.droit is not None)\n\n    def gaucheExiste(self):\n        '''M\u00e9thode renvoyant True si l'enfant gauche existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.gauche is not None)\n\n    def inserer(self, cle):\n        '''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche\n        Param\u00e8tre d'entr\u00e9e : cle (int)'''\n        if cle &lt; ...:\n            # on ins\u00e8re \u00e0 gauche\n            if self.gaucheExiste():\n                # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9\n                ...\n            else:\n                # on cr\u00e9e un fils gauche\n                self.gauche = ...\n        elif cle &gt; ... :\n            # on ins\u00e8re \u00e0 droite\n            if ... :\n                # on descend \u00e0 droite et on retente l'insertion de la cl\u00e9\n                ...\n            else:\n                # on cr\u00e9e un fils droit\n                ... = Noeud(cle)\n</code></pre> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>inserer</code> afin qu'elle permette d\u2019ins\u00e9rer un n\u0153ud dans l\u2019arbre binaire de recherche propos\u00e9, \u00e0 l\u2019aide de sa cl\u00e9.</p> <p>Voici un exemple d'utilisation :</p> <pre><code>&gt;&gt;&gt; arbre = Noeud(7)\n&gt;&gt;&gt; for cle in (3, 9, 1, 6):\n        arbre.inserer(cle)\n&gt;&gt;&gt; arbre.gauche.getValeur()\n3\n&gt;&gt;&gt; arbre.droit.getValeur()\n9\n&gt;&gt;&gt; arbre.gauche.gauche.getValeur()\n1\n&gt;&gt;&gt; arbre.gauche.droit.getValeur()\n6\n</code></pre> <pre><code>class Noeud:\n    def __init__(self, valeur):\n        '''M\u00e9thode constructeur pour la classe Noeud.\n        Param\u00e8tre d'entr\u00e9e : valeur (str)'''\n        self.valeur = valeur\n        self.gauche = None\n        self.droit = None\n\n    def getValeur(self):\n        '''M\u00e9thode accesseur pour obtenir la valeur du noeud\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return self.valeur\n\n    def droitExiste(self):\n        '''M\u00e9thode renvoyant True si l'enfant droit existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.droit is not None)\n\n    def gaucheExiste(self):\n        '''M\u00e9thode renvoyant True si l'enfant gauche existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.gauche is not None)\n\n    def inserer(self, cle):\n        '''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche\n        Param\u00e8tre d'entr\u00e9e : cle (int)'''\n        if cle &lt; self.valeur:\n            # on ins\u00e8re \u00e0 gauche\n            if self.gaucheExiste():\n                # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9\n                self.gauche.inserer(cle)\n            else:\n                # on cr\u00e9e un fils gauche\n                self.gauche = Noeud(cle)\n        elif cle &gt; self.valeur:\n            # on ins\u00e8re \u00e0 droite\n            if self.droitExiste():\n                # on descend \u00e0 droite et on retente l'insertion de la cl\u00e9\n                self.droit.inserer(cle)\n            else:\n                # on cr\u00e9e un fils droit\n                self.droit = Noeud(cle)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-41","title":"\u25b6 Sujet 41","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-411","title":"Exercice 41.1","text":"<p>Exercice 41.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche(caractere, chaine)</code> qui prend en param\u00e8tres <code>caractere</code>, un unique caract\u00e8re (c\u2019est-\u00e0-dire une cha\u00eene de caract\u00e8re de longueur 1), et <code>chaine</code>, une cha\u00eene de caract\u00e8res. Cette fonction renvoie le nombre d\u2019occurrences de <code>caractere</code> dans <code>chaine</code>, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 <code>caractere</code> appara\u00eet dans chaine.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i',\"mississippi\")\n4\n&gt;&gt;&gt; recherche('a',\"mississippi\")\n0\n</code></pre></p> <pre><code>def recherche(caractere, chaine):\n    somme = 0\n    for lettre in chaine:\n        if lettre == caractere:\n            somme += 1\n    return somme\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-412","title":"Exercice 41.2","text":"<p>Exercice 41.2</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets.</p> <p>Le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste <code>valeurs = [100, 50, 20, 10, 5, 2, 1]</code>. On suppose que les pi\u00e8ces et billets sont disponibles sans limitation.</p> <p>On cherche \u00e0 donner la liste des valeurs \u00e0 rendre pour une somme donn\u00e9e en argument. L\u2019algorithme utilis\u00e9 est de type glouton.</p> <p>Compl\u00e9ter le code Python ci-dessous de la fonction <code>rendu_glouton</code> qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.</p> <pre><code>valeurs = [100, 50, 20, 10, 5, 2, 1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\n        return ...\n    v = valeurs[rang]\n    if v &lt;= ... :\n        return ... + rendu_glouton(a_rendre - v, rang)\n    else :\n        return rendu_glouton(a_rendre, ...)\n</code></pre> <p>On devra obtenir :</p> <pre><code>&gt;&gt;&gt;rendu_glouton(67, 0)\n[50, 10, 5, 2]\n&gt;&gt;&gt;rendu_glouton(291, 0)\n[100, 100, 50, 20, 20, 1]\n&gt;&gt;&gt; rendu_glouton(291,1) # si on ne dispose pas de billets de 100\n[50, 50, 50, 50, 50, 20, 20, 1]\n</code></pre> <pre><code>valeurs = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\n        return []\n    v = valeurs[rang]\n    if v &lt;= a_rendre :\n        return [v] + rendu_glouton(a_rendre - v, rang)\n    else :\n        return rendu_glouton(a_rendre, rang + 1)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-42","title":"\u25b6 Sujet 42","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-421","title":"Exercice 42.1","text":"<p>Exercice 42.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>tri_selection</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et qui renvoie la liste tri\u00e9e par ordre croissant. Il est demand\u00e9 de ne pas cr\u00e9er de nouvelle liste mais de modifier celle fournie.</p> <p>On utilisera l\u2019algorithme suivant :</p> <ul> <li>on recherche le plus petit \u00e9l\u00e9ment de la liste, en la parcourant du rang 0 au dernier rang, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 0 ;</li> <li>on recherche ensuite le plus petit \u00e9l\u00e9ment de la liste restreinte du rang 1 au dernier rang, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 1 ;</li> <li>on continue de cette fa\u00e7on jusqu'\u00e0 ce que la liste soit enti\u00e8rement tri\u00e9e.</li> </ul> <p>Exemple : <pre><code>&gt;&gt;&gt; tri_selection([1, 52, 6, -9, 12])\n[-9, 1, 6, 12, 52]\n</code></pre></p> <pre><code>def tri_selection(tab):\n    for i in range(len(tab)-1):\n        indice_min = i\n        for j in range(i+1, len(tab)):\n            if tab[j] &lt; tab[indice_min]:\n                indice_min = j\n        tab[i], tab[indice_min] = tab[indice_min], tab[i]\n    return tab\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-422","title":"Exercice 42.2","text":"<p>Exercice 42.2</p> \u00c9nonc\u00e9Correction <p>Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99.</p> <p>Un \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante :</p> <ul> <li>le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ;</li> <li>si la proposition de l\u2019utilisateur est plus petite que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si la proposition de l\u2019utilisateur est plus grande que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si l\u2019utilisateur trouve le bon nombre en 10 essais ou moins, il gagne ;</li> <li>si l\u2019utilisateur a fait plus de 10 essais sans trouver le bon nombre, il perd.</li> </ul> <p>La fonction <code>randint</code> est utilis\u00e9e. Si a et b sont des entiers tels que <code>a &lt;= b</code>, <code>randint(a,b)</code> renvoie un nombre entier compris entre <code>a</code> et <code>b</code>.</p> <p>Compl\u00e9ter le code ci-dessous et le tester :</p> <pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</code></pre> <pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,99)\n    nb_test = int(input('Proposez un nombre entre 1 et 99 : '))\n    compteur = 1\n\n    while nb_mystere != nb_test and compteur &lt; 10 :\n        compteur = compteur + 1\n        if nb_mystere &gt; nb_test:\n            nb_test = int(input('Trop petit ! Testez encore : '))\n        else:\n            nb_test = int(input('Trop grand ! Testez encore : '))\n\n    if nb_mystere == nb_test:\n        print ('Bravo ! Le nombre \u00e9tait ', nb_mystere)\n        print('Nombre d essais: ', compteur)\n    else:\n        print ('Perdu ! Le nombre \u00e9tait ', nb_mystere)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-43","title":"\u25b6 Sujet 43","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-431","title":"Exercice 43.1","text":"<p>Exercice 43.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>ecriture_binaire_entier_positif</code> qui prend en param\u00e8tre un entier positif <code>n</code> et renvoie une liste d'entiers correspondant \u00e0 l\u2018\u00e9criture binaire de <code>n</code>.</p> <p>Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; ecriture_binaire_entier_positif(0)\n[0]\n&gt;&gt;&gt; ecriture_binaire_entier_positif(2)\n[1, 0]\n&gt;&gt;&gt; ecriture_binaire_entier_positif(105)\n[1, 1, 0, 1, 0, 0, 1]\n</code></pre> <p>Aide :</p> <ul> <li>l'op\u00e9rateur <code>//</code> donne le quotient de la division euclidienne : <code>5//2</code> donne <code>2</code> ;</li> <li>l'op\u00e9rateur <code>%</code> donne le reste de la division euclidienne :<code>5%2</code> donne <code>1</code> ;</li> <li><code>append</code> est une m\u00e9thode qui ajoute un \u00e9l\u00e9ment \u00e0 une liste existante : Soit <code>T=[5,2,4]</code>, alors <code>T.append(10)</code> ajoute <code>10</code> \u00e0 la liste <code>T</code>. Ainsi, <code>T</code> devient <code>[5,2,4,10]</code>.</li> <li><code>reverse</code> est une m\u00e9thode qui renverse les \u00e9l\u00e9ments d'une liste. Soit <code>T=[5,2,4,10]</code>. Apr\u00e8s <code>T.reverse()</code>, la liste devient <code>[10,4,2,5]</code>.</li> </ul> <p>On remarquera qu\u2019on r\u00e9cup\u00e8re la repr\u00e9sentation binaire d\u2019un entier <code>n</code> en partant de la gauche en appliquant successivement les instructions :</p> <p><code>b = n%2</code></p> <p><code>n = n//2</code></p> <p>r\u00e9p\u00e9t\u00e9es autant que n\u00e9cessaire.</p> <pre><code>def ecriture_binaire_entier_positif(n):\n    # cas particulier pour n = 0\n    if n == 0:\n        return [0]\n    # cas g\u00e9n\u00e9ral\n    b = []\n    while n != 0:\n        b.append(n % 2)\n        n = n // 2\n    b.reverse()\n    return b\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-432","title":"Exercice 43.2","text":"<p>Exercice 43.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>tri_bulles</code> prend en param\u00e8tre une liste <code>T</code> d\u2019entiers non tri\u00e9s et renvoie la liste tri\u00e9e par ordre croissant.</p> <p>Le tri \u00e0 bulles est un tri en place qui commence par placer le plus grand \u00e9l\u00e9ment en derni\u00e8re position en parcourant la liste de gauche \u00e0 droite et en \u00e9changeant au passage les \u00e9l\u00e9ments voisins mal ordonn\u00e9s (si la valeur de l\u2019\u00e9l\u00e9ment d\u2019indice <code>i</code> a une valeur strictement sup\u00e9rieure \u00e0 celle de l\u2019indice <code>i + 1</code>, ils sont \u00e9chang\u00e9s). Le tri place ensuite en avant-derni\u00e8re position le plus grand \u00e9l\u00e9ment de la liste priv\u00e9e de son dernier \u00e9l\u00e9ment en proc\u00e9dant encore \u00e0 des \u00e9changes d\u2019\u00e9l\u00e9ments voisins. Ce principe est r\u00e9p\u00e9t\u00e9 jusqu\u2019\u00e0 placer le minimum en premi\u00e8re position.</p> <p>Exemple : pour trier la liste <code>[7, 9, 4, 3]</code> :</p> <ul> <li>premi\u00e8re \u00e9tape : 7 et 9 ne sont pas \u00e9chang\u00e9s, puis 9 et 4 sont \u00e9chang\u00e9s, puis 9 et 3 sont \u00e9chang\u00e9s, la liste est alors <code>[7, 4, 3, 9]</code></li> <li>deuxi\u00e8me \u00e9tape : 7 et 4 sont \u00e9chang\u00e9s, puis 7 et 3 sont \u00e9chang\u00e9s, la liste est alors <code>[4, 3, 7, 9]</code></li> <li>troisi\u00e8me \u00e9tape : 4 et 3 sont \u00e9chang\u00e9s, la liste est alors <code>[3, 4, 7, 9]</code></li> </ul> <p>Compl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction tri_bulles.</p> <pre><code>def tri_bulles(T):\n    '''\n    Renvoie le tableau T tri\u00e9 par ordre croissant\n    '''\n    n = len(T)\n    for i in range(...,...,-1):\n        for j in range(i):\n            if T[j] &gt; T[...]:\n                ... = T[j]\n                T[j] = T[...]\n                T[j+1] = temp\n    return T\n</code></pre> <p>Exemples : <pre><code>&gt;&gt;&gt; tri_bulles([])\n[]\n&gt;&gt;&gt; tri_bulles([7])\n[7]\n&gt;&gt;&gt; tri_bulles([9, 3, 7, 2, 3, 1, 6])\n[1, 2, 3, 3, 6, 7, 9]\n&gt;&gt;&gt; tri_bulles([9, 7, 4, 3])\n[3, 4, 7, 9]\n</code></pre></p> <pre><code>def tri_bulles(T):\n    '''\n    Renvoie le tableau T tri\u00e9 par ordre croissant\n    '''\n    n = len(T)\n    for i in range(n-1,-1,-1):\n        for j in range(i):\n            if T[j] &gt; T[j+1]:\n                temp = T[j]\n                T[j] = T[j+1]\n                T[j+1] = temp\n    return T\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-44","title":"\u25b6 Sujet 44","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-441","title":"Exercice 44.1","text":"<p>Exercice 44.1</p> \u00c9nonc\u00e9Correction <p>Programmer une fonction <code>renverse</code>, prenant en param\u00e8tre une cha\u00eene de caract\u00e8res non vide <code>mot</code> et renvoie une cha\u00eene de caract\u00e8res en inversant ceux de la cha\u00eene <code>mot</code>.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; renverse(\"informatique\")\n\"euqitamrofni\"\n</code></pre> <pre><code>def renverse(mot):\n    sol = ''\n    for lettre in mot:\n        sol = lettre + sol\n    return sol\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-442","title":"Exercice 44.2","text":"<p>Exercice 44.2</p> \u00c9nonc\u00e9Correction <p>Un nombre premier est un nombre entier naturel qui admet exactement deux diviseurs distincts entiers et positifs : 1 et lui-m\u00eame. </p> <p>Le crible d\u2019\u00c9ratosth\u00e8ne permet de d\u00e9terminer les nombres premiers plus petit qu\u2019un certain nombre <code>n</code> fix\u00e9. </p> <p>On consid\u00e8re pour cela un tableau <code>tab</code> de <code>n</code>bool\u00e9ens, initialement tous \u00e9gaux \u00e0 <code>True</code>, sauf <code>tab[0]</code> et <code>tab[1]</code> qui valent <code>False</code>, 0 et 1 n\u2019\u00e9tant pas des nombres premiers.  </p> <p>On parcourt alors ce tableau de gauche \u00e0 droite.  </p> <p>Pour chaque indice <code>i</code> :</p> <ul> <li> <p>si <code>tab[i]</code> vaut <code>True</code> : le nombre <code>i</code> est premier et on donne la valeur <code>False</code> \u00e0 toutes les cases du tableau dont l\u2019indice est un multiple de <code>i</code>, \u00e0 partir de <code>2*i</code> (c\u2019est-\u00e0-dire <code>2*i</code>, <code>3*i</code> ...).</p> </li> <li> <p>si <code>tab[i]</code> vaut <code>False</code> : le nombre <code>i</code> n\u2019est pas premier et on n\u2019effectue aucun changement sur le tableau. </p> </li> </ul> <p>On dispose de la fonction <code>crible</code>, incompl\u00e8te et donn\u00e9e ci-dessous, prenant en param\u00e8tre un entier <code>n</code> strictement positif et renvoyant un tableau contenant tous les nombres premiers plus petits que <code>n</code>.</p> <pre><code>def crible(n):\n    \"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits que N\n    \"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\n    for i in range(..., n):\n        if tab[i] == ...:\n            premiers.append(...)\n            for multiple in range(2*i, n, ...):\n                tab[multiple] = ...\n    return premiers\n\nassert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</code></pre> <p>Compl\u00e9ter le code de cette fonction.</p> <pre><code>def crible(n):\n    \"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits que N\n    \"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\n    for i in range(2, n):\n        if tab[i] == True:\n            premiers.append(i)\n            for multiple in range(2*i, n, i):\n                tab[multiple] = False\n    return premiers\n\nassert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#sujet-45","title":"\u25b6 Sujet 45","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-451","title":"Exercice 45.1","text":"<p>Exercice 45.1</p> \u00c9nonc\u00e9Correction <p>On veut trier par ordre croissant les notes d\u2019une \u00e9valuation qui sont des nombres entiers compris entre 0 et 10 (inclus).</p> <p>Ces notes sont contenues dans une liste <code>notes_eval</code>.</p> <p>\u00c9crire une fonction <code>rangement_valeurs</code> prenant en param\u00e8tre la liste <code>notes_eval</code> et renvoyant une liste de longueur 11 telle que la valeur de cette liste \u00e0 chaque rang est \u00e9gale au nombre de notes valant ce rang. Ainsi le terme de rang 0 indique le nombre de note 0, le terme de rang 1 le nombre de note 1, etc.</p> <p>\u00c9crire ensuite une fonction <code>notes_triees</code> prenant en param\u00e8tre la liste des effectifs des notes et renvoyant une liste contenant la liste, tri\u00e9e dans l\u2019ordre croissant, des notes des \u00e9l\u00e8ves.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; notes_eval = [2, 0, 5, 9, 6, 9, 10, 5, 7, 9, 9, 5, 0, 9, 6, 5, 4]\n\n&gt;&gt;&gt; effectifs_notes = rangement_valeurs(notes_eval)\n&gt;&gt;&gt; effectifs_notes\n[2, 0, 1, 0, 1, 4, 2, 1, 0, 5, 1]\n\n&gt;&gt;&gt; notes_triees(effectifs_notes)\n[0, 0, 2, 4, 5, 5, 5, 5, 6, 6, 7, 9, 9, 9, 9, 9, 10]\n</code></pre> <pre><code>def rangement_valeurs(notes_eval):\n    lst = [0]*11\n    for note in notes_eval:\n        lst[note] += 1\n    return lst\n\ndef notes_triees(effectifs_notes):\n    triees = []\n    for i in range(11):\n        if effectifs_notes[i] != 0:\n            for _ in range(effectifs_notes[i]):\n                triees.append(i)\n    return triees\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2023/#exercice-452","title":"Exercice 45.2","text":"<p>Exercice 45.2</p> \u00c9nonc\u00e9Correction <p>L\u2019objectif de cet exercice est d\u2019\u00e9crire deux fonctions r\u00e9cursives <code>dec_to_bin</code> et <code>bin_to_dec</code> assurant respectivement la conversion de l\u2019\u00e9criture d\u00e9cimale d\u2019un nombre entier vers son \u00e9criture en binaire et, r\u00e9ciproquement, la conversion de l\u2019\u00e9criture en binaire d\u2019un nombre vers son \u00e9criture d\u00e9cimale.</p> <p>Dans cet exercice, on s\u2019interdit l\u2019usage des fonctions Python <code>bin</code> et <code>int</code>.</p> <p>On rappelle sur l\u2019exemple ci-dessous une fa\u00e7on d\u2019obtenir l\u2019\u00e9criture en binaire du nombre 25 :</p> <p>\\(25 = 1 + 2 \\times 12\\) \\(\\phantom{25} = 1 + 2 \\times 12\\) \\(\\phantom{25} = 1 + 2 (0 + 2 \\times 6)\\) \\(\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 \\times 3))\\) \\(\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 (1 + 2 \\times 1)))\\) \\(\\phantom{25} = 1 \\times 2^0 + 0 \\times 2^1 + 0 \\times 2^2 + 1 \\times 2^3 + 1 \\times 2^4\\) </p> <p>L'\u00e9criture binaire de 25 est donc <code>11001</code>.</p> <p>0n rappelle \u00e9galement que :</p> <ul> <li><code>a // 2</code> renvoie le quotient de la division euclidienne de <code>a</code> par 2.</li> <li><code>a % 2</code> renvoie le reste dans la division euclidienne de <code>a</code> par 2.</li> </ul> <p>On indique enfin qu\u2019en Python si <code>mot = \"informatique\"</code> alors :</p> <ul> <li><code>mot[-1]</code> renvoie <code>'e'</code>, c\u2019est-\u00e0-dire le dernier caract\u00e8re de la cha\u00eene de caract\u00e8res <code>mot</code>.</li> <li><code>mot[:-1]</code> renvoie <code>'informatiqu'</code> , c\u2019est-\u00e0-dire l\u2019ensemble de la cha\u00eene de caract\u00e8res <code>mot</code> priv\u00e9e de son dernier caract\u00e8re.</li> </ul> <p>Compl\u00e9ter, puis tester, les codes de deux fonctions ci-dessous.  On pr\u00e9cise que la fonction r\u00e9cursive <code>dec_to_bin</code> prend en param\u00e8tre un nombre entier et renvoie une cha\u00eene de caract\u00e8res contenant l\u2019\u00e9criture en binaire du nombre pass\u00e9 en param\u00e8tre.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; dec_to_bin(25)\n'11001'\n</code></pre> <p>La fonction r\u00e9cursive <code>bin_to_dec</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res repr\u00e9sentant l\u2019\u00e9criture d\u2019un nombre en binaire et renvoie l\u2019\u00e9criture d\u00e9cimale de ce nombre.</p> <pre><code>&gt;&gt;&gt; bin_to_dec('101010')\n42\n</code></pre> <pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\n    if q == ...:\n        return str(r)\n    else:\n        return dec_to_bin(...) + ...\n\ndef bin_to_dec(nb_bin):\n    if nb_bin == '0':\n        return 0\n    elif ...:\n        return 1\n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\n            bit_droit = ...\n        return ... * bin_to_dec(nb_bin[:-1]) + ...\n</code></pre> <pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\n    if q == 0:\n        return str(r)\n    else:\n        return dec_to_bin(q) + str(r)\n\ndef bin_to_dec(nb_bin):\n    if nb_bin == '0':\n        return 0\n    elif nb_bin == '1':\n        return 1\n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\n            bit_droit = 1\n        return 2 * bin_to_dec(nb_bin[:-1]) + bit_droit\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/","title":"\u00c9preuve Pratique BNS 2024","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-01","title":"\u25b6 Sujet 01","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-011","title":"Exercice 01.1","text":"<p>Exercice 01.1</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un dictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour chaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud.</p> <p>On utilise la valeur <code>''</code> pour repr\u00e9senter un fils vide.</p> <p>Par exemple, l\u2019arbre</p> <p></p> <p>est stock\u00e9 dans</p> <pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], \\\n'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], \\\n'H':['','']}\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tres un arbre binaire <code>arbre</code> non vide sous la forme d\u2019un dictionnaire et un caract\u00e8re <code>lettre</code> qui est la valeur du sommet de l\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153uds.  </p> <p>On observe que, par exemple, <code>arbre[lettre][0]</code>, respectivement <code>arbre[lettre][1]</code>, permet d\u2019atteindre la cl\u00e9 du sous-arbre gauche, respectivement droit, de l\u2019arbre <code>arbre</code> de sommet <code>lettre</code>.</p> <p>Exemple : <pre><code>&gt;&gt;&gt; taille(a, 'F')\n9\n&gt;&gt;&gt; taille(a, 'B')\n5\n&gt;&gt;&gt; taille(a, 'I')\n2\n</code></pre></p> <pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], 'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], 'H':['','']}\n\n\ndef taille(arbre, lettre):\n    if lettre == '':\n        return 0\n    return 1 + taille(arbre, arbre[lettre][0]) + taille(arbre, arbre[lettre][1])\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-012","title":"Exercice 01.2","text":"<p>Exercice 01.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt le sous- tableau des \u00e9l\u00e9ments non rang\u00e9s et on place le plus petit \u00e9l\u00e9ment en premi\u00e8re position de ce sous-tableau.</p> <p>Exemple avec le tableau : <code>t = [41, 55, 21, 18, 12, 6, 25]</code> </p> <ul> <li> <p>\u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus petit \u00e9l\u00e9ment avec le premier. Le tableau devient <code>t = [6, 55, 21, 18, 12, 41, 25]</code></p> </li> <li> <p>\u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments sauf le premier, on permute le plus petit \u00e9l\u00e9ment trouv\u00e9 avec le second. Le tableau devient : <code>t = [6, 12, 21, 18, 55, 41, 25]</code> </p> </li> </ul> <p>Et ainsi de suite. </p> <p>Le programme ci-dessous impl\u00e9mente cet algorithme.</p> <pre><code>def echange(tab, i, j):\n    '''Echange les \u00e9l\u00e9ments d'indice i et j dans le tableau tab.'''\n    temp = ... \n    tab[i] = ... \n    tab[j] = ... \n\ndef tri_selection(tab):\n    '''Trie le tableau tab dans l'ordre croissant\n    par la m\u00e9thode du tri par s\u00e9lection.'''\n    N = len(tab)\n    for k in range(...): \n        imin = ... \n        for i in range(..., N): \n            if tab[i] &lt; ...: \n                imin = i\n        echange(tab, ..., ...) \n</code></pre> <p>Compl\u00e9ter le code de cette fonction de fa\u00e7on \u00e0 obtenir :</p> <pre><code>&gt;&gt;&gt; liste = [41, 55, 21, 18, 12, 6, 25]\n&gt;&gt;&gt; tri_selection(liste)\n&gt;&gt;&gt; liste\n[6, 12, 18, 21, 25, 41, 55]\n</code></pre> <pre><code>def echange(tab, i, j):\n    '''Echange les \u00e9l\u00e9ments d'indice i et j dans le tableau tab.'''\n    temp = tab[i] \n    tab[i] = tab[j] \n    tab[j] = temp \n\ndef tri_selection(tab):\n    '''Trie le tableau tab dans l'ordre croissant\n    par la m\u00e9thode du tri par s\u00e9lection.'''\n    N = len(tab)\n    for k in range(N): \n        imin = k \n        for i in range(k + 1, N): \n            if tab[i] &lt; tab[imin]: \n                imin = i\n        echange(tab, k, imin) \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-02","title":"\u25b6 Sujet 02","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-021","title":"Exercice 02.1","text":"<p>Exercice 02.1</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re des cha\u00eenes de caract\u00e8res contenant uniquement des majuscules et des carac- t\u00e8res <code>*</code> appel\u00e9es mots \u00e0 trous. </p> <p>Par exemple <code>INFO*MA*IQUE</code>, <code>***I***E**</code> et <code>*S*</code> sont des mots \u00e0 trous.  </p> <p>Programmer une fonction <code>correspond</code> qui :</p> <ul> <li>prend en param\u00e8tres deux cha\u00eenes de caract\u00e8res <code>mot</code> et <code>mot_a_trous</code> o\u00f9 <code>mot_a_trous</code> est un mot \u00e0 trous comme indiqu\u00e9 ci-dessus, </li> <li>renvoie :<ul> <li><code>True</code> si on peut obtenir <code>mot</code> en rempla\u00e7ant convenablement les caract\u00e8res <code>'*'</code> de <code>mot_a_trous</code>.</li> <li><code>False</code> sinon.</li> </ul> </li> </ul> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; correspond('INFORMATIQUE', 'INFO*MA*IQUE')\nTrue\n&gt;&gt;&gt; correspond('AUTOMATIQUE', 'INFO*MA*IQUE')\nFalse\n&gt;&gt;&gt; correspond('STOP', 'S*')\nFalse\n&gt;&gt;&gt; correspond('AUTO', '*UT*')\nTrue\n</code></pre> <pre><code>def correspond(mot, mot_a_trous):\n    if len(mot) != len(mot_a_trous):\n        return False\n    for i in range(len(mot)):\n        if mot[i] != mot_a_trous[i] and mot_a_trous[i] != '*':\n            return False\n    return True\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-022","title":"Exercice 02.2","text":"<p>Exercice 02.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re au plus 26 personnes A, B, C, D, E, F ... qui peuvent s'envoyer des messages avec deux r\u00e8gles \u00e0 respecter :</p> <ul> <li>chaque personne ne peut envoyer des messages qu'\u00e0 une seule personne (\u00e9ventuellement elle-m\u00eame),</li> <li>chaque personne ne peut recevoir des messages qu'en provenance d'une seule personne (\u00e9ventuellement elle-m\u00eame).</li> </ul> <p>Voici un exemple - avec 6 personnes - de \u00ab plan d'envoi des messages \u00bb qui respecte les r\u00e8gles ci-dessus, puisque chaque personne est pr\u00e9sente une seule fois dans chaque colonne :</p> <ul> <li>A envoie ses messages \u00e0 E</li> <li>E envoie ses messages \u00e0 B</li> <li>B envoie ses messages \u00e0 F</li> <li>F envoie ses messages \u00e0 A</li> <li>C envoie ses messages \u00e0 D</li> <li>D envoie ses messages \u00e0 C</li> </ul> <p>Et le dictionnaire correspondant \u00e0 ce plan d'envoi est le suivant :</p> <p><code>plan_a = {'A':'E', 'B':'F', 'C':'D', 'D':'C', 'E':'B', 'F':'A'}</code></p> <p>Un cycle est une suite de personnes dans laquelle la derni\u00e8re est la m\u00eame que la premi\u00e8re.</p> <p>Sur le plan d'envoi <code>plan_a</code> des messages ci-dessus, il y a deux cycles distincts : un premier cycle avec A, E, B, F et un second cycle avec C et D.</p> <p>En revanche, le plan d\u2019envoi <code>plan_b</code> ci-dessous :</p> <p><code>plan_b = {'A':'C', 'B':'F', 'C':'E', 'D':'A', 'E':'B', 'F':'D'}</code></p> <p>comporte un unique cycle : A, C, E, B, F, D. Dans ce cas, lorsqu\u2019un plan d\u2019envoi comporte un unique cycle, on dit que le plan d\u2019envoi est cyclique.</p> <p>Pour savoir si un plan d'envoi de messages comportant N personnes est cyclique, on peut utiliser l'algorithme ci-dessous :</p> <ul> <li>on part d\u2019un exp\u00e9diteur (ici A) et on inspecte son destinataire dans le plan d'envoi,</li> <li>chaque destinataire devient \u00e0 son tour exp\u00e9diteur, selon le plan d\u2019envoi, tant qu\u2019on ne \u00ab retombe \u00bb pas sur l\u2019exp\u00e9diteur initial,</li> <li>le plan d\u2019envoi est cyclique si on l\u2019a parcouru en entier.</li> </ul> <p>Compl\u00e9ter la fonction <code>est_cyclique</code> en respectant la sp\u00e9cification.</p> <p>On rappelle que la fonction Python <code>len</code> permet d'obtenir la longueur d'un dictionnaire.</p> <pre><code>def est_cyclique(plan):\n    '''Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 \n    un plan d'envoi de messages (ici entre les personnes A, B, C,\n    D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et \n    False sinon.'''\n    expediteur = 'A'\n    destinataire = plan[...] \n    nb_destinataires = 1\n\n    while destinataire != expediteur:\n        destinataire = ... \n        nb_destinataires = ... \n\n    return nb_destinataires == ... \n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'})\nFalse\n&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'})\nFalse\n</code></pre> <pre><code>def est_cyclique(plan):\n    '''Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 \n    un plan d'envoi de messages (ici entre les personnes A, B, C,\n    D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et \n    False sinon.'''\n    expediteur = 'A'\n    destinataire = plan[expediteur]\n    nb_destinaires = 1\n\n    while destinataire != expediteur:\n        destinataire = plan[destinataire]\n        nb_destinaires += 1\n\n    return nb_destinaires == len(plan)\n\n#tests\nprint(est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'}))\nprint(est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'}))\nprint(est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'}))\nprint(est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'}))\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-03","title":"\u25b6 Sujet 03","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-031","title":"Exercice 03.1","text":"<p>Exercice 03.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire la fonction <code>maximum_tableau</code>, prenant en param\u00e8tre un tableau non vide de nombres <code>tab</code> (de type <code>list</code>) et renvoyant le plus grand \u00e9l\u00e9ment de ce tableau.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; maximum_tableau([98, 12, 104, 23, 131, 9])\n131\n&gt;&gt;&gt; maximum_tableau([-27, 24, -3, 15])\n24\n</code></pre> <pre><code>def maximum_tableau(tab):\n    maximum = tab[0]\n    for element in tab:\n        if element &gt; maximum:\n            maximum = element\n    return maximum\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-032","title":"Exercice 03.2","text":"<p>Exercice 03.2</p> \u00c9nonc\u00e9Correction <p>On dispose de cha\u00eenes de caract\u00e8res contenant uniquement des parenth\u00e8ses ouvrantes et fermantes. </p> <p>Un parenth\u00e9sage est correct si :</p> <ul> <li>le nombre de parenth\u00e8ses ouvrantes de la cha\u00eene est \u00e9gal au nombre de parenth\u00e8ses fermantes.</li> <li>en parcourant la cha\u00eene de gauche \u00e0 droite, le nombre de parenth\u00e8ses d\u00e9j\u00e0 ouvertes doit \u00eatre, \u00e0 tout moment, sup\u00e9rieur ou \u00e9gal au nombre de parenth\u00e8ses d\u00e9j\u00e0 ferm\u00e9es.</li> </ul> <p>Ainsi, <code>((()())(()))</code> est un parenth\u00e9sage correct. </p> <p>Les parenth\u00e9sages <code>())(()</code> et <code>(())(()</code> sont, eux, incorrects.</p> <p>On dispose du code de la classe <code>Pile</code> suivant :</p> <pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie un bool\u00e9en indiquant si la pile est vide.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l'\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide. Produit une erreur sinon.\n        \"\"\"\n        assert not self.est_vide()\n        return self.contenu.pop()\n</code></pre> <p>On souhaite programmer une fonction <code>bon_parenthesage</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>ch</code> form\u00e9e de parenth\u00e8ses et renvoie <code>True</code> si la cha\u00eene est bien parenth\u00e9s\u00e9e et <code>False</code> sinon.</p> <p>Cette fonction utilise une pile et suit le principe suivant : en parcourant la cha\u00eene de gauche \u00e0 droite, si on trouve une parenth\u00e8se ouvrante, on l\u2019empile au sommet de la pile et si on trouve une parenth\u00e8se fermante, on d\u00e9pile (si possible) la parenth\u00e8se ouvrante stock\u00e9e au sommet de la pile. </p> <p>La cha\u00eene est alors bien parenth\u00e9s\u00e9e si, \u00e0 la fin du parcours, la pile est vide. </p> <p>Elle est, par contre, mal parenth\u00e9s\u00e9e : </p> <ul> <li>si dans le parcours, on trouve une parenth\u00e8se fermante, alors que la pile est vide ;</li> <li>ou si, \u00e0 la fin du parcours, la pile n\u2019est pas vide.</li> </ul> <p>Compl\u00e9ter le code de la fonction <code>bon_parenthesage</code> ci-dessous:</p> <pre><code>def bon_parenthesage(ch):\n    \"\"\"Renvoie un bool\u00e9en indiquant si la cha\u00eene ch \n    est bien parenth\u00e9s\u00e9e\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == ...: \n            p.empiler(c)\n        elif c == ...: \n            if p.est_vide():\n                ...\n            else:\n                ...\n    return ... \n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; bon_parenthesage(\"((()())(()))\")\nTrue\n&gt;&gt;&gt; bon_parenthesage(\"())(()\")\nFalse\n&gt;&gt;&gt; bon_parenthesage(\"(())(()\")\nFalse\n</code></pre> <pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie un bool\u00e9en indiquant si la pile est vide.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l'\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide. Produit une erreur sinon.\n        \"\"\"\n        assert not self.est_vide()\n        return self.contenu.pop()\n\ndef bon_parenthesage(ch):\n    \"\"\"Renvoie un bool\u00e9en indiquant si la cha\u00eene ch est bien parenth\u00e9s\u00e9e\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == '(':\n            p.empiler(c)\n        elif c == ')':\n            if p.est_vide():\n                return False\n            else:\n                p.depiler()\n    return p.est_vide()\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-04","title":"\u25b6 Sujet 04","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-041","title":"Exercice 04.1","text":"<p>Exercice 04.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>recherche</code>, prenant en param\u00e8tres un tableau non vide <code>tab</code> (type <code>list</code>) d'entiers et un entier <code>n</code>, et qui renvoie l'indice de la derni\u00e8re occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie <code>None</code>.</p> <p>Exemples <pre><code>&gt;&gt;&gt; recherche([5, 3], 1) # renvoie None\n2\n&gt;&gt;&gt; recherche([2, 4], 2)\n0\n&gt;&gt;&gt; recherche([2, 3, 5, 2, 4], 2)\n3\n</code></pre></p> <pre><code>def recherche(tab, n):\n    indice_solution = None\n    for i in range(len(tab)):\n        if tab[i] == n:\n            indice_solution = i\n    return indice_solution\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-042","title":"Exercice 04.2","text":"<p>Exercice 04.2</p> \u00c9nonc\u00e9Correction <p>On souhaite programmer une fonction donnant la distance la plus courte entre un point de d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res. Les points sont donn\u00e9s sous la forme d'un tuple de deux entiers. La liste des points \u00e0 traiter est donc un tableau de tuples.</p> <p>On rappelle que la distance entre deux points du plan de coordonn\u00e9es \\((x;y)\\) et \\((x';y')\\) v\u00e9rifie la formule :</p> \\[d^2=(x-x')^2+(y-y')^2\\] <p>Compl\u00e9ter le code des fonctions <code>distance_carre</code> et <code>point_le_plus_proche</code> fournies ci-dessous pour qu\u2019elles r\u00e9pondent \u00e0 leurs sp\u00e9cifications.</p> <pre><code>def distance_carre(point1, point2):\n    \"\"\" Calcule et renvoie la distance au carre entre \n    deux points.\"\"\"\n    return (...)**2 + (...)**2 \n\ndef point_le_plus_proche(depart, tab):\n    \"\"\" Renvoie les coordonn\u00e9es du premier point du tableau tab se \n    trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    min_point = tab[0]\n    min_dist = ... \n    for i in range(1, len(tab)):\n        if distance_carre(tab[i], depart) &lt; ...: \n            min_point = ... \n            min_dist = ... \n    return min_point\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; distance_carre((1, 0), (5, 3))\n25\n&gt;&gt;&gt; distance_carre((1, 0), (0, 1))\n2\n&gt;&gt;&gt; point_le_plus_proche((0, 0), [(7, 9), (2, 5), (5, 2)])\n(2, 5)\n&gt;&gt;&gt; point_le_plus_proche((5, 2), [(7, 9), (2, 5), (5, 2)])\n(5, 2)\n</code></pre> <pre><code>def distance_carre(point1, point2):\n    \"\"\" Calcule et renvoie la distance au carre entre \n    deux points.\"\"\"\n    return (point1[0] - point2[0])**2 + ((point1[1] - point2[1]))**2\n\ndef point_le_plus_proche(depart, tab):\n    \"\"\" Renvoie les coordonn\u00e9es du premier point du tableau tab se \n    trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    min_point = tab[0]\n    min_dist = distance_carre(min_point, depart) \n    for i in range(1, len(tab)):\n        if distance_carre(tab[i], depart) &lt; min_dist: \n            min_point = tab[i] \n            min_dist = distance_carre(tab[i], depart) \n    return min_point\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-05","title":"\u25b6 Sujet 05","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-051","title":"Exercice 05.1","text":"<p>Exercice 05.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>max_et_indice</code> qui prend en param\u00e8tre un tableau non vide <code>tab</code> de nombres entiers et qui renvoie la valeur du plus grand \u00e9l\u00e9ment de ce tableau ainsi que l\u2019indice de sa premi\u00e8re apparition dans ce tableau.</p> <p>L\u2019utilisation de la fonction native <code>max</code> n\u2019est pas autoris\u00e9e.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; max_et_indice([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, 3)\n&gt;&gt;&gt; max_et_indice([-2])\n(-2, 0)\n&gt;&gt;&gt; max_et_indice([-1, -1, 3, 3, 3])\n(3, 2)\n&gt;&gt;&gt; max_et_indice([1, 1, 1, 1])\n(1, 0)\n</code></pre> <pre><code>def max_et_indice(tab):\n    '''\n    renvoie la valeur du plus grand \u00e9l\u00e9ment de ce tableau ainsi\n    que l\u2019indice de sa premi\u00e8re apparition dans ce tableau.\n    '''\n    val_max = tab[0]\n    ind_max = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n            ind_max = i\n    return (val_max, ind_max)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-052","title":"Exercice 05.2","text":"<p>Exercice 05.2</p> \u00c9nonc\u00e9Correction <p>L\u2019ordre des g\u00e8nes sur un chromosome est repr\u00e9sent\u00e9 par un tableau <code>ordre</code> de <code>n</code> cases d\u2019entiers distincts deux \u00e0 deux et compris entre 1 et <code>n</code>.</p> <p>Par exemple, <code>ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]</code> dans le cas <code>n = 9</code>.</p> <p>On dit qu\u2019il y a un point de rupture dans <code>ordre</code> dans chacune des situations suivantes :</p> <ul> <li>la premi\u00e8re valeur de <code>ordre</code> n\u2019est pas 1 ;</li> <li>l\u2019\u00e9cart entre deux g\u00e8nes cons\u00e9cutifs n\u2019est pas \u00e9gal \u00e0 1 ;</li> <li>la derni\u00e8re valeur de <code>ordre</code> n\u2019est pas n.</li> </ul> <p>Par exemple, si <code>ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]</code> avec <code>n = 9</code>, on a</p> <ul> <li>un point de rupture au d\u00e9but car 5 est diff\u00e9rent de 1</li> <li>un point de rupture entre 3 et 6 (l\u2019\u00e9cart est de 3)</li> <li>un point de rupture entre 7 et 2 (l\u2019\u00e9cart est de 5)</li> <li>un point de rupture entre 1 et 8 (l\u2019\u00e9cart est de 7)</li> </ul> <p>Il y a donc 4 points de rupture.</p> <p>Compl\u00e9ter les fonctions Python <code>est_un_ordre</code> et <code>nombre_points_rupture</code> propos\u00e9es \u00e0 la page suivante pour que :</p> <ul> <li> <p>la fonction <code>est_un_ordre</code> renvoie <code>True</code> si le tableau pass\u00e9 en param\u00e8tre repr\u00e9sente bien un ordre de g\u00e8nes de chromosome et <code>False</code> sinon ;</p> </li> <li> <p>la fonction <code>nombre_points_rupture</code> renvoie le nombre de points de rupture d\u2019un tableau pass\u00e9 en param\u00e8tre repr\u00e9sentant l\u2019ordre de g\u00e8nes d\u2019un chromosome.</p> </li> </ul> <pre><code>def est_un_ordre(tab):\n    '''\n    Renvoie True si tab est de longueur n et contient tous les\n    entiers de 1 \u00e0 n, False sinon\n    '''\n    n = len(tab)\n    # les entiers vus lors du parcours\n    vus = ... \n\n    for x in tab:\n        if x &lt; ... or x &gt;... or ...: \n            return False\n        ... .append(...) \n    return True\n\ndef nombre_points_rupture(ordre):\n    '''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente \n    un ordre de g\u00e8nes de chromosome\n    '''\n    # on v\u00e9rifie que ordre est un ordre de g\u00e8nes\n    assert ... \n    n = len(ordre)\n    nb = 0\n    if ordre[...] != 1: # le premier n'est pas 1 \n        nb = nb + 1\n    i = 0\n    while i &lt; ...: \n        if ... not in [-1, 1]: # l'\u00e9cart n'est pas 1 \n            nb = nb + 1\n        i = i + 1\n    if ordre[i] != ...: # le dernier n'est pas n \n        nb = nb + 1\n    return nb\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; est_un_ordre([1, 6, 2, 8, 3, 7])\nFalse\n&gt;&gt;&gt; est_un_ordre([5, 4, 3, 6, 7, 2, 1, 8, 9])\nTrue\n&gt;&gt;&gt; nombre_points_rupture([5, 4, 3, 6, 7, 2, 1, 8, 9])\n4\n&gt;&gt;&gt; nombre_points_rupture([1, 2, 3, 4, 5])\n0\n&gt;&gt;&gt; nombre_points_rupture([1, 6, 2, 8, 3, 7, 4, 5])\n7\n&gt;&gt;&gt; nombre_points_rupture([2, 1, 3, 4])\n2\n</code></pre> <pre><code>def est_un_ordre(tab):\n    '''\n    Renvoie True si tab est de longueur n et contient tous les\n    entiers de 1 \u00e0 n, False sinon\n    '''\n    n = len(tab)\n    # les entiers vus lors du parcours\n    vus = [] \n\n    for x in tab:\n        if x &lt; 1 or x &gt; n or x in vus: \n            return False\n        vus.append(x) \n    return True\n\ndef nombre_points_rupture(ordre):\n    '''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente \n    un ordre de g\u00e8nes de chromosome\n    '''\n    # on v\u00e9rifie que ordre est un ordre de g\u00e8nes\n    assert est_un_ordre(ordre) \n    n = len(ordre)\n    nb = 0\n    if ordre[0] != 1: # le premier n'est pas 1 \n        nb = nb + 1\n    i = 0\n    while i &lt; n - 1: \n        if ordre[i+1] - ordre[i] not in [-1, 1]: # l'\u00e9cart n'est pas 1 \n            nb = nb + 1\n        i = i + 1\n    if ordre[i] != n: # le dernier n'est pas n \n        nb = nb + 1\n    return nb\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-06","title":"\u25b6 Sujet 06","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-061","title":"Exercice 06.1","text":"<p>Exercice 06.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>verifie</code> qui prend en param\u00e8tre un tableau de valeurs num\u00e9riques et qui renvoie <code>True</code> si ce tableau est tri\u00e9 dans l\u2019ordre croissant, <code>False</code> sinon.</p> <p>Un tableau vide est consid\u00e9r\u00e9 comme tri\u00e9.</p> <p>Exemples :</p> <pre><code>Exemples :\n&gt;&gt;&gt; verifie([0, 5, 8, 8, 9])\nTrue\n&gt;&gt;&gt; verifie([8, 12, 4])\nFalse\n&gt;&gt;&gt; verifie([-1, 4])\nTrue\n&gt;&gt;&gt; verifie([])\nTrue\n&gt;&gt;&gt; verifie([5])\nTrue\n</code></pre> <pre><code>def verifie(tab):\n    for i in range(1, len(tab)):\n        if tab[i] &lt; tab[i-1]:\n            return False\n    return True\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-062","title":"Exercice 06.2","text":"<p>Exercice 06.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re dans cet exercice l\u2019\u00e9lection d\u2019un vainqueur \u00e0 l\u2019issue d\u2019un vote. Les r\u00e9sultats du vote sont stock\u00e9s dans un tableau : chaque vote exprim\u00e9 est le nom d\u2019un ou d\u2019une candidate. Par exemple, les r\u00e9sultats pourraient correspondre au tableau :</p> <pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n</code></pre> <p>indiquant que 3 candidats ont obtenu au moins un vote chacun : A, B et C.</p> <p>On cherche \u00e0 d\u00e9terminer le ou les candidats ayant obtenu le plus de suffrages. Pour cela, on propose d\u2019\u00e9crire deux fonctions :</p> <ul> <li>La fonction <code>depouille</code> doit permettre de compter le nombre de votes exprim\u00e9s pour chaque artiste. Elle prend en param\u00e8tre un tableau et renvoie le r\u00e9sultat dans un dictionnaire dont les cl\u00e9s sont les noms des issues et les valeurs le nombre de votes en leur faveur.</li> <li>La fonction <code>vainqueurs</code> doit d\u00e9signer le nom du ou des gagnants. Elle prend en param\u00e8tre un dictionnaire non vide dont la structure est celle du dictionnaire renvoy\u00e9 par la fonction <code>depouille</code> et renvoie un tableau. Ce tableau peut donc contenir plusieurs \u00e9l\u00e9ments s\u2019il y a des artistes ex- aequo. Compl\u00e9ter les fonctions <code>depouille</code> et <code>vainqueurs</code> ci-apr\u00e8s pour qu\u2019elles renvoient les r\u00e9sultats attendus.</li> </ul> <pre><code>def depouille(urne):\n    '''prend en param\u00e8tre une liste de suffrages et renvoie un \n    dictionnaire avec le nombre de voix pour chaque candidat'''\n    resultat = ... \n    for bulletin in urne:\n        if ...: \n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            ...\n    return resultat\n\ndef vainqueurs(election):\n    '''prend en param\u00e8tre un dictionnaire non vide avec le nombre de voix\n    pour chaque candidat et renvoie la liste des vainqueurs'''\n    nmax = 0\n    for candidat in election:\n        if ... &gt; ... : \n            nmax = ... \n    liste_finale = [ nom for nom in election if ... ] \n    return ... \n</code></pre> <p>Exemples d\u2019utilisation :</p> <pre><code>&gt;&gt;&gt; depouille([ 'A', 'B', 'A' ])\n{'A': 2, 'B': 1}\n&gt;&gt;&gt; depouille([])\n{}\n&gt;&gt;&gt; election = depouille(['A', 'A', 'A', 'B', 'C',\n'B', 'C', 'B', 'C', 'B'])\n&gt;&gt;&gt; election\n{'A': 3, 'B': 4, 'C': 3}\n&gt;&gt;&gt; vainqueurs(election)\n['B']\n&gt;&gt;&gt; vainqueurs({ 'A' : 2, 'B' : 2, 'C' : 1})\n['A', 'B']\n</code></pre> <pre><code>def depouille(urne):\n    '''prend en param\u00e8tre une liste de suffrages et renvoie un \n    dictionnaire avec le nombre de voix pour chaque candidat'''\n    resultat = {}\n    for bulletin in urne:\n        if bulletin in resultat:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            resultat[bulletin] = 1\n    return resultat\n\ndef vainqueurs(election):\n    '''prend en param\u00e8tre un dictionnaire non vide avec le nombre de voix\n    pour chaque candidat et renvoie la liste des vainqueurs'''\n    nmax = 0\n    for candidat in election:\n        if election[candidat] &gt; nmax: \n            nmax = election[candidat] \n    liste_finale = [ nom for nom in election if election[nom] == nmax ]\n    return liste_finale\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-07","title":"\u25b6 Sujet 07","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-071","title":"Exercice 07.1","text":"<p>Exercice 07.1</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re dans cet exercice une repr\u00e9sentation binaire d\u2019un entier non sign\u00e9 en tant que tableau de bool\u00e9ens. Si</p> <pre><code>tab = [True, False, True, False, False, True, True]\n</code></pre> <p>est un tel tableau, alors l\u2019entier qu\u2019il repr\u00e9sente est \\(2^6 +2^4 + 2^1 + 2^0 = 83\\). Cette repr\u00e9sentation consistant \u00e0 placer en premier le bool\u00e9en indiquant la puissance la plus \u00e9lev\u00e9e de 2 est dite big-endian ou grand-boutiste.</p> <p>\u00c9crire une fonction <code>gb_vers_entier</code> qui prend en param\u00e8tre un tel tableau et renvoie l\u2019entier qu\u2019il repr\u00e9sente.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; gb_vers_entier([])\n0\n&gt;&gt;&gt; gb_vers_entier([True])\n1\n&gt;&gt;&gt; gb_vers_entier([True, False, True, False, False, True, True])\n83\n&gt;&gt;&gt; gb_vers_entier([True, False, False, False, False, False, True, False])\n130\n</code></pre> <pre><code>def gb_vers_entier(tab):\n    somme = 0\n    for i in range(len(tab)):\n        if tab[i]:\n            somme += 2**(len(tab)-1-i)\n    return somme \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-072","title":"Exercice 07.2","text":"<p>Exercice 07.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>tri_insertion</code> suivante prend en argument un tableau <code>tab</code> et trie ce tableau en utilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la sp\u00e9cification demand\u00e9e.</p> <p>On rappelle le principe du tri par insertion : on consid\u00e8re les \u00e9l\u00e9ments \u00e0 trier un par un, le premier \u00e9l\u00e9ment constituant, \u00e0 lui tout seul, un tableau tri\u00e9 de longueur 1. On range ensuite le second \u00e9l\u00e9ment pour constituer un tableau tri\u00e9 de longueur 2, puis on range le troisi\u00e8me \u00e9l\u00e9ment pour avoir un tableau tri\u00e9 de longueur 3 et ainsi de suite...</p> <p>A chaque \u00e9tape, le premier \u00e9l\u00e9ment du sous-tableau non tri\u00e9 est plac\u00e9 dans le sous-tableau des \u00e9l\u00e9ments d\u00e9j\u00e0 tri\u00e9s de sorte que ce sous-tableau demeure tri\u00e9.</p> <p>Le principe du tri par insertion est donc d'ins\u00e9rer \u00e0 la n-i\u00e8me it\u00e9ration, le n-i\u00e8me \u00e9l\u00e9ment \u00e0 la bonne place.</p> <pre><code>def tri_insertion(tab):\n    '''Trie le tableau tab par ordre croissant\n    en appliquant l'algorithme de tri par insertion'''\n    n = len(tab)\n    for i in range(1, n):\n        valeur_insertion = ... \n        # la variable j sert \u00e0 d\u00e9terminer \n        # o\u00f9 placer la valeur \u00e0 ranger\n        j = ... \n        # tant qu'on n'a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0\n        # ins\u00e9rer on d\u00e9cale les valeurs du tableau vers la droite\n        while j &gt; ... and valeur_insertion &lt; tab[...]: \n            tab[j] = tab[j-1]\n            j = ... \n        tab[j] = ... \n</code></pre> <p>Exemples : <pre><code>&gt;&gt;&gt; tab = [98, 12, 104, 23, 131, 9]\n&gt;&gt;&gt; tri_insertion(tab)\n&gt;&gt;&gt; tab\n[9, 12, 23, 98, 104, 131]\n</code></pre></p> <pre><code>def tri_insertion(tab):\n    '''Trie le tableau tab par ordre croissant\n    en appliquant l'algorithme de tri par insertion'''\n    n = len(tab)\n    for i in range(1, n):\n        valeur_insertion = tab[i]\n        # la variable j sert \u00e0 d\u00e9terminer \n        # o\u00f9 placer la valeur \u00e0 ranger\n        j = i \n        # tant qu'on n'a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0\n        # ins\u00e9rer on d\u00e9cale les valeurs du tableau vers la droite\n        while j &gt; 0 and valeur_insertion &lt; tab[j-1]: \n            tab[j] = tab[j-1]\n            j = j - 1 \n        tab[j] = valeur_insertion \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-08","title":"\u25b6 Sujet 08","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-081","title":"Exercice 08.1","text":"<p>Exercice 08.1</p> \u00c9nonc\u00e9Correction <p>Le codage par diff\u00e9rence (delta encoding en anglais) permet de compresser un tableau d\u2019entiers dont les valeurs sont proches les unes des autres. Le principe est de stocker la premi\u00e8re donn\u00e9e en indiquant pour chaque autre donn\u00e9e sa diff\u00e9rence avec la pr\u00e9c\u00e9dente plut\u00f4t que la donn\u00e9e elle-m\u00eame.</p> <p>On se retrouve alors avec un tableau de donn\u00e9es plus petit, n\u00e9cessitant moins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives sont proches. </p> <p>Programmer la fonction <code>delta(liste)</code> qui prend en param\u00e8tre un tableau non vide de nombres entiers et qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; delta([1000, 800, 802, 1000, 1003])\n[1000, -200, 2, 198, 3]\n&gt;&gt;&gt; delta([42])\n[42] \n</code></pre> <pre><code>def delta(tab):\n    diff = [tab[0]]\n    for i in range(1, len(tab)):\n        diff.append(tab[i] - tab[i-1])\n    return diff\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-082","title":"Exercice 08.2","text":"<p>Exercice 08.2</p> \u00c9nonc\u00e9Correction <p>Une expression arithm\u00e9tique ne comportant que les quatre op\u00e9rations +, \u2212, \u00d7, \u00f7 peut \u00eatre repr\u00e9sent\u00e9e sous forme d\u2019arbre binaire. Les n\u0153uds internes sont des op\u00e9rateurs et les feuilles sont des nombres. Dans un tel arbre, la disposition des n\u0153uds joue le r\u00f4le des parenth\u00e8ses que nous connaissons bien.  </p> <p></p> <p>En parcourant en profondeur infixe l\u2019arbre binaire ci-dessus, on retrouve l\u2019expression not\u00e9e habituellement :  </p> \\[(3 \\times (8 + 7)) \u2212 (2 + 1)\\] <p>La classe <code>Expr</code> ci-apr\u00e8s permet d\u2019impl\u00e9menter une structure d\u2019arbre binaire pour repr\u00e9senter de telles expressions.</p> <p>Compl\u00e9ter la m\u00e9thode r\u00e9cursive <code>infixe</code> qui renvoie une cha\u00eene de caract\u00e8res contenant des parenth\u00e8ses repr\u00e9sentant l\u2019expression arithm\u00e9tique sur laquelle on l\u2019applique.</p> <pre><code>class Expr:\n    \"\"\"Classe impl\u00e9mentant un arbre d'expression.\"\"\"\n\n    def __init__(self, g, v, d):\n        \"\"\"un objet Expr poss\u00e8de 3 attributs :\n        - gauche : la sous-expression gauche ;\n        - valeur : la valeur de l'\u00e9tiquette, op\u00e9rande ou nombre ;\n        - droite : la sous-expression droite.\"\"\"\n        self.gauche = g\n        self.valeur = v\n        self.droite = d\n\n    def est_une_feuille(self):\n        \"\"\"renvoie True si et seulement \n        si le noeud est une feuille\"\"\"\n        return self.gauche is None and self.droite is None\n\n    def infixe(self):\n        \"\"\"renvoie la repr\u00e9sentation infixe de l'expression en\n        chaine de caract\u00e8res\"\"\"\n        s = ... \n        if self.gauche is not None:\n            s = '(' + s + ... .infixe() \n        s = s + ... \n        if ... is not None: \n            s = s + ... + ... \n        return s\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; a = Expr(Expr(None, 1, None), '+', Expr(None, 2, None))\n&gt;&gt;&gt; a.infixe()\n'(1+2)'\n&gt;&gt;&gt; b = Expr(Expr(Expr(None, 1, None), '+', Expr(None, 2, None)), '*', Expr(Expr(None, 3, None), '+', Expr(None, 4, None)))\n&gt;&gt;&gt; b.infixe()\n'((1+2)*(3+4))'\n&gt;&gt;&gt; e = Expr(Expr(Expr(None, 3, None), '*', Expr(Expr(None, 8, None), '+', Expr(None, 7, None))),\n'-', Expr(Expr(None, 2, None), '+', Expr(None, 1, None)))\n&gt;&gt;&gt; e.infixe()\n'((3*(8+7))-(2+1))'\n</code></pre> <pre><code>class Expr:\n    \"\"\"Classe impl\u00e9mentant un arbre d'expression.\"\"\"\n\n    def __init__(self, g, v, d):\n        \"\"\"un objet Expr poss\u00e8de 3 attributs :\n        - gauche : la sous-expression gauche ;\n        - valeur : la valeur de l'\u00e9tiquette, op\u00e9rande ou nombre ;\n        - droite : la sous-expression droite.\"\"\"\n        self.gauche = g\n        self.valeur = v\n        self.droite = d\n\n    def est_une_feuille(self):\n        \"\"\"renvoie True si et seulement \n        si le noeud est une feuille\"\"\"\n        return self.gauche is None and self.droite is None\n\n    def infixe(self):\n        \"\"\"renvoie la repr\u00e9sentation infixe de l'expression en\n        chaine de caract\u00e8res\"\"\"\n        s = '' \n        if self.gauche is not None:\n            s = '(' + s + self.gauche.infixe() \n        s = s + str(self.valeur) \n        if self.droite is not None: \n            s = s + self.droite.infixe() + ')' \n        return s\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-09","title":"\u25b6 Sujet 09","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-091","title":"Exercice 09.1","text":"<p>Exercice 09.1</p> \u00c9nonc\u00e9Correction <p>On veut trier par ordre croissant les notes d\u2019une \u00e9valuation qui sont des nombres entiers compris entre 0 et 10 (inclus).</p> <p>Ces notes sont contenues dans un tableau <code>notes_eval</code> (type <code>list</code>)</p> <p>\u00c9crire une fonction <code>effectif_notes</code> prenant en param\u00e8tre le tableau <code>notes_eval</code> et renvoyant un tableau de longueur 11 tel que la valeur d\u2019indice <code>i</code> soit le nombre de notes valant <code>i</code> dans le tableau <code>notes_eval</code>.</p> <p>\u00c9crire ensuite une fonction <code>notes_triees</code> prenant en param\u00e8tre le tableau des effectifs des notes et renvoyant un tableau contenant les m\u00eames valeurs que <code>notes_eval</code> mais tri\u00e9es dans l\u2019ordre croissant.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; notes_eval = [2, 0, 5, 9, 6, 9, 10, 5, 7, 9, 9, 5, 0, 9, 6, 5, 4]\n&gt;&gt;&gt; eff = effectif_notes(notes_eval)\n&gt;&gt;&gt; eff\n[2, 0, 1, 0, 1, 4, 2, 1, 0, 5, 1]\n&gt;&gt;&gt; notes_triees(eff)\n[0, 0, 2, 4, 5, 5, 5, 5, 6, 6, 7, 9, 9, 9, 9, 9, 10]\n</code></pre> <pre><code>def effectif_notes(notes_eval):\n    tab = [0]*11\n    for note in notes_eval:\n        tab[note] += 1\n    return tab\n\ndef notes_triees(eff):\n    triees = []\n    for i in range(11):\n        if eff[i] != 0: #(1)\n            for _ in range(eff[i]):\n                triees.append(i)\n    return triees\n</code></pre> <ol> <li>On peut ne pas effectuer ce test, car si <code>eff[i]</code> vaut 0, on ne rentrera pas dans la boucle <code>for _ in range(0)</code> et donc on ne touchera pas \u00e0 la liste <code>triees</code>.  </li> </ol>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-092","title":"Exercice 09.2","text":"<p>Exercice 09.2</p> \u00c9nonc\u00e9Correction <p>L\u2019objectif de cet exercice est d\u2019\u00e9crire deux fonctions r\u00e9cursives <code>dec_to_bin</code> et <code>bin_to_dec</code> assurant respectivement la conversion de l\u2019\u00e9criture d\u00e9cimale d\u2019un nombre entier vers son \u00e9criture en binaire et, r\u00e9ciproquement, la conversion de l\u2019\u00e9criture en binaire d\u2019un nombre vers son \u00e9criture d\u00e9cimale.</p> <p>Dans cet exercice, on s\u2019interdit l\u2019usage des fonctions Python <code>bin</code> et <code>int</code>.</p> <p>L'exemple suivant montre comment obtenir l\u2019\u00e9criture en binaire du nombre 25 :</p> <p>\\(25 =  2 \\times 12 + 1\\) \\(\\phantom{25} = 2 \\times (2 \\times 6 + 0) + 1\\) \\(\\phantom{25} = 2 \\times (2 \\times (2 \\times 3 + 0) + 0) + 1\\) \\(\\phantom{25} = 2 \\times (2 \\times (2 \\times (2 \\times 1+1) + 0) + 0) + 1\\) \\(\\phantom{25} = 2 \\times (2 \\times (2 \\times (2 \\times (2\u00a0\\times 0 + 1)+1) + 0) + 0) + 1\\) \\(\\phantom{25} = 1 \\times 2^4 + 1 \\times 2^3 + 0 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0\\) </p> <p>L'\u00e9criture binaire de 25 est donc <code>11001</code>.</p> <p>0n rappelle \u00e9galement que :</p> <ul> <li><code>a // 2</code> renvoie le quotient de la division euclidienne de <code>a</code> par 2.</li> <li><code>a % 2</code> renvoie le reste dans la division euclidienne de <code>a</code> par 2.</li> </ul> <p>On indique enfin qu\u2019en Python si <code>mot = \"informatique\"</code> alors :</p> <ul> <li><code>mot[-1]</code> renvoie <code>'e'</code>, c\u2019est-\u00e0-dire le dernier caract\u00e8re de la cha\u00eene de caract\u00e8res <code>mot</code>.</li> <li><code>mot[:-1]</code> renvoie <code>'informatiqu'</code> , c\u2019est-\u00e0-dire l\u2019ensemble de la cha\u00eene de caract\u00e8res <code>mot</code> priv\u00e9e de son dernier caract\u00e8re.</li> </ul> <p>Compl\u00e9ter, puis tester, les codes de deux fonctions ci-dessous.  On pr\u00e9cise que la fonction r\u00e9cursive <code>dec_to_bin</code> prend en param\u00e8tre un nombre entier et renvoie une cha\u00eene de caract\u00e8res contenant l\u2019\u00e9criture en binaire du nombre pass\u00e9 en param\u00e8tre.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; dec_to_bin(25)\n'11001'\n</code></pre> <p>La fonction r\u00e9cursive <code>bin_to_dec</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res repr\u00e9sentant l\u2019\u00e9criture d\u2019un nombre en binaire et renvoie l\u2019\u00e9criture d\u00e9cimale de ce nombre.</p> <pre><code>&gt;&gt;&gt; bin_to_dec('101010')\n42\n</code></pre> <pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\n    if q == ...: \n        return ... \n    else:\n        return dec_to_bin(...) + ... \n\ndef bin_to_dec(nb_bin):\n    if len(nb_bin) == 1:\n        if ... == '0': \n            return 0\n        else:\n            return ... \n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\n            ...\n        return ... * bin_to_dec(nb_bin[:-1]) + ... \n</code></pre> <pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\n    if q == 0: \n        return str(r) \n    else:\n        return dec_to_bin(q) + str(r) \n\ndef bin_to_dec(nb_bin):\n    if len(nb_bin) == 1:\n        if nb_bin == '0': \n            return 0\n        else:\n            return 1 \n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\n            bit_droit = 1\n        return 2 * bin_to_dec(nb_bin[:-1]) + bit_droit\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-10","title":"\u25b6 Sujet 10","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-101","title":"Exercice 10.1","text":"<p>Exercice 10.1</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice on cherche \u00e0 calculer la moyenne pond\u00e9r\u00e9e d\u2019un \u00e9l\u00e8ve dans une mati\u00e8re donn\u00e9e. Chaque note est associ\u00e9e \u00e0 un coefficient qui la pond\u00e8re.</p> <p>Par exemple, si ses notes sont : 14 avec coefficient 3, 12 avec coefficient 1 et 16 avec coeffi- cient 2, sa moyenne pond\u00e9r\u00e9e sera donn\u00e9e par</p> \\[\\dfrac{14 \\times 3 + 12 \\times 1 + 16 \\times 2}{3+1+2}=14,333... \\] <p>\u00c9crire une fonction <code>moyenne</code> :</p> <ul> <li>qui prend en param\u00e8tre une liste notes non vide de tuples \u00e0 deux \u00e9l\u00e9ments entiers de la forme <code>(note, coefficient)</code> (<code>int</code> ou <code>float</code>) positifs ou nuls ;</li> <li>et qui renvoie la moyenne pond\u00e9r\u00e9e des notes de la liste sous forme de flottant si la somme des coefficients est non nulle, <code>None</code> sinon.</li> </ul> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; moyenne([(8, 2), (12, 0), (13.5, 1), (5, 0.5)])\n9.142857142857142\n&gt;&gt;&gt; moyenne([(3, 0), (5, 0)])\nNone\n</code></pre> <pre><code>def moyenne(tab):\n    somme = 0\n    coeffs = 0\n    for couple in tab:\n        somme += couple[0] * couple[1]\n        coeffs += couple[1]\n    if coeffs == 0:\n        return None\n    return somme / coeffs\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-102","title":"Exercice 10.2","text":"<p>Exercice 10.2</p> \u00c9nonc\u00e9Correction <p> On travaille sur des dessins en noir et blanc obtenus \u00e0 partir de pixels noirs et blancs : La figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple. On la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs. Chaque sous-liste repr\u00e9sentera donc une ligne du dessin.</p> <p>Dans le code ci-dessous, la fonction <code>affiche</code> permet d\u2019afficher le dessin. Les pixels noirs (1 dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re \"*\" et les blancs (0 dans la grille) par deux espaces.</p> <p>La fonction <code>liste_zoom</code> prend en arguments une liste <code>liste_depart</code> et un entier <code>k</code>. Elle renvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de <code>liste_depart</code> est dupliqu\u00e9 <code>k</code> fois.</p> <p>La fonction <code>dessin_zoom</code> prend en argument la grille <code>dessin</code> et renvoie une grille o\u00f9 toutes les lignes de <code>dessin</code> sont zoom\u00e9es <code>k</code> fois et r\u00e9p\u00e9t\u00e9es <code>k</code> fois.</p> <p>Compl\u00e9ter les fonctions <code>liste_zoom</code> et <code>dessin_zoom</code> du code suivant :</p> <pre><code>def affiche(dessin):\n    ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n        des \"*\" , les 0 par un espace \" \" '''\n    for ligne in dessin:\n        affichage = ''\n        for col in ligne:\n            if col == 1:\n                affichage = affichage + \"*\"\n            else:\n                affichage = affichage + \" \"\n        print(affichage)\n\n\ndef liste_zoom(liste_depart,k):\n    '''renvoie une liste contenant k fois chaque \u00e9l\u00e9ment de\n       liste_depart'''\n    liste_zoomee = ... \n    for elt in ... : \n        for i in range(k):\n            ...\n    return liste_zoomee\n\ndef dessin_zoom(grille,k):\n    '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n       ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoomee=[]\n    for ligne in grille:\n        ligne_zoomee = ... \n        for i in range(k):\n            ... .append(...) \n    return grille_zoomee\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n&gt;&gt;&gt; affiche(coeur)\n\n       * *       * *      \n     *     *   *     *    \n   *         *         *  \n   *                   *  \n   *                   *  \n     *               *    \n       *           *      \n         *       *        \n           *   *          \n             *            \n\n&gt;&gt;&gt; affiche(dessin_zoom(coeur,2))\n\n\n             * * * *             * * * *            \n             * * * *             * * * *            \n         * *         * *     * *         * *        \n         * *         * *     * *         * *        \n     * *                 * *                 * *    \n     * *                 * *                 * *    \n     * *                                     * *    \n     * *                                     * *    \n     * *                                     * *    \n     * *                                     * *    \n         * *                             * *        \n         * *                             * *        \n             * *                     * *            \n             * *                     * *            \n                 * *             * *                \n                 * *             * *                \n                     * *     * *                    \n                     * *     * *                    \n                         * *                        \n                         * *                        \n\n\n&gt;&gt;&gt; liste_zoom([1,2,3],3)\n[1, 1, 1, 2, 2, 2, 3, 3, 3]\n</code></pre> <pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n    ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n    des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        affichage = ''\n        for col in ligne:\n            if col == 1:\n                affichage = affichage + \"*\"\n            else:\n                affichage = affichage + \" \"\n        print(affichage)\n\n\ndef liste_zoom(liste_depart, k):\n    '''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\n    liste_zoomee = []\n    for elt in liste_depart:\n        for i in range(k):\n            liste_zoomee.append(elt)\n    return liste_zoomee\n\ndef dessin_zoom(grille, k):\n    '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoomee = []\n    for ligne in grille:\n        liste_zoomee = liste_zoom(ligne, k)\n        for i in range(k):\n            grille_zoomee.append(liste_zoomee)\n    return grille_zoomee\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-11","title":"\u25b6 Sujet 11","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-111","title":"Exercice 11.1","text":"<p>Exercice 11.1</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, on consid\u00e8re des phrases compos\u00e9es de mots.</p> <ul> <li> <p>On appelle \u00ab mot \u00bb une cha\u00eene de caract\u00e8res compos\u00e9e avec des caract\u00e8res choisis parmi les 26 lettres minuscules ou majuscules de l'alphabet,</p> </li> <li> <p>On appelle phrase une cha\u00eene de caract\u00e8res :</p> <ul> <li>compos\u00e9e avec un ou plusieurs mots s\u00e9par\u00e9s entre eux par un seul caract\u00e8re espace <code>' '</code>,</li> <li>se finissant :<ul> <li>soit par un point <code>'.'</code> qui est alors coll\u00e9 au dernier mot,</li> <li>soit par un point d'exclamation <code>'!'</code> ou d'interrogation <code>'?'</code> qui est alors s\u00e9par\u00e9 du dernier mot par un seul caract\u00e8re espace <code>' '</code>.</li> </ul> </li> </ul> </li> </ul> <p>Voici deux exemples de phrases :</p> <ul> <li>'Cet exercice est simple.'</li> <li>'Le point d exclamation est separe !'</li> </ul> <p>Apr\u00e8s avoir remarqu\u00e9 le lien entre le nombre de mots et le nombres de caract\u00e8res espace dans une phrase, programmer une fonction <code>nombre_de_mots</code> qui prend en param\u00e8tre une phrase et renvoie le nombre de mots pr\u00e9sents dans cette phrase.</p> <pre><code>&gt;&gt;&gt; nombre_de_mots('Cet exercice est simple.')\n4\n&gt;&gt;&gt; nombre_de_mots('Le point d exclamation est s\u00e9par\u00e9 !')\n6\n&gt;&gt;&gt; nombre_de_mots('Combien de mots y a t il dans cette phrase ?')\n10\n&gt;&gt;&gt; nombre_de_mots('Fin.')\n1\n</code></pre> <pre><code>def nombre_de_mots(phrase):\n    nb_mots = 0\n    for caractere in phrase:\n        if caractere == ' ' or caractere == '.':\n            nb_mots += 1\n    return nb_mots\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-112","title":"Exercice 11.2","text":"<p>Exercice 11.2</p> \u00c9nonc\u00e9Correction <p>Un arbre binaire de recherche est soit vide, repr\u00e9sent\u00e9 en Python par la valeur None, soit un n\u0153ud, contenant une \u00e9tiquette et deux sous-arbres gauche et droit et repr\u00e9sent\u00e9 par une instance de la classe Noeud donn\u00e9e ci-dessous.</p> <p>On consid\u00e8re ici que les \u00e9tiquettes des n\u0153uds sont des entiers et que les arbres binaires de recherche consid\u00e9r\u00e9s ne contiennent pas de doublons.</p> <pre><code>class Noeud:\n    def __init__(self, etiquette):\n        '''M\u00e9thode constructeur pour la classe Noeud.\n        Cr\u00e9e une feuille d'\u00e9tiquette donn\u00e9e.'''\n        self.etiquette = etiquette\n        self.gauche = None\n        self.droit = None\n\n    def inserer(self, cle):\n        '''Ins\u00e8re la cl\u00e9 dans l'arbre binaire de recherche\n        en pr\u00e9servant sa structure.'''\n        if cle &lt; self.etiquette:\n            if self.gauche != None:\n                ...\n            else:\n                self.gauche = ... \n        else:\n            ...\n                ...\n            else:\n                ... = Noeud(cle) \n</code></pre> <p>Compl\u00e9ter la m\u00e9thode r\u00e9cursive <code>inserer</code> afin qu\u2019elle permette d\u2019ins\u00e9rer une cl\u00e9 dans l\u2019arbre binaire de recherche non vide sur lequel on l\u2019appelle.</p> <p>Voici un exemple d'utilisation :</p> <pre><code>&gt;&gt;&gt; arbre = Noeud(7)\n&gt;&gt;&gt; for cle in (3, 9, 1, 6):\n        arbre.inserer(cle)\n&gt;&gt;&gt; arbre.gauche.etiquette\n3\n&gt;&gt;&gt; arbre.droit.etiquette\n9\n&gt;&gt;&gt; arbre.gauche.gauche.etiquette\n1\n&gt;&gt;&gt; arbre.gauche.droit.etiquette\n6\n</code></pre> <pre><code>class Noeud:\n    def __init__(self, etiquette):\n        '''M\u00e9thode constructeur pour la classe Noeud.\n        Cr\u00e9e une feuille d'\u00e9tiquette donn\u00e9e.'''\n        self.etiquette = etiquette\n        self.gauche = None\n        self.droit = None\n\n    def inserer(self, cle):\n        '''Ins\u00e8re la cl\u00e9 dans l'arbre binaire de recherche\n        en pr\u00e9servant sa structure.'''\n        if cle &lt; self.etiquette:\n            if self.gauche != None:\n                self.gauche.inserer(cle)\n            else:\n                self.gauche = Noeud(cle) \n        else:\n            if self.droit != None:\n                self.droit.inserer(cle)\n            else:\n                self.droit = Noeud(cle) \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-12","title":"\u25b6 Sujet 12","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-121","title":"Exercice 12.1","text":"<p>Exercice 12.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>tri_selection</code> qui prend en param\u00e8tre un tableau <code>tab</code> de nombres entiers (type <code>list</code>) et qui le modifie afin qu\u2019il soit tri\u00e9 par ordre croissant.</p> <p>On utilisera l\u2019algorithme suivant :</p> <ul> <li>on recherche le plus petit \u00e9l\u00e9ment du tableau, en le parcourant du rang 0 au dernier rang, et on l\u2019\u00e9change avec l\u2019\u00e9l\u00e9ment d\u2019indice 0 ;</li> <li>on recherche ensuite le plus petit \u00e9l\u00e9ment du tableau restreint du rang 1 au dernier rang, et on l\u2019\u00e9change avec l\u2019\u00e9l\u00e9ment d\u2019indice 1 ;</li> <li>on continue de cette fa\u00e7on jusqu\u2019\u00e0 ce que le tableau soit enti\u00e8rement tri\u00e9.</li> </ul> <p>Exemple : <pre><code>&gt;&gt;&gt; tab = [1, 52, 6, -9, 12]\n&gt;&gt;&gt; tri_selection(tab)\n&gt;&gt;&gt; tab\n[-9, 1, 6, 12, 52]\n</code></pre></p> <pre><code>def tri_selection(tab):\n    for i in range(len(tab)-1):\n        indice_min = i\n        for j in range(i+1, len(tab)):\n            if tab[j] &lt; tab[indice_min]:\n                indice_min = j\n        tab[i], tab[indice_min] = tab[indice_min], tab[i]\n    return tab\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-122","title":"Exercice 12.2","text":"<p>Exercice 12.2</p> \u00c9nonc\u00e9Correction <p>Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99.</p> <p>Une \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante :</p> <ul> <li>le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ;</li> <li>si la proposition de l\u2019utilisatrice est plus petite que le nombre cherch\u00e9, l\u2019utilisatrice en est avertie. Elle peut alors en tester un autre ;</li> <li>si la proposition de l\u2019utilisatrice est plus grande que le nombre cherch\u00e9, l\u2019utilisatrice en est avertie. Elle peut alors en tester un autre ;</li> <li>si l\u2019utilisatrice trouve le bon nombre en 10 essais ou moins, elle gagne ;</li> <li>si l\u2019utilisatrice a fait plus de 10 essais sans trouver le bon nombre, elle perd.</li> </ul> <p>La fonction <code>randint</code> est utilis\u00e9e. Si a et b sont des entiers tels que <code>a &lt;= b</code>, <code>randint(a,b)</code> renvoie un nombre entier compris entre <code>a</code> et <code>b</code>.</p> <p>Compl\u00e9ter le code ci-dessous et le tester :</p> <pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</code></pre> <pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,99)\n    nb_test = int(input('Proposez un nombre entre 1 et 99 : '))\n    compteur = 1\n\n    while nb_mystere != nb_test and compteur &lt; 10 :\n        compteur = compteur + 1\n        if nb_mystere &gt; nb_test:\n            nb_test = int(input('Trop petit ! Testez encore : '))\n        else:\n            nb_test = int(input('Trop grand ! Testez encore : '))\n\n    if nb_mystere == nb_test:\n        print ('Bravo ! Le nombre \u00e9tait ', nb_mystere)\n        print('Nombre d essais: ', compteur)\n    else:\n        print ('Perdu ! Le nombre \u00e9tait ', nb_mystere)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-13","title":"\u25b6 Sujet 13","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-131","title":"Exercice 13.1","text":"<p>Exercice 13.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers (type <code>list</code>), et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>None</code> sinon.</p> <p>L\u2019objectif de cet exercice est de parcourir un tableau, il est interdit d\u2019utiliser la m\u00e9thode <code>index</code> des listes Python.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4]) # renvoie None\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p> <pre><code>def recherche(elt, tab):\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            return i        \n    return None         \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-132","title":"Exercice 13.2","text":"<p>Exercice 13.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la fonction <code>insere</code> ci-dessous qui prend en argument un tableau <code>tab</code> d\u2019entiers tri\u00e9s par ordre croissant et un entier <code>a</code>. </p> <p>Cette fonction cr\u00e9e et renvoie un nouveau tableau \u00e0 partir de celui fourni en param\u00e8tre en y ins\u00e9rant la valeur <code>a</code> de sorte que le tableau renvoy\u00e9 soit encore tri\u00e9 par ordre croissant. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes Python.</p> <pre><code>def insere(tab, a):\n    \"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    tab_a = [ a ] + tab # nouveau tableau contenant a \n                        # suivi des \u00e9l\u00e9ments de tab\n    i = 0\n    while i &lt; ... and a &gt; ...: \n        tab_a[i] = ... \n        tab_a[i+1] = a\n        i = ... \n    return tab_a\n</code></pre> <p>Compl\u00e9ter la fonction <code>insere</code> ci-dessus.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; insere([1, 2, 4, 5], 3)\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; insere([1, 2, 7, 12, 14, 25], 30)\n[1, 2, 7, 12, 14, 25, 30]\n&gt;&gt;&gt; insere([2, 3, 4], 1)\n[1, 2, 3, 4]\n&gt;&gt;&gt; insere([], 1)\n[1]\n</code></pre></p> <pre><code>def insere(tab, a):\n    \"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    tab_a = [ a ] + tab # nouveau tableau contenant a \n                        # suivi des \u00e9l\u00e9ments de tab\n    i = 0\n    while i &lt; len(tab_a) - 1 and a &gt; tab_a[i+1]: \n        tab_a[i] = tab_a[i+1] \n        tab_a[i+1] = a\n        i = i + 1 \n    return tab_a\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-14","title":"\u25b6 Sujet 14","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-141","title":"Exercice 14.1","text":"<p>Exercice 14.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>min_et_max</code> qui prend en param\u00e8tre un tableau de nombres <code>tab</code> non vide, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s <code>min</code> et <code>max</code>.</p> <p>Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>L\u2019utilisation des fonctions natives <code>min</code>, <code>max</code> et <code>sorted</code>, ainsi que la m\u00e9thode <code>sort</code> n\u2019est pas autoris\u00e9e.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; min_et_max([0, 1, 4, 2, -2, 9, 3, 1, 7, 1])\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; min_et_max([0, 1, 2, 3])\n{'min': 0, 'max': 3}\n&gt;&gt;&gt; min_et_max([3])\n{'min': 3, 'max': 3}\n&gt;&gt;&gt; min_et_max([1, 3, 2, 1, 3])\n{'min': 1, 'max': 3}\n&gt;&gt;&gt; min_et_max([-1, -1, -1, -1, -1])\n{'min': -1, 'max': -1}\n</code></pre> <pre><code>def min_et_max(tab):\n    d = {}\n    d['min'] = tab[0]\n    d['max'] = tab[0]\n    for val in tab:\n        if val &lt; d['min']:\n            d['min'] = val\n        if val &gt; d['max']:\n            d['max'] = val\n    return d\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-142","title":"Exercice 14.2","text":"<p>Exercice 14.2</p> \u00c9nonc\u00e9Correction <p>On dispose d\u2019une classe <code>Carte</code> permettant de cr\u00e9er des objets mod\u00e9lisant des cartes \u00e0 jouer.</p> <p>Compl\u00e9ter la classe <code>Paquet_de_cartes</code> suivante en respectant les sp\u00e9cifications donn\u00e9es dans les cha\u00eenes de documentation.</p> <p>Ajouter une assertion dans la m\u00e9thode <code>recuperer_carte</code> afin de v\u00e9rifier que le param\u00e8tre <code>pos</code> est correct.</p> <p>On rappelle que l\u2019instruction</p> <pre><code>assert condition, message\n</code></pre> <p>permet de v\u00e9rifier que la condition est vraie. Si ce n\u2019est pas le cas, le programme s\u2019arr\u00eate et affiche le message d\u2019erreur fourni.</p> <pre><code>class Carte:\n    def __init__(self, c, v):\n        \"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def recuperer_valeur(self):\n        \"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def recuperer_couleur(self):\n        \"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n        \"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\n        ...\n        ...\n            ...\n                ...\n\n    def recuperer_carte(self, pos):\n        \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\n        ...\n        ...\n</code></pre> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; jeu = Paquet_de_cartes()\n&gt;&gt;&gt; carte1 = jeu.recuperer_carte(20)\n&gt;&gt;&gt; carte1.recuperer_valeur() + \" de \" + carte1.recuperer_couleur()\n\"8 de coeur\"\n&gt;&gt;&gt; carte2 = jeu.recuperer_carte(0)\n&gt;&gt;&gt; carte2.recuperer_valeur() + \" de \" + carte2.recuperer_couleur()\n\"As de pique\"\n&gt;&gt;&gt; carte3 = jeu.recuperer_carte(52)\nAssertionError : param\u00e8tre pos invalide\n</code></pre> <pre><code>class Carte:\n    def __init__(self, c, v):\n        \"\"\"Initialise les attributs couleur (entre 1 et 4), \n        et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def recuperer_valeur(self):\n        \"\"\" Renvoie la valeur de la carte : \n        As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', \n                   '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def recuperer_couleur(self):\n        \"\"\" Renvoie la couleur de la carte \n        (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n        \"\"\" Initialise l'attribut contenu avec une liste des 52\n        objets Carte possibles rang\u00e9s par valeurs croissantes en\n        commen\u00e7ant par pique, puis c\u0153ur, carreau et tr\u00e8fle. \"\"\"\n        self.contenu = []\n        for c in range(1, 5):\n            for v in range(1, 14):\n                self.contenu.append(Carte(c,v))\n\n    def recuperer_carte(self, pos):\n        \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos \n        (entier compris entre 0 et 51). \"\"\"\n        assert 0 &lt;= pos &lt;= 51,  'param\u00e8tre pos invalide'\n        return self.contenu[pos]\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-15","title":"\u25b6 Sujet 15","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-151","title":"Exercice 15.1","text":"<p>Exercice 15.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>moyenne</code> qui prend en param\u00e8tre un tableau non vide de nombres flottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; moyenne([1.0])\n1.0\n&gt;&gt;&gt; moyenne([1.0, 2.0, 4.0])\n2.3333333333333335\n</code></pre></p> <pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-152","title":"Exercice 15.2","text":"<p>Exercice 15.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la fonction <code>binaire</code>. Cette fonction prend en param\u00e8tre un entier positif <code>a</code> en \u00e9criture d\u00e9cimale et renvoie son \u00e9criture binaire sous la forme d\u2019une chaine de caract\u00e8res.</p> <p>L\u2019algorithme utilise la m\u00e9thode des divisions euclidiennes successives comme l\u2019illustre l\u2019exemple ci-apr\u00e8s.</p> <p></p> <p>Compl\u00e9ter le code de la fonction <code>binaire</code>.</p> <pre><code>def binaire(a):\n    '''convertit un nombre entier a en sa representation\n    binaire sous forme de chaine de caract\u00e8res.'''\n    if a == 0:\n        return ...\n    bin_a = ...\n    while ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</code></pre> <p>Exemples : <pre><code>&gt;&gt;&gt; binaire(83)\n'1010011'\n&gt;&gt;&gt; binaire(127)\n'1111111'\n&gt;&gt;&gt; binaire(0)\n'0'\n</code></pre></p> <pre><code>def binaire(a):\n    '''convertit un nombre entier a en sa representation \n    binaire sous forme de chaine de caract\u00e8res.'''\n    if a == 0:\n        return '0' \n    bin_a = '' \n    while a != 0 : \n        bin_a = str(a % 2) + bin_a \n        a = a // 2\n    return bin_a\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-16","title":"\u25b6 Sujet 16","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-161","title":"Exercice 16.1","text":"<p>Exercice 16.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>ecriture_binaire_entier_positif</code> qui prend en param\u00e8tre un entier positif <code>n</code> et renvoie une une chaine de caract\u00e8re correspondant \u00e0 l\u2018\u00e9criture binaire de <code>n</code>.</p> <p>On rappelle que :</p> <ul> <li>l\u2019\u00e9criture binaire de 25 est 11001 car \\(25 = 1 \\times 2^4 + 1 \\times 2^3 + 0 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0\\) ;</li> <li><code>n % 2</code> vaut 0 ou 1 selon que <code>n</code> est pair ou impair ;</li> <li><code>n // 2</code>  donne le quotient de la division euclidienne de <code>n</code> par 2.</li> </ul> <p>Il est interdit dans cet exercice d\u2019utiliser la fonction <code>bin</code> de Python.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; 5 % 2\n1\n&gt;&gt;&gt; 5 // 2\n2\n&gt;&gt;&gt; ecriture_binaire_entier_positif(0)\n'0'\n&gt;&gt;&gt; ecriture_binaire_entier_positif(2)\n'10'\n&gt;&gt;&gt; ecriture_binaire_entier_positif(105)\n'1101001'\n</code></pre> <pre><code>def ecriture_binaire_entier_positif(n):\n    if n == 0:\n        return '0' \n    bin_n = '' \n    while n != 0 : \n        bin_n = str(n % 2) + bin_n \n        n = n // 2\n    return bin_n\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-162","title":"Exercice 16.2","text":"<p>Exercice 16.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>tri_bulles</code> prend en param\u00e8tre une liste <code>tab</code> d\u2019entiers (type <code>list</code>) et le modifie pour le trier par ordre croissant.</p> <p>Le tri \u00e0 bulles est un tri en place qui commence par placer le plus grand \u00e9l\u00e9ment en derni\u00e8re position en parcourant le tableau de gauche \u00e0 droite et en \u00e9changeant au passage les \u00e9l\u00e9ments voisins mal ordonn\u00e9s (si la valeur de l\u2019\u00e9l\u00e9ment d\u2019indice <code>i</code> a une valeur strictement sup\u00e9rieure \u00e0 celle de l\u2019indice <code>i + 1</code>, ils sont \u00e9chang\u00e9s). Le tri place ensuite en avant-derni\u00e8re position le plus grand \u00e9l\u00e9ment du tableau priv\u00e9 de son dernier \u00e9l\u00e9ment en proc\u00e9dant encore \u00e0 des \u00e9changes d\u2019\u00e9l\u00e9ments voisins. Ce principe est r\u00e9p\u00e9t\u00e9 jusqu\u2019\u00e0 placer le minimum en premi\u00e8re position.</p> <p>Exemple : pour trier le tableau <code>[7, 9, 4, 3]</code> :</p> <ul> <li>premi\u00e8re \u00e9tape : 7 et 9 ne sont pas \u00e9chang\u00e9s, puis 9 et 4 sont \u00e9chang\u00e9s, puis 9 et 3 sont \u00e9chang\u00e9s, le tableau est alors <code>[7, 4, 3, 9]</code></li> <li>deuxi\u00e8me \u00e9tape : 7 et 4 sont \u00e9chang\u00e9s, puis 7 et 3 sont \u00e9chang\u00e9s, le tableau est alors <code>[4, 3, 7, 9]</code></li> <li>troisi\u00e8me \u00e9tape : 4 et 3 sont \u00e9chang\u00e9s, le tableau est alors <code>[3, 4, 7, 9]</code></li> </ul> <p>Compl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction tri_bulles.</p> <pre><code>def echange(tab, i, j):\n    '''Echange les \u00e9l\u00e9ments d'indice i et j dans le tableau tab.'''\n    temp = ... \n    tab[i] = ... \n    tab[j] = ... \n\ndef tri_bulles(tab):\n    '''Trie le tableau tab dans l'ordre croissant\n    par la m\u00e9thode du tri \u00e0 bulles.'''\n    n = len(tab)\n    for i in range(...): \n        for j in range(...): \n            if ... &gt; ...: \n                echange(tab, j, ...) \n</code></pre> <p>Exemples : <pre><code>&gt;&gt;&gt; tab = []\n&gt;&gt;&gt; tri_bulles(tab)\n&gt;&gt;&gt; tab\n[]\n&gt;&gt;&gt; tab2 = [9, 3, 7, 2, 3, 1, 6]\n&gt;&gt;&gt; tri_bulles(tab2)\n&gt;&gt;&gt; tab2\n[1, 2, 3, 3, 6, 7, 9]\n&gt;&gt;&gt; tab3 = [9, 7, 4, 3]\n&gt;&gt;&gt; tri_bulles(tab3)\n&gt;&gt;&gt; tab3\n[3, 4, 7, 9]\n</code></pre></p> <pre><code>def echange(tab, i, j):\n    '''Echange les \u00e9l\u00e9ments d'indice i et j dans le tableau tab.'''\n    temp = tab[i] \n    tab[i] = tab[j] \n    tab[j] = temp \n\ndef tri_bulles(tab):\n    '''Trie le tableau tab dans l'ordre croissant\n    par la m\u00e9thode du tri \u00e0 bulles.'''\n    n = len(tab)\n    for i in range(n-1, -1, -1): \n        for j in range(i): \n            if tab[j] &gt; tab[j+1]: \n                echange(tab, j, j+1) \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-17","title":"\u25b6 Sujet 17","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-171","title":"Exercice 17.1","text":"<p>Exercice 17.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction Python appel\u00e9e <code>nb_repetitions</code> qui prend en param\u00e8tres un \u00e9l\u00e9ment <code>elt</code> et un tableau <code>tab</code> (type <code>list</code>) et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans le tableau.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; nb_repetitions(5, [2, 5, 3, 5, 6, 9, 5])\n3\n&gt;&gt;&gt; nb_repetitions('A', ['B', 'A', 'B', 'A', 'R'])\n2\n&gt;&gt;&gt; nb_repetitions(12, [1, 3, 7, 21, 36, 44])\n0\n</code></pre></p> <pre><code>def nb_repetitions(elt, tab):\n    nb = 0\n    for element in tab:\n        if element == elt:\n            nb += 1\n    return nb\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-172","title":"Exercice 17.2","text":"<p>Exercice 17.2</p> \u00c9nonc\u00e9Correction <p>Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide des divisions successives comme illustr\u00e9 ici :</p> <p></p> <p>Voici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de convertir un nombre entier positif en binaire :</p> <p>Compl\u00e9ter la fonction <code>binaire</code></p> <p><pre><code>def binaire(a):\n    '''convertit un nombre entier a en sa representation \n    binaire sous forme de chaine de caract\u00e8res.'''\n    if a == 0:\n        return '0'\n    bin_a = ... \n    while ...: \n        bin_a = ... + bin_a \n        a = ... \n    return bin_a\n</code></pre> .</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; binaire(0)\n'0'\n&gt;&gt;&gt; binaire(77)\n'1001101'\n</code></pre> <pre><code>def binaire(a):\n    '''convertit un nombre entier a en sa representation \n    binaire sous forme de chaine de caract\u00e8res.'''\n    if a == 0:\n        return '0' \n    bin_a = '' \n    while a != 0 : \n        bin_a = str(a % 2) + bin_a \n        a = a // 2\n    return bin_a\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-18","title":"\u25b6 Sujet 18","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-181","title":"Exercice 18.1","text":"<p>Exercice 18.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers relatifs <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres.</p> <p>Les seules op\u00e9rations arithm\u00e9tiques autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>Exemples : <pre><code>&gt;&gt;&gt; multiplication(3,5)\n15\n&gt;&gt;&gt; multiplication(-4,-8)\n32\n&gt;&gt;&gt; multiplication(-2,6)\n-12\n&gt;&gt;&gt; multiplication(-2,0)\n0\n</code></pre></p> <pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-182","title":"Exercice 18.2","text":"<p>Exercice 18.2</p> \u00c9nonc\u00e9Correction <p>Soit <code>tab</code> un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et <code>n</code> un entier.</p> <p>La fonction <code>chercher</code> ci-dessous doit renvoyer un indice o\u00f9 la valeur <code>n</code> appara\u00eet dans <code>tab</code> si cette valeur y figure et <code>None</code> sinon. </p> <p>Les param\u00e8tres de la fonction sont :</p> <ul> <li><code>tab</code>, le tableau dans lequel s'effectue la recherche ;</li> <li><code>x</code>, l'entier \u00e0 chercher dans le tableau ;</li> <li><code>i</code>, l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ;</li> <li><code>j</code>, l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche.</li> </ul> <p>L\u2019algorithme demand\u00e9 est une recherche dichotomique r\u00e9cursive.</p> <p>Recopier et compl\u00e9ter le code de la fonction <code>chercher</code> suivante :</p> <pre><code>def chercher(tab, x, i, j):\n    '''Renvoie l'indice de x dans tab, si x est dans tab, \n    None sinon.\n    On suppose que tab est tri\u00e9 dans l'ordre croissant.'''\n    if i &gt; j:\n        return None\n    m = (i + j) // ... \n    if ... &lt; x: \n        return chercher(tab, x, ... , ...) \n    elif tab[m] &gt; x:\n        return chercher(tab, x, ... , ...) \n    else:\n        return ... \n</code></pre> <p>Exemples : <pre><code>&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 10)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 5)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 9, 0, 5)\n4\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 6, 0, 5)\n2\n</code></pre></p> <pre><code>def chercher(tab, x, i, j):\n    '''Renvoie l'indice de x dans tab, si x est dans tab, \n    None sinon.\n    On suppose que tab est tri\u00e9 dans l'ordre croissant.'''\n    if i &gt; j:\n        return None\n    m = (i + j) // 2 \n    if tab[m] &lt; x: \n        return chercher(tab, x, m+1 , j) \n    elif tab[m] &gt; x:\n        return chercher(tab, x, i , m-1) \n    else:\n        return m \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-19","title":"\u25b6 Sujet 19","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-191","title":"Exercice 19.1","text":"<p>Exercice 19.1</p> \u00c9nonc\u00e9Correction <p>On rappelle que :</p> <ul> <li>le nombre \\(a^n\\) est le nombre \\(a \\times a \\times a \\times \\dots \\times a\\), o\u00f9 le facteur \\(a\\) appara\u00eet \\(n\\) fois,</li> <li>en langage Python, l\u2019instruction <code>t[-1]</code> permet d\u2019acc\u00e9der au dernier \u00e9l\u00e9ment du tableau <code>t</code>.</li> </ul> <p>Dans cet exercice, l\u2019op\u00e9rateur <code>**</code>  et la fonction <code>pow</code> ne sont pas autoris\u00e9s.</p> <p>Programmer en langage Python une fonction <code>liste_puissances</code> qui prend en arguments un nombre entier <code>a</code>, un entier strictement positif <code>n</code> et qui renvoie la liste de ses puissances \\(\\rm{[a^1, a^2, ..., a^n]}\\).</p> <p>Programmer \u00e9galement une fonction <code>liste_puisssances_borne</code> qui prend en arguments un nombre entier <code>a</code> sup\u00e9rieur ou \u00e9gal \u00e0 2 et un entier <code>borne</code>, et qui renvoie la liste de ses puissances, \u00e0 l\u2019exclusion de \\(\\rm{a^0}\\), strictement inf\u00e9rieures \u00e0 <code>borne</code>.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; liste_puissances(3, 5)\n[3, 9, 27, 81, 243]\n&gt;&gt;&gt; liste_puissances(-2, 4)\n[-2, 4, -8, 16]\n&gt;&gt;&gt; liste_puissances_borne(2, 16)\n[2, 4, 8]\n&gt;&gt;&gt; liste_puissances_borne(2, 17)\n[2, 4, 8, 16]\n&gt;&gt;&gt; liste_puissances_borne(5, 5)\n[]\n</code></pre> <pre><code>def liste_puissances(a,n):\n    puissances = [a]\n    for i in range(n-1):\n        puissances.append(puissances[-1] * a)\n    return puissances\n\ndef liste_puissances_borne(a, borne):\n    lst = []\n    val = a\n    while val &lt; borne:\n        lst.append(val)\n        val = val * a\n    return lst\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-192","title":"Exercice 19.2","text":"<p>Exercice 19.2</p> \u00c9nonc\u00e9Correction <p>On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous :</p> A B C D E F G H I J K L M 1 2 3 4 5 6 7 8 9 10 11 12 13 N O P Q R S T U V W X Y Z 14 15 16 17 18 19 20 21 22 23 24 25 26 <p>Cette table de correspondance est stock\u00e9e dans un dictionnaire <code>dico</code> o\u00f9 les cl\u00e9s sont les lettres de l\u2019alphabet et les valeurs les codes correspondants.</p> <pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n</code></pre> <p>Pour un mot donn\u00e9, on d\u00e9termine d\u2019une part son code alphab\u00e9tique concat\u00e9n\u00e9, obtenu par la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, son code additionn\u00e9, qui est la somme des codes de chacun de ses caract\u00e8res.</p> <p>Par ailleurs, on dit que ce mot est \u00ab parfait \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.</p> <p>Exemples :</p> <ul> <li> <p>Pour le mot <code>\"PAUL\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1612112'</code>, soit l\u2019entier 1 612 112. Son code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50. 50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot <code>\"PAUL\"</code> n\u2019est pas parfait.</p> </li> <li> <p>Pour le mot <code>\"ALAIN\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1121914'</code>, soit l\u2019entier 1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37. 37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot <code>\"ALAIN\"</code> est parfait.</p> </li> </ul> <p>Compl\u00e9ter la fonction <code>codes_parfait</code> situ\u00e9e \u00e0 la page suivante et qui prend en param\u00e8tre un mot en majuscule et renvoie un triplet constitu\u00e9 du code additionn\u00e9, du code concat\u00e9n\u00e9 et d\u2019un bool\u00e9en indiquant si le mot est parfait ou non.</p> <p>On rappelle que pour tester si un entier <code>a</code> divise un entier <code>b</code>, on utilise l\u2019op\u00e9rateur modulo <code>b % a</code> qui renvoie le reste de la division euclidienne de <code>b</code> par <code>a</code>. Si<code>b % a</code> vaut <code>0</code>, alors <code>a</code> divise <code>b</code>.</p> <pre><code>def codes_parfait(mot):\n    \"\"\"Renvoie un triplet \n    (code_additionne, code_concatene, mot_est_parfait) o\u00f9 :\n    - code_additionne est la somme des codes des lettres du mot ;\n    - code_concatene est le code des lettres du mot concat\u00e9n\u00e9es ;\n    - mot_est_parfait est un bool\u00e9en indiquant si le mot est parfait.\"\"\"\n    code_concatene = \"\"\n    code_additionne = ... \n    for c in mot:\n        code_concatene = code_concatene + ... \n        code_additionne = code_additionne + ... \n    code_concatene = int(code_concatene)\n    mot_est_parfait = ... \n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre> <p>Exemples : <pre><code>&gt;&gt;&gt; codes_parfait(\"PAUL\")\n(50, 1612112, False)\n&gt;&gt;&gt; codes_parfait(\"ALAIN\")\n(37, 1121914, True)\n</code></pre></p> <pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\n\ndef codes_parfait(mot):\n    # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_concatene = \"\"\n    code_additionne = 0\n    for c in mot:\n        code_concatene = code_concatene + str(dico[c])\n        code_additionne = code_additionne + dico[c]\n    code_concatene = int(code_concatene)\n    mot_est_parfait = code_concatene % code_additionne == 0\n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-20","title":"\u25b6 Sujet 20","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-201","title":"Exercice 20.1","text":"<p>Exercice 20.1</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice les tableaux sont repr\u00e9sent\u00e9s par des listes Python (type <code>list</code>).</p> <p>\u00c9crire en python deux fonctions :</p> <ul> <li><code>lancer</code> de param\u00e8tre <code>n</code>, un entier positif, qui renvoie un tableau de <code>n</code> entiers obtenus al\u00e9atoirement entre 1 et 6 (1 et 6 inclus) ;</li> <li><code>paire_6</code> de param\u00e8tre <code>tab</code>, un tableau de n entiers compris entre 1 et 6 et qui renvoie un bool\u00e9en \u00e9gal \u00e0 <code>True</code> si le nombre de 6 est sup\u00e9rieur ou \u00e9gal \u00e0 2, <code>False</code> sinon.</li> </ul> <p>On pourra utiliser la fonction <code>randint(a,b)</code> du module <code>random</code> pour laquelle la documentation officielle est la suivante :</p> <p><code>random.randint(a, b)</code> <code>Renvoie un entier al\u00e9atoire N tel que a &lt;=N &lt;= b.</code></p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; lancer1 = lancer(5)\n[5, 6, 6, 2, 2]\n&gt;&gt;&gt; paire_6(lancer1)\nTrue\n&gt;&gt;&gt; lancer2 = lancer(5)\n[6, 5, 1, 6, 6]\n&gt;&gt;&gt; paire_6(lancer2)\nTrue\n&gt;&gt;&gt; lancer3 = lancer(3)\n[2, 2, 6]\n&gt;&gt;&gt; paire_6(lancer3)\nFalse\n&gt;&gt;&gt; lancer4 = lancer(0)\n[]\n&gt;&gt;&gt; paire_6(lancer4)\nFalse\n</code></pre> <pre><code>from random import randint\n\ndef lancer(n):\n    return [randint(1, 6) for _ in range(n)]\n\ndef paire_6(tab):\n    nb = 0\n    for elt in tab:\n        if elt == 6:\n            nb += 1\n    if nb &gt;= 2 :\n        return True\n    else:\n        return False\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-202","title":"Exercice 20.2","text":"<p>Exercice 20.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques.</p> <p>La largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le nombre de sous-listes.</p> <p>Chaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est un entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel.</p> <p>Le n\u00e9gatif d\u2019une image est l\u2019image constitu\u00e9e des pixels <code>x_n</code> tels que <code>x_n + x_i = 255</code> o\u00f9 <code>x_i</code> est le pixel correspondant de l\u2019image initiale.</p> <p>Compl\u00e9ter le programme suivant : <pre><code>def nombre_lignes(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return ... \n\ndef nombre_colonnes(image):\n    '''renvoie la largeur de l'image'''\n    return ... \n\ndef negatif(image):\n    '''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n    # on cree une image de 0 aux memes dimensions \n    # que le parametre image\n    nouvelle_image = [[0 for k in range(nombre_colonnes(image))]\n         for i in range(nombre_lignes(image))]\n\n    for i in range(nombre_lignes(image)):\n        for j in range(...): \n            nouvelle_image[i][j] = ... \n    return nouvelle_image\n\ndef binaire(image, seuil):\n    '''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil et 1 sinon'''\n    nouvelle_image = [[0] * nombre_colonnes(image)\n                      for i in range(nombre_lignes(image))]\n\n    for i in range(nombre_lignes(image)):\n        for j in range(...): \n            if image[i][j] &lt; ... : \n                nouvelle_image[i][j] = ... \n            else:\n                nouvelle_image[i][j] = ... \n    return nouvelle_image\n</code></pre></p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; img=[[20, 34, 254, 145, 6], [23, 124, 237, 225, 69],\n[197, 174, 207, 25, 87], [255, 0, 24, 197, 189]]\n&gt;&gt;&gt; nombre_lignes(img)\n4\n&gt;&gt;&gt; nombre_colonnes(img)\n5\n&gt;&gt;&gt; negatif(img)\n[[235, 221, 1, 110, 249], [232, 131, 18, 30, 186],\n[58, 81, 48, 230, 168], [0, 255, 231, 58, 66]]\n&gt;&gt;&gt; binaire(img,120)\n[[0, 0, 1, 1, 0],[0, 1, 1, 1, 0],[1, 1, 1, 0, 0],[1, 0, 0, 1, 1]]\n</code></pre> <pre><code>def nombre_lignes(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return len(image) \n\ndef nombre_colonnes(image):\n    '''renvoie la largeur de l'image'''\n    return len(image[0]) \n\ndef negatif(image):\n    '''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n    # on cree une image de 0 aux memes dimensions \n    # que le parametre image\n    nouvelle_image = [[0 for k in range(nombre_colonnes(image))]\n         for i in range(nombre_lignes(image))]\n\n    for i in range(nombre_lignes(image)):\n        for j in range(nombre_colonnes(image)): \n            nouvelle_image[i][j] = 255 - image[i][j] \n    return nouvelle_image\n\ndef binaire(image, seuil):\n    '''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil et 1 sinon'''\n    nouvelle_image = [[0] * nombre_colonnes(image)\n                      for i in range(nombre_lignes(image))]\n\n    for i in range(nombre_lignes(image)):\n        for j in range(nombre_colonnes(image)): \n            if image[i][j] &lt; seuil : \n                nouvelle_image[i][j] = 0 \n            else:\n                nouvelle_image[i][j] = 1 \n    return nouvelle_image\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-21","title":"\u25b6 Sujet 21","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-211","title":"Exercice 21.1","text":"<p>Exercice 21.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche_motif</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>motif</code> non vide et une cha\u00eene de caract\u00e8res <code>texte</code> et qui renvoie la liste des positions de <code>motif</code> dans <code>texte</code>. Si <code>motif</code> n\u2019appara\u00eet pas, la fonction renvoie une liste vide.</p> <p>Exemples:</p> <pre><code>&gt;&gt;&gt; recherche_motif(\"ab\", \"\")\n[]\n&gt;&gt;&gt; recherche_motif(\"ab\", \"cdcdcdcd\")\n[]\n&gt;&gt;&gt; recherche_motif(\"ab\", \"abracadabra\")\n[0, 7]\n&gt;&gt;&gt; recherche_motif(\"ab\", \"abracadabraab\")\n[0, 7, 11]\n</code></pre> <pre><code>def recherche_motif(motif, texte):\n    sol = []\n    i = 0\n    while i &lt;= len(texte) - len(motif):\n        j = 0\n        while j &lt; len(motif) and motif[j] == texte[j+i]:\n            j += 1\n        if j == len(motif):\n            sol.append(i)\n        i += 1\n    return sol\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-212","title":"Exercice 21.2","text":"<p>Exercice 21.2</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, on consid\u00e8re un graphe non orient\u00e9 repr\u00e9sent\u00e9 sous forme de listes d\u2019adjacence. On suppose que les sommets sont num\u00e9rot\u00e9s de 0 \u00e0 n-1.</p> <p>Ainsi, le graphe suivant:</p> <p></p> <p>sera repr\u00e9sent\u00e9 par la liste d\u2019adjacence suivante:</p> <p><code>adj = [[1, 2], [0, 3], [0], [1], [5], [4]]</code></p> <p>On souhaite d\u00e9terminer les sommets accessibles depuis un sommet donn\u00e9 dans le graphe. Pour cela, on va proc\u00e9der \u00e0 un parcours en profondeur du graphe.</p> <p>Compl\u00e9ter la fonction suivante.</p> <pre><code>def parcours(adj, x, acc):\n    '''R\u00e9alise un parcours en profondeur r\u00e9cursif\n    du graphe donn\u00e9 par les listes d'adjacence adj \n    depuis le sommet x en accumulant les sommets\n    rencontr\u00e9s dans acc'''\n    if x ...: \n        acc.append(x)\n        for y in ...: \n            parcours(adj, ...) \n\ndef accessibles(adj, x):\n    '''Renvoie la liste des sommets accessibles dans le\n    graphe donn\u00e9 par les listes d'adjacence adj depuis\n    le sommet x.'''\n    acc = []\n    parcours(adj, ...) \n    return acc\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; accessibles([[1, 2], [0], [0, 3], [1], [5], [4]], 0)\n[0, 1, 2, 3]\n&gt;&gt;&gt; accessibles([[1, 2], [0], [0, 3], [1], [5], [4]], 4)\n[4, 5]\n</code></pre> <pre><code>adj = [[1, 2], [0, 3], [0], [1], [5], [4]]\n\ndef parcours(adj, x, acc):\n    '''R\u00e9alise un parcours en profondeur r\u00e9cursif\n    du graphe donn\u00e9 par les listes d'adjacence adj\n    depuis le sommet x en accumulant les sommets\n    rencontr\u00e9s dans acc'''\n    if x not in acc:\n        acc.append(x)\n        for y in adj[x]:\n            parcours(adj, y, acc)\n\ndef accessibles(adj, x):\n    '''Renvoie la liste des sommets accessibles dans le\n    graphe donn\u00e9 par les listes d'adjacence adj depuis\n    le sommet x.'''\n    acc = []\n    parcours(adj, x, acc)\n    return acc\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-22","title":"\u25b6 Sujet 22","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-221","title":"Exercice 22.1","text":"<p>Exercice 22.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche_indices_classement</code> qui prend en param\u00e8tres un entier <code>elt</code> et un tableau d\u2019entiers <code>tab</code>, et qui renvoie trois listes :</p> <ul> <li>la premi\u00e8re liste contient les indices des valeurs du tableau <code>tab</code> strictement inf\u00e9rieures \u00e0 <code>elt</code> ;</li> <li>la deuxi\u00e8me liste contient les indices des valeurs du tableau <code>tab</code> \u00e9gales \u00e0 <code>elt</code> ;</li> <li>la troisi\u00e8me liste contient les indices des valeurs du tableau <code>tab</code> strictement sup\u00e9rieures \u00e0 <code>elt</code>.</li> </ul> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; recherche_indices_classement(3, [1, 3, 4, 2, 4, 6, 3, 0])\n([0, 3, 7], [1, 6], [2, 4, 5])\n&gt;&gt;&gt; recherche_indices_classement(3, [1, 4, 2, 4, 6, 0])\n([0, 2, 5], [], [1, 3, 4])\n&gt;&gt;&gt;recherche_indices_classement(3, [1, 1, 1, 1])\n([0, 1, 2, 3], [], [])\n&gt;&gt;&gt; recherche_indices_classement(3, [])\n([], [], [])\n</code></pre> <pre><code>def recherche_indices_classement(elt, tab):\n    ind_inf = []\n    ind_egal = []\n    ind_sup = [] \n    for i in range(len(tab)):\n        if tab[i] &lt; elt:\n            ind_inf.append(i)\n        elif tab[i] &gt; elt:\n            ind_sup.append(i)\n        else:\n            ind_egal.append(i)\n    return (ind_inf, ind_egal, ind_sup)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-222","title":"Exercice 22.2","text":"<p>Exercice 22.2</p> \u00c9nonc\u00e9Correction <p>Une professeure de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un dictionnaire :</p> <ul> <li>les clefs sont les noms des \u00e9l\u00e8ves ;</li> <li>les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves sous forme de cha\u00eene de caract\u00e8res et les valeurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients dans une liste.</li> </ul> <p>Avec :</p> <pre><code>resultats = {'Dupont': {\n                        'DS1': [15.5, 4],\n                        'DM1': [14.5, 1],\n                        'DS2': [13, 4],\n                        'PROJET1': [16, 3],\n                        'DS3': [14, 4]\n                    },\n            'Durand': {\n                        'DS1': [6 , 4],\n                        'DS2': [8, 4],\n                        'PROJET1': [9, 3],\n                        'IE1': [7, 2],\n                        'DS3': [12, 4]\n                    }\n            }\n</code></pre> <p>L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4.</p> <p>Le professeur cr\u00e9e une fonction <code>moyenne</code> qui prend en param\u00e8tre le nom d\u2019un de ses \u00e9l\u00e8ves et renvoie sa moyenne arrondie au dixi\u00e8me. Si l\u2019\u00e9l\u00e8ve n\u2019a pas de notes, on consid\u00e8re que sa moyenne est nulle. Si le nom donn\u00e9 n\u2019est pas dans les r\u00e9sultats, la fonction renvoie <code>None</code>.</p> <p>Compl\u00e9ter le code de la professeure ci-dessous : <pre><code>def moyenne(nom, resultats):\n    '''Renvoie la moyenne de l'\u00e9l\u00e8ve nom, selon le dictionnaire \n    resultats. Si nom n'est pas dans le dictionnaire, \n    la fonction renvoie None.'''\n    if nom in ...: \n        notes = resultats[nom]\n        if ...: # pas de notes \n            return 0\n        total_points = ... \n        total_coefficients = ... \n        for ...  in notes.values(): \n            note, coefficient = valeurs\n            total_points = total_points + ... * coefficient \n            ... = ... + coefficient \n        return round( ... / total_coefficients, 1 ) \n    else:\n        return None\n</code></pre></p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; moyenne(\"Dupont\", resultats)\n14.5\n&gt;&gt;&gt; moyenne(\"Durand\", resultats)\n8.5\n</code></pre> <pre><code>def moyenne(nom, resultats):\n    '''Renvoie la moyenne de l'\u00e9l\u00e8ve nom, selon le dictionnaire \n    resultats. Si nom n'est pas dans le dictionnaire, \n    la fonction renvoie None.'''\n    if nom in resultats: \n        notes = resultats[nom]\n        if notes == {}: # pas de notes \n            return 0\n        total_points = 0 \n        total_coefficients = 0 \n        for valeurs in notes.values(): \n            note, coefficient = valeurs\n            total_points = total_points + note * coefficient \n            total_coefficients = total_coefficients + coefficient \n        return round( total_points / total_coefficients, 1 ) \n    else:\n        return None\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-23","title":"\u25b6 Sujet 23","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-231","title":"Exercice 23.1","text":"<p>Exercice 23.1</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, on consid\u00e8re des arbres binaires de recherche qui sont :</p> <ul> <li>soit l\u2019arbre vide identifi\u00e9 par <code>None</code> ;</li> <li>soit un n\u0153ud, contenant une cl\u00e9 et deux sous-arbres gauche et droit et repr\u00e9sent\u00e9 par un triplet <code>(g, v, d)</code> o\u00f9 <code>g</code> et <code>d</code> sont les sous-arbres gauche et droit et <code>v</code> la cl\u00e9.</li> </ul> <p></p> <p>Ainsi, l\u2019arbre binaire de recherche <code>abr1</code> ci- contre est cr\u00e9\u00e9 par le code python ci- dessous</p> <pre><code>n0 = (None, 0, None)\nn3 = (None, 3, None)\nn2 = (None, 2, n3)\nabr1 = (n0, 1, n2)\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>insertion_abr(a, cle)</code> qui prend en param\u00e8tres une cl\u00e9 <code>cle</code> et un arbre binaire de recherche <code>a</code>, et qui renvoie un arbre binaire de recherche dans lequel <code>cle</code> a \u00e9t\u00e9 ins\u00e9r\u00e9e. Dans le cas o\u00f9 <code>cle</code> est d\u00e9j\u00e0 pr\u00e9sente dans <code>a</code>, la fonction renvoie l\u2019arbre a inchang\u00e9.</p> <p>R\u00e9sultats \u00e0 obtenir :</p> <pre><code>&gt;&gt;&gt; insertion_abr(abr1, 4)\n((None,0,None),1,(None,2,(None,3,(None,4,None))))\n&gt;&gt;&gt; insertion_abr(abr1, -5)\n(((None,-5,None),0,None),1,(None,2,(None,3,None)))\n&gt;&gt;&gt; insertion_abr(abr1, 2)\n((None,0,None),1,(None,2,(None,3,None)))\n</code></pre> <pre><code>def insertion_abr(a, cle): \n    if a is None:\n        return (None, cle, None)\n    elif cle &gt; a[1]:\n        return (a[0], a[1], insertion_abr(a[2], cle))\n    elif cle &lt; a[1]:\n        return (insertion_abr(a[0], cle), a[1], a[2])\n    return a\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-232","title":"Exercice 23.2","text":"<p>Exercice 23.2</p> \u00c9nonc\u00e9Correction <p>On dispose d\u2019un ensemble d\u2019objets dont on conna\u00eet, pour chacun, la masse. On souhaite ranger l\u2019ensemble de ces objets dans des boites identiques de telle mani\u00e8re que la somme des masses des objets contenus dans une bo\u00eete ne d\u00e9passe pas la capacit\u00e9 <code>c</code> de la bo\u00eete. On souhaite utiliser le moins de bo\u00eetes possibles pour ranger cet ensemble d\u2019objets.</p> <p>Pour r\u00e9soudre ce probl\u00e8me, on utilisera un algorithme glouton consistant \u00e0 placer chacun des objets dans la premi\u00e8re bo\u00eete o\u00f9 cela est possible.</p> <p>Par exemple, pour ranger dans des bo\u00eetes de capacit\u00e9 <code>c = 5</code> un ensemble de trois objets dont les masses sont repr\u00e9sent\u00e9es en Python par la liste <code>[1, 5, 2]</code>, on proc\u00e8de de la fa\u00e7on suivante :</p> <ul> <li>Le premier objet, de masse 1, va dans une premi\u00e8re boite.</li> <li>Le deuxi\u00e8me objet, de masse 5, ne peut pas aller dans la m\u00eame boite que le premier objet car cela d\u00e9passerait la capacit\u00e9 de la boite. On place donc cet objet dans une deuxi\u00e8me bo\u00eete.</li> <li>Le troisi\u00e8me objet, de masse 2, va dans la premi\u00e8re bo\u00eete.</li> </ul> <p>On a donc utilis\u00e9 deux bo\u00eetes de capacit\u00e9 <code>c = 5</code> pour ranger les 3 objets.</p> <p>Compl\u00e9ter la fonction Python <code>empaqueter(liste_masses, c)</code> suivante pour qu\u2019elle renvoie le nombre de bo\u00eetes de capacit\u00e9 <code>c</code> n\u00e9cessaires pour empaqueter un ensemble d\u2019objets dont les masses sont contenues dans la liste <code>liste_masses</code>.</p> <pre><code>def empaqueter(liste_masses, c):\n    \"\"\"Renvoie le nombre minimal de bo\u00eetes n\u00e9cessaires pour\n    empaqueter les objets de la liste liste_masses, sachant\n    que chaque bo\u00eete peut contenir au maximum c kilogrammes\"\"\"\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [ 0 for _ in range(n) ]\n    for masse in ...: \n        i = 0\n        while i &lt; nb_boites and boites[i] + ... &gt; c: \n            i = i + 1\n        if i == nb_boites:\n            ...\n        boites[i] = ... \n    return ... \n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; empaqueter([1, 2, 3, 4, 5], 10)\n2\n&gt;&gt;&gt; empaqueter([1, 2, 3, 4, 5], 5)\n4\n&gt;&gt;&gt; empaqueter([7, 6, 3, 4, 8, 5, 9, 2], 11)\n5\n</code></pre> <pre><code>def empaqueter(liste_masses, c):\n    \"\"\"Renvoie le nombre minimal de bo\u00eetes n\u00e9cessaires pour\n    empaqueter les objets de la liste liste_masses, sachant\n    que chaque bo\u00eete peut contenir au maximum c kilogrammes\"\"\"\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [ 0 for _ in range(n) ]\n    for masse in liste_masses: \n        i = 0\n        while i &lt; nb_boites and boites[i] + masse &gt; c: \n            i = i + 1\n        if i == nb_boites:\n            nb_boites = nb_boites + 1\n        boites[i] = boites[i] + masse \n    return nb_boites\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-24","title":"\u25b6 Sujet 24","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-241","title":"Exercice 24.1","text":"<p>Exercice 24.1</p> \u00c9nonc\u00e9Correction <p>Un arbre binaire est soit vide, repr\u00e9sent\u00e9 en Python par la valeur <code>None</code>, soit un n\u0153ud repr\u00e9sent\u00e9 par un triplet <code>(g, x, d)</code> o\u00f9 <code>x</code> est l\u2019\u00e9tiquette du n\u0153ud et <code>g</code> et <code>d</code> sont les sous-arbres gauche et droit.</p> <p>On souhaite \u00e9crire une fonction <code>parcours_largeur</code> qui prend en param\u00e8tre un arbre binaire et qui renvoie la liste des \u00e9tiquettes des n\u0153uds de l\u2019arbre parcourus en largeur.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; arbre = ( ( (None, 1, None), 2, (None, 3, None) ), 4, ( (None, 5, None), 6, (None, 7, None) ) )\n&gt;&gt;&gt; parcours_largeur(arbre)\n[4, 2, 6, 1, 3, 5, 7]\n</code></pre> <pre><code>def parcours_largeur(arbre):\n    parcours = []\n    file = [arbre]\n    while file != []:\n        a = file.pop(0)\n        parcours.append(a[1])\n        if a[0] != None:\n            file.append(a[0])\n        if a[2] != None:\n            file.append(a[2])\n    return parcours\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-242","title":"Exercice 24.2","text":"<p>Exercice 24.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re un tableau non vide de nombre entiers, positifs ou n\u00e9gatifs, et on souhaite d\u00e9terminer la plus grande somme possible de ses \u00e9l\u00e9ments cons\u00e9cutifs.</p> <p>Par exemple, dans le tableau <code>[1, -2, 3, 10, -4, 7, 2, -5]</code>, la plus grande somme est 18 obtenue en additionnant les \u00e9l\u00e9ments 3, 10, -4, 7, 2.</p> <p>Pour cela, on va r\u00e9soudre le probl\u00e8me par programmation dynamique. Si on note <code>tab</code> le tableau consid\u00e9r\u00e9 et <code>i</code> un indice dans ce tableau, on se ram\u00e8ne \u00e0 un probl\u00e8me plus simple : d\u00e9terminer la plus grande somme possible de ses \u00e9l\u00e9ments cons\u00e9cutifs se terminant \u00e0 l\u2019indice <code>i</code>.</p> <p>Si on connait la plus grande somme possible de ses \u00e9l\u00e9ments cons\u00e9cutifs se terminant \u00e0 l\u2019indice <code>i-1</code>, on peut d\u00e9terminer la plus grande somme possible de ses \u00e9l\u00e9ments cons\u00e9cutifs se terminant \u00e0 l\u2019indice <code>i</code> :</p> <ul> <li>soit on obtient une plus grande somme en ajoutant <code>tab[i]</code> \u00e0 cette somme pr\u00e9c\u00e9dente ;</li> <li>soit on commence une nouvelle somme \u00e0 partir de <code>tab[i]</code>.</li> </ul> <p>Remarque : les sommes consid\u00e9r\u00e9es contiennent toujours au moins un terme.</p> <p>Compl\u00e9ter la fonction <code>somme_max</code> ci-dessous qui r\u00e9alise cet algorithme.</p> <pre><code>def somme_max(tab):\n    n = len(tab)\n    sommes_max = [0]*n\n    sommes_max[0] = tab[0]\n    # on calcule la plus grande somme se terminant en i\n    for i in range(1,n):\n        if ... + ... &gt; ...: \n            sommes_max[i] = ... \n        else:\n            sommes_max[i] = ... \n    # on en d\u00e9duit la plus grande somme de celles-ci\n    maximum = 0\n    for i in range(1, n):\n        if ... &gt; ...: \n            maximum = i\n\n    return sommes_max[...] \n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; somme_max([1, 2, 3, 4, 5])\n15\n&gt;&gt; somme_max([1, 2, -3, 4, 5])\n9\n&gt;&gt;&gt; somme_max([1, 2, -2, 4, 5])\n10\n&gt;&gt;&gt; somme_max([1, -2, 3, 10, -4, 7, 2, -5])\n18\n</code></pre> <pre><code>def somme_max(tab):\n    n = len(tab)\n    sommes_max = [0]*n\n    sommes_max[0] = tab[0]\n    # on calcule la plus grande somme se terminant en i\n    for i in range(1,n):\n        if sommes_max[i-1] + tab[i] &gt; tab[i]:\n            sommes_max[i] = sommes_max[i-1] + tab[i]\n        else:\n            sommes_max[i] = tab[i]\n    # on en d\u00e9duit la plus grande somme de celles-ci\n    maximum = 0\n    for i in range(1, n):\n        if sommes_max[i]  &gt; sommes_max[maximum]:\n            maximum = i\n    return sommes_max[maximum]\n</code></pre> <p>Merci \u00e0 N. Maier pour la correction</p>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-25","title":"\u25b6 Sujet 25","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-251","title":"Exercice 25.1","text":"<p>Exercice 25.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche_min</code> qui prend en param\u00e8tre un tableau de nombres <code>tab</code>, et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; recherche_min([5])\n0\n&gt;&gt;&gt; recherche_min([2, 4, 1])\n2\n&gt;&gt;&gt; recherche_min([5, 3, 2, 2, 4])\n2\n&gt;&gt;&gt; recherche_min([-1, -2, -3, -3])\n2\n</code></pre></p> <pre><code>def recherche_min(tab):\n    indice_min = 0\n    for i in range(len(tab)):\n        if tab[i] &lt; tab[indice_min]:\n            indice_min = i\n    return indice_min\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-252","title":"Exercice 25.2","text":"<p>Exercice 25.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la fonction <code>separe</code> ci-dessous qui prend en argument un tableau <code>tab</code> dont les \u00e9l\u00e9ments sont des <code>0</code> et des <code>1</code> et qui s\u00e9pare les <code>0</code> des <code>1</code> en pla\u00e7ant les <code>0</code> en d\u00e9but de tableau et les <code>1</code> \u00e0 la suite.</p> <pre><code>def separe(tab):\n    '''Separe les 0 et les 1 dans le tableau tab'''\n    gauche = 0\n    droite = ... \n    while gauche &lt; droite:\n        if tab[gauche] == 0 :\n            gauche = ... \n        else :\n            tab[gauche] = ... \n            tab[droite] = ... \n            droite = ... \n    return tab\n</code></pre> <p>Compl\u00e9ter la fonction <code>separe</code> ci-dessus.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; separe([1, 0, 1, 0, 1, 0, 1, 0])\n[0, 0, 0, 0, 1, 1, 1, 1]\n&gt;&gt;&gt; separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0])\n[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre> <p>Description d\u2019\u00e9tapes effectu\u00e9es par la fonction separe sur le tableau ci-dessous, les caract\u00e8res <code>^</code> indiquent les cases point\u00e9es par les indices gauche et droite :</p> <pre><code>tab = [1, 0, 1, 0, 1, 0, 1, 0]\n       ^                    ^\n</code></pre> <ul> <li> <p>Etape 1 : on regarde la premi\u00e8re case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec la derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus la derni\u00e8re case en compte. <pre><code>tab = [0, 0, 1, 0, 1, 0, 1, 1]\n       ^                 ^\n</code></pre></p> </li> <li> <p>Etape 2 : on regarde \u00e0 nouveau la premi\u00e8re case, qui contient maintenant un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la premi\u00e8re case en compte. <pre><code>tab = [0, 0, 1, 0, 1, 0, 1, 1]\n          ^              ^\n</code></pre></p> </li> <li> <p>Etape 3 : on regarde la seconde case, qui contient un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la seconde case en compte. <pre><code>tab = [0, 0, 1, 0, 1, 0, 1, 1]\n             ^           ^\n</code></pre></p> </li> <li> <p>Etape 4 : on regarde la troisi\u00e8me case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec l\u2019avant-derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus l\u2019avant-derni\u00e8re case en compte. <pre><code>tab = [0, 0, 1, 0, 1, 0, 1, 1]\n             ^        ^\n</code></pre></p> </li> </ul> <p>Et ainsi de suite...</p> <p><code>tab = [0, 0, 0, 0, 1, 1, 1, 1]</code></p> <pre><code>def separe(tab):\n    '''Separe les 0 et les 1 dans le tableau tab'''\n    gauche = 0\n    droite = len(tab) - 1 \n    while gauche &lt; droite:\n        if tab[gauche] == 0 :\n            gauche = gauche + 1 \n        else :\n            tab[gauche] = tab[droite] \n            tab[droite] = 1 \n            droite = droite - 1 \n    return tab\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-26","title":"\u25b6 Sujet 26","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-261","title":"Exercice 26.1","text":"<p>Exercice 26.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>ajoute_dictionnaires</code> qui prend en param\u00e8tres deux dictionnaires <code>d1</code> et <code>d2</code> dont les cl\u00e9s sont des nombres et renvoie le dictionnaire <code>d</code> d\u00e9fini de la fa\u00e7on suivante :</p> <ul> <li>Les cl\u00e9s de <code>d</code> sont celles de <code>d1</code> et celles de <code>d2</code> r\u00e9unies.</li> <li>Si une cl\u00e9 est pr\u00e9sente dans les deux dictionnaires <code>d1</code> et <code>d2</code>, sa valeur associ\u00e9e dans le dictionnaire <code>d</code> est la somme de ses valeurs dans les dictionnaires <code>d1</code> et <code>d2</code>.</li> <li>Si une cl\u00e9 n\u2019est pr\u00e9sente que dans un des deux dictionnaires, sa valeur associ\u00e9e dans le dictionnaire <code>d</code> est la m\u00eame que sa valeur dans le dictionnaire o\u00f9 elle est pr\u00e9sente.</li> </ul> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {2: 9, 3: 11})\n{1: 5, 2: 16, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({}, {2: 9, 3: 11})\n{2: 9, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {})\n{1: 5, 2: 7}\n</code></pre> <pre><code>def ajoute_dictionnaires(d1, d2):\n    d = {}\n    for cle in d1:\n        d[cle] = d1[cle]\n    for cle in d2:\n        if cle in d:\n            d[cle] += d2[cle]\n        else:\n            d[cle] = d2[cle]\n    return d\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-262","title":"Exercice 26.2","text":"<p>Exercice 26.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re une piste carr\u00e9e qui contient 4 cases par c\u00f4t\u00e9. Les cases sont num\u00e9rot\u00e9es de 0 inclus \u00e0 12 exclu comme ci-dessous :</p> <p></p> <p>L\u2019objectif de l\u2019exercice est d\u2019impl\u00e9menter le jeu suivant :</p> <p>Au d\u00e9part, le joueur place son pion sur la case 0. A chaque coup, il lance un d\u00e9 \u00e9quilibr\u00e9 \u00e0 six faces et avance son pion d\u2019autant de cases que le nombre indiqu\u00e9 par le d\u00e9 (entre 1 et 6 inclus) dans le sens des aiguilles d\u2019une montre.</p> <p>Par exemple, s\u2019il obtient 2 au premier lancer, il pose son pion sur la case 2 puis s\u2019il obtient 6 au deuxi\u00e8me lancer, il le pose sur la case 8, puis s\u2019il obtient \u00e0 nouveau 6, il pose le pion sur la case 2.</p> <p>Le jeu se termine lorsque le joueur a pos\u00e9 son pion sur toutes les cases de la piste.</p> <p>Compl\u00e9ter la fonction <code>nombre_coups</code> ci-dessous de sorte qu\u2019elle renvoie le nombre de lancers al\u00e9atoires n\u00e9cessaires pour terminer le jeu.</p> <p>Proposer ensuite quelques tests pour en v\u00e9rifier le fonctionnement.</p> <pre><code>from random import randint\n\ndef nombre_coups():\n    '''Simule un jeu de plateau avec 12 cases et renvoie le nombre\n    minimal de coups pour visiter toutes les cases.'''\n    nombre_cases = 12\n    # indique si une case a \u00e9t\u00e9 vue\n    cases_vues = [ False ] * nombre_cases\n    nombre_cases_vues = 1\n    cases_vues[0] = True\n    case_en_cours = 0\n    n = ... \n    while ... &lt; ...: \n        x = randint(1, 6)\n        case_en_cours = (case_en_cours + ...) % ... \n        if ...: \n            cases_vues[case_en_cours] = True\n            nombre_cases_vues = ... \n        n = ... \n    return n\n</code></pre> <pre><code>from random import randint\n\ndef nombre_coups():\n    '''Simule un jeu de plateau avec 12 cases et renvoie le nombre\n    minimal de coups pour visiter toutes les cases.'''\n    nombre_cases = 12\n    # indique si une case a \u00e9t\u00e9 vue\n    cases_vues = [ False ] * nombre_cases\n    nombre_cases_vues = 1\n    cases_vues[0] = True\n    case_en_cours = 0\n    n = 0 \n    while nombre_cases_vues &lt; nombre_cases: \n        x = randint(1, 6)\n        case_en_cours = (case_en_cours + x) % nombre_cases \n        if not cases_vues[case_en_cours]: \n            cases_vues[case_en_cours] = True\n            nombre_cases_vues = nombre_cases_vues + 1 \n        n = n + 1 \n    return n\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-27","title":"\u25b6 Sujet 27","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-271","title":"Exercice 27.1","text":"<p>Exercice 27.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>couples_consecutifs</code> qui prend en param\u00e8tre un tableau de nombres entiers <code>tab</code> non vide (type <code>list</code>), et qui renvoie la liste Python (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans <code>tab</code>.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; couples_consecutifs([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; couples_consecutifs([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; couples_consecutifs([1, 1, 2, 4])\n[(1, 2)]\n&gt;&gt;&gt; couples_consecutifs([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; couples_consecutifs([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n</code></pre></p> <pre><code>def couples_consecutifs(tab):\n    solution = []\n    for i in range(len(tab)-1):\n        if tab[i] + 1 == tab[i+1]:\n            solution.append((tab[i], tab[i+1]))\n    return solution\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-272","title":"Exercice 27.2","text":"<p>Exercice 27.2</p> \u00c9nonc\u00e9Correction <p>Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments <code>M[i][j]</code>, appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 <code>0</code> soit \u00e0 <code>1</code>.</p> <p>Une composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de <code>1</code> et de <code>0</code> qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement.</p> <p>Par exemple, les composantes de  sont </p> <p>On souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 <code>1</code> dans une image <code>M</code>, donner la valeur <code>val</code> \u00e0 tous les pixels de la composante \u00e0 laquelle appartient ce pixel.</p> <p>La fonction <code>colore_comp1</code> prend pour param\u00e8tre une image <code>M</code> (repr\u00e9sent\u00e9e par une liste de listes), deux entiers <code>i</code> et <code>j</code> et une valeur enti\u00e8re <code>val</code>. Elle met \u00e0 la valeur <code>val</code> tous les pixels de la composante du pixel <code>M[i][j]</code> s\u2019il vaut <code>1</code> et ne fait rien sinon.</p> <p>Par exemple, <code>colore_comp1(M, 2, 1, 3)</code> donne </p> <p>Compl\u00e9ter le code r\u00e9cursif de la fonction <code>colore_comp1</code> donn\u00e9 ci-dessous :</p> <pre><code>def colore_comp1(M, i, j, val):\n    if M[i][j] != 1:\n        return\n\n    M[i][j] = val\n\n    if i-1 &gt;= 0: # propage en haut\n        colore_comp1(M, i-1, j, val)\n    if ... &lt; len(M): # propage en bas\n        colore_comp1(M, ..., j, val) \n    if ...: # propage \u00e0 gauche \n        colore_comp1(M, ..., ..., val) \n    if ...: # propage \u00e0 droite \n        ...\n</code></pre> <p> dans le sujet original, les commentaires sur la direction de propagation sont erron\u00e9s </p> <p>Exemple : <pre><code>&gt;&gt;&gt; M = [[0, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 0], [0, 1, 1, 0]]\n&gt;&gt;&gt; colore_comp1(M, 2, 1, 3)\n&gt;&gt;&gt; M\n[[0, 0, 1, 0], [0, 3, 0, 1], [3, 3, 3, 0], [0, 3, 3, 0]]\n</code></pre></p> <pre><code>def colore_comp1(M, i, j, val):\n    if M[i][j] != 1:\n        return\n\n    M[i][j] = val\n\n    if i-1 &gt;= 0: # propage \u00e0 gauche\n        colore_comp1(M, i-1, j, val)\n    if i+1 &lt; len(M): # propage \u00e0 droite \n        colore_comp1(M, i+1, j, val) \n    if j-1 &gt;= 0: # propage en haut \n        colore_comp1(M, i, j-1, val) \n    if j+1 &lt; len(M[i]): # propage en bas \n        colore_comp1(M, i, j+1, val) \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-28","title":"\u25b6 Sujet 28","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-281","title":"Exercice 28.1","text":"<p>Exercice 28.1</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par :</p> <ul> <li>les deux premi\u00e8res valeurs sont \u00e9gales \u00e0 1 ;</li> <li>ensuite, chaque valeur est obtenue en faisant la somme des deux valeurs qui la pr\u00e9c\u00e8- dent.</li> </ul> <p>La troisi\u00e8me valeur est donc \\(1+1 = 2\\), la quatri\u00e8me est \\(1+2 = 3\\), la cinqui\u00e8me est \\(2+3 = 5\\), la sixi\u00e8me est \\(3 + 5 = 8\\), et ainsi de suite.</p> <p>Cette suite d\u2019entiers est connue sous le nom de suite de Fibonacci.</p> <p>\u00c9crire en Python une fonction <code>fibonacci</code> qui prend en param\u00e8tre un entier <code>n</code> suppos\u00e9 strictement positif et qui renvoie le terme d\u2019indice <code>n</code> de cette suite.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n</code></pre> <p>Version r\u00e9cursive :</p> <pre><code>def fibonacci(n):\n    if n &lt;= 2 :\n        return 1   \n    else :\n        return fibonacci(n-1) + fibonacci(n-2)\n</code></pre> <p>Version programmation dynamique bottom-up:</p> <pre><code>def fibonacci(n):\n    d = {}\n    d[1] = 1\n    d[2] = 1\n    for k in range(3, n+1):\n        d[k] = d[k-1] + d[k-2]\n    return d[n]\n</code></pre> <p>Version programmation dynamique top-down avec m\u00e9mo\u00efsation:</p> <pre><code>dict_fibo = {1:1, 2:1}\ndef fibonacci(n):\n    if n in dict_fibo:\n        return dict_fibo[n]\n    dict_fibo[n] = fibonacci(n-1) + fibonacci(n-2)\n    return dict_fibo[n]\n</code></pre> <p>On peut constater que la version r\u00e9cursive \u00e9choue \u00e0 calculer <code>fibonacci(45)</code>, alors que les deux autres versions le font quasi-imm\u00e9diatement. </p>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-282","title":"Exercice 28.2","text":"<p>Exercice 28.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la fonction <code>eleves_du_mois</code> prenant en param\u00e8tres <code>eleves</code> et <code>notes</code> deux tableaux de m\u00eame longueur, le premier contenant le nom des \u00e9l\u00e8ves et le second, des entiers positifs d\u00e9signant leur note \u00e0 un contr\u00f4le de sorte que <code>eleves[i]</code> a obtenu la note <code>notes[i]</code>.  </p> <p>Cette fonction renvoie le couple constitu\u00e9 de la note maximale attribu\u00e9e et des noms des \u00e9l\u00e8ves ayant obtenu cette note regroup\u00e9s dans un tableau.  </p> <p>Ainsi, l\u2019instruction <code>eleves_du_mois(['a', 'b', 'c', 'd'], [15, 18, 12, 18])</code> renvoie le couple <code>(18, ['b', 'd'])</code>.</p> <pre><code>def eleves_du_mois(eleves, notes):\n    note_maxi = 0\n    meilleurs_eleves =  ...\n\n    for i in range(...) :\n        if notes[i] == ... :\n            meilleurs_eleves.append(...)\n        elif notes[i] &gt; note_maxi:\n            note_maxi = ...\n            meilleurs_eleves = [...]\n\n    return (note_maxi,meilleurs_eleves)\n</code></pre> <p>Compl\u00e9ter ce code.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; eleves_nsi = ['a','b','c','d','e','f','g','h','i','j']\n&gt;&gt;&gt; notes_nsi = [30, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n&gt;&gt;&gt; eleves_du_mois(eleves_nsi, notes_nsi)\n(80, ['c', 'f', 'h'])\n&gt;&gt;&gt; eleves_du_mois([],[])\n(0, [])\n</code></pre> <pre><code>def eleves_du_mois(eleves, notes):\n    note_maxi = 0\n    meilleurs_eleves =  []\n\n    for i in range(len(eleves)) :\n        if notes[i] == note_maxi :\n            meilleurs_eleves.append(eleves[i])\n        elif notes[i] &gt; note_maxi:\n            note_maxi = notes[i]\n            meilleurs_eleves = [eleves[i]]\n\n    return (note_maxi, meilleurs_eleves)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-29","title":"\u25b6 Sujet 29","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-291","title":"Exercice 29.1","text":"<p>Exercice 29.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>moyenne(notes)</code> qui renvoie la moyenne pond\u00e9r\u00e9e des r\u00e9sultats contenus dans le tableau <code>notes</code>, non vide, donn\u00e9 en param\u00e8tre. Ce tableau contient des couples <code>(note, coefficient)</code> dans lesquels :</p> <ul> <li><code>note</code> est un nombre de type flottant (<code>float</code>) compris entre 0 et 20 ;</li> <li><code>coefficient</code> est un nombre entier strictement positif.</li> </ul> <p>Ainsi l\u2019expression <code>moyenne([(15.0,2),(9.0,1),(12.0,3)])</code> devra renvoyer <code>12.5</code>.</p> <p>\\(\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5\\)</p> <pre><code>def moyenne(liste_notes):\n    somme_notes = 0\n    somme_coeffs = 0\n    for devoir in liste_notes:\n        note = devoir[0]\n        coeff = devoir[1]\n        somme_notes += note * coeff\n        somme_coeffs += coeff\n    return somme_notes / somme_coeffs\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-292","title":"Exercice 29.2","text":"<p>Exercice 29.2</p> \u00c9nonc\u00e9Correction <p>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal (Figure 1).</p> <p>Dans le triangle de Pascal, chaque ligne commence et se termine par le nombre 1. Comme l\u2019illustre la Figure 2, on additionne deux valeurs successives d\u2019une ligne pour obtenir la valeur qui se situe sous la deuxi\u00e8me valeur.</p> <p></p> <p>Compl\u00e9ter les fonctions <code>ligne_suivante</code> et <code>pascal</code> ci-dessous. La fonction <code>ligne_suivante</code> prend en param\u00e8tre une liste d\u2019entiers <code>ligne</code> correspondant \u00e0 une ligne du triangle de Pascal et renvoie la liste correspondant \u00e0 la ligne suivante du triangle de Pascal. La fonction <code>pascal</code> prend en param\u00e8tre un entier n et l\u2019utilise pour construire le triangle de Pascal ayant <code>n+1</code> lignes sous la forme d\u2019une liste de listes.</p> <pre><code>def ligne_suivante(ligne):\n    '''Renvoie la ligne suivant ligne du triangle de Pascal'''\n    ligne_suiv = [...] \n    for i in range(...): \n        ligne_suiv.append(...) \n    ligne_suiv.append(...) \n    return ligne_suiv\n\ndef pascal(n):\n    '''Renvoie le triangle de Pascal de hauteur n'''\n    triangle = [ [1] ]\n    for k in range(...): \n        ligne_k = ... \n        triangle.append(ligne_k)\n    return triangle\n</code></pre> <p>Exemples: <pre><code>&gt;&gt;&gt; ligne_suivante([1, 3, 3, 1])\n[1, 4, 6, 4, 1]\n&gt;&gt;&gt; pascal(2)\n[[1], [1, 1], [1, 2, 1]]\n&gt;&gt;&gt; pascal(3)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n</code></pre></p> <pre><code>def ligne_suivante(ligne):\n    '''Renvoie la ligne suivant ligne du triangle de Pascal'''\n    ligne_suiv = [ligne[0]] \n    for i in range(1, len(ligne)): \n        ligne_suiv.append(ligne[i-1] + ligne[i]) \n    ligne_suiv.append(ligne[-1]) \n    return ligne_suiv\n\ndef pascal(n):\n    '''Renvoie le triangle de Pascal de hauteur n'''\n    triangle = [ [1] ]\n    for k in range(n): \n        ligne_k = ligne_suivante(triangle[-1]) \n        triangle.append(ligne_k)\n    return triangle\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-30","title":"\u25b6 Sujet 30","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-301","title":"Exercice 30.1","text":"<p>Exercice 30.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>fusion</code> prenant en param\u00e8tres deux tableaux non vides <code>tab1</code> et <code>tab2</code> (type <code>list</code>) d'entiers, chacun dans l\u2019ordre croissant, et renvoyant un tableau tri\u00e9 dans l\u2019ordre croissant et contenant l\u2019ensemble des valeurs de <code>tab1</code> et <code>tab2</code>.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; fusion([3, 5], [2, 5])\n[2, 3, 5, 5]\n&gt;&gt;&gt; fusion([-2, 4], [-3, 5, 10])\n[-3, -2, 4, 5, 10]\n&gt;&gt;&gt; fusion([4], [2, 6])\n[2, 4, 6]\n&gt;&gt;&gt; fusion([], [])\n[]\n&gt;&gt;&gt; fusion([1, 2, 3], [])\n[1, 2, 3]\n</code></pre> <pre><code>def fusion(tab1, tab2):\n    tab_fusion = []\n    i1 = 0\n    i2 = 0\n    while i1 &lt; len(tab1) and i2 &lt; len(tab2):\n        if tab1[i1] &lt; tab2[i2]:\n            tab_fusion.append(tab1[i1])\n            i1 += 1\n        else:\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n\n    if i1 == len(tab1):\n        while i2 &lt; len(tab2):\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n    else:\n        while i1 &lt; len(tab1):\n            tab_fusion.append(tab1[i1])\n            i1 += 1        \n\n    return tab_fusion\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-302","title":"Exercice 30.2","text":"<p>Exercice 30.2</p> \u00c9nonc\u00e9Correction <p>Le but de cet exercice est d\u2019\u00e9crire une fonction r\u00e9cursive <code>traduire_romain</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res, non vide, repr\u00e9sentant un nombre \u00e9crit en chiffres romains et qui renvoie son \u00e9criture d\u00e9cimale.</p> <p>Les chiffres romains consid\u00e9r\u00e9s sont : I, V, X, L, C, D et M. Ils repr\u00e9sentent respectivement les nombres 1, 5, 10, 50, 100, 500, et 1000 en base dix.</p> <p>On dispose d\u2019un dictionnaire <code>romains</code> dont les cl\u00e9s sont les caract\u00e8res apparaissant dans l\u2019\u00e9criture en chiffres romains et les valeurs sont les nombres entiers associ\u00e9s en \u00e9criture d\u00e9cimale :</p> <p><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}</code></p> <p>Le code de la fonction <code>traduire_romain</code> fournie repose sur le principe suivant :</p> <ul> <li> <p>la valeur d\u2019un caract\u00e8re est ajout\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur sup\u00e9rieure (ou \u00e9gale) \u00e0 celle du caract\u00e8re qui le suit ;</p> </li> <li> <p>la valeur d\u2019un caract\u00e8re est retranch\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur strictement inf\u00e9rieure \u00e0 celle du caract\u00e8re qui le suit.</p> </li> </ul> <p>Ainsi, XIV correspond au nombre 10 + 5 - 1 puisque :</p> <ul> <li> <p>la valeur de X (10) est sup\u00e9rieure \u00e0 celle de I (1), on ajoute donc 10 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire IV ;</p> </li> <li> <p>la valeur de I (1) est strictement inf\u00e9rieure \u00e0 celle de V (5), on soustrait donc 1 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire V.</p> </li> </ul> <p>On rappelle que pour priver une cha\u00eene de caract\u00e8res de son premier caract\u00e8re, on utilisera l\u2019instruction :</p> <p><code>nom_de_variable[1:]</code></p> <p>Par exemple, si la variable <code>mot</code> contient la cha\u00eene <code>\"CDI\"</code>, <code>mot[1:]</code> renvoie <code>\"DI\"</code>.</p> <pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n    \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\n        return ...\n    elif romains[nombre[0]] &gt;= ...\n        return romains[nombre[0]] + ...\n    else:\n        return ...\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; traduire_romain(\"XIV\")\n14\n&gt;&gt;&gt; traduire_romain(\"CXLII\")\n142\n&gt;&gt;&gt; traduire_romain(\"MMXXIV\")\n2024\n</code></pre> <pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n    \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\n        return romains[nombre]\n    elif romains[nombre[0]] &gt;= romains[nombre[1]]:\n        return romains[nombre[0]] + traduire_romain(nombre[1:])\n    else:\n        return traduire_romain(nombre[1:]) - romains[nombre[0]]\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-31","title":"\u25b6 Sujet 31","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-311","title":"Exercice 31.1","text":"<p>Exercice 31.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers relatifs <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres.</p> <p>Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <pre><code>&gt;&gt;&gt; multiplication(3, 5)\n15\n&gt;&gt;&gt; multiplication(-4, -8)\n32\n&gt;&gt;&gt; multiplication(-2, 6)\n-12\n&gt;&gt;&gt; multiplication(-2, 0)\n0\n</code></pre> <pre><code>def multiplication(n1, n2):\n    # on se ram\u00e8ne d'abord au cas o\u00f9 n1 et n2 sont tous les deux positifs :\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-312","title":"Exercice 31.2","text":"<p>Exercice 31.2</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse dans cet exercice \u00e0 la recherche dichotomique dans un tableau tri\u00e9 d\u2019entiers. Compl\u00e9ter la fonction suivante en respectant la sp\u00e9cification.</p> <pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d'entiers tri\u00e9 dans l'ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ... \n        if x == tab[m]:\n            return ... \n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ... \n    return ... \n</code></pre> <p>Exemples : <pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\nFalse\n</code></pre></p> <pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-32","title":"\u25b6 Sujet 32","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-321","title":"Exercice 32.1","text":"<p>Exercice 32.1</p> \u00c9nonc\u00e9Correction <p>L'op\u00e9rateur \u00ab ou exclusif \u00bb entre deux bits renvoie 0 si les deux bits sont \u00e9gaux et 1 s'ils sont diff\u00e9rents. Il est symbolis\u00e9 par le caract\u00e8re \u2295. Ainsi :</p> <ul> <li>0 \u2295 0 = 0</li> <li>0 \u2295 1 = 1</li> <li>1 \u2295 0 = 1</li> <li>1 \u2295 1 = 0  </li> </ul> <p>\u00c9crire une fonction <code>ou_exclusif</code> qui prend en param\u00e8tres deux tableaux de 0 ou de 1 de m\u00eame longueur et qui renvoie un tableau o\u00f9 l\u2019\u00e9l\u00e9ment situ\u00e9 \u00e0 position <code>i</code> est le r\u00e9sultat, par l\u2019op\u00e9rateur \u00ab ou exclusif \u00bb, des \u00e9l\u00e9ments \u00e0 la position <code>i</code> des tableaux pass\u00e9s en param\u00e8tres.</p> <pre><code>&gt;&gt;&gt; ou_exclusif([1, 0, 1, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0])\n[1, 1, 0, 1, 1, 0, 0, 1]\n&gt;&gt;&gt; ou_exclusif([1, 1, 0, 1], [0, 0, 1, 1])\n[1, 1, 1, 0]\n</code></pre> <pre><code>def ou_exclusif(tab1, tab2):\n    resultat = []\n    taille = len(tab1)\n    for i in range(taille):\n        resultat.append(tab1[i] ^ tab2[i])\n    return resultat\n</code></pre> <p>Si on ne connait pas la fonction native ^ qui fait le \u00abou exclusif\u00bb de deux entiers en Python, on peut la recoder :</p> <pre><code>def ou_exc(a, b):\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 1:\n        return 1\n    if a == 1 and b == 0:\n        return 1\n    if a == 1 and b == 1:\n        return 0\n</code></pre> <p>Le code devient alors :</p> <pre><code>def ou_exclusif(tab1, tab2):\n    resultat = []\n    taille = len(tab1)\n    for i in range(taille):\n        resultat.append(ou_exc(tab1[i],tab2[i]))\n    return resultat\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-322","title":"Exercice 32.2","text":"<p>Exercice 32.2</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, on appelle carr\u00e9 d\u2019ordre \\(n\\) un tableau de \\(n\\) lignes et \\(n\\) colonnes dont chaque case contient un entier naturel.</p> <p>Exemples : </p> <p>Un carr\u00e9 est dit semimagique lorsque les sommes des \u00e9l\u00e9ments situ\u00e9s sur chaque ligne, chaque colonne sont \u00e9gales.</p> <ul> <li> <p>Ainsi c2 et c3 sont semimagiques car la somme de chaque ligne, chaque colonne et chaque diagonale est \u00e9gale \u00e0 8 pour c2 et 12 pour c3.</p> </li> <li> <p>Le carre c3bis n'est pas semimagique car la somme de la premi\u00e8re ligne est \u00e9gale \u00e0 15 alors que celle de la deuxi\u00e8me ligne est \u00e9gale \u00e0 10.</p> </li> </ul> <p>La classe <code>Carre</code> ci-apr\u00e8s contient des m\u00e9thodes qui permettent de manipuler des carr\u00e9s.</p> <ul> <li> <p>La m\u00e9thode constructeur cr\u00e9e un carr\u00e9 sous forme d\u2019un tableau \u00e0 deux dimensions \u00e0 partir d\u2019une liste d\u2019entiers, et d\u2019un ordre.</p> </li> <li> <p>La m\u00e9thode <code>affiche</code> permet d\u2019afficher le carr\u00e9 cr\u00e9\u00e9.</p> </li> </ul> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; lst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\n&gt;&gt;&gt; c3 = Carre(lst_c3, 3)\n&gt;&gt;&gt; c3.affiche()\n[3, 4, 5]\n[4, 4, 4]\n[5, 4, 3]\n</code></pre> <p>Compl\u00e9ter la m\u00e9thode <code>est_semimagique</code> qui renvoie <code>True</code> si le carr\u00e9 est semimagique, <code>False</code> sinon. </p> <pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n        '''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n        '''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n        '''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\n        for i in range(...):\n            if ... != s:\n                return ...\n\n        #test de la somme de chaque colonne\n        for j in range(...):\n            if ... != s:\n                return ...\n\n        return ...\n</code></pre> <p>Tester la m\u00e9thode <code>est_semimagique</code> sur les carr\u00e9s c2, c3 et c3bis.</p> <pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n        '''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n        '''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n        '''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\n        for i in range(self.ordre):\n            if self.somme_ligne(i) != s:\n                return False\n\n        #test de la somme de chaque colonne\n        for j in range(self.ordre):\n            if self.somme_col(j) != s:\n                return False\n\n        return True\n</code></pre> <p>Tests avec :</p> <pre><code>lst_c2 = [1, 7, 7, 1]\nlst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\nlst_c3bis = [2, 9, 4, 7, 0, 3, 6, 1, 8]\n</code></pre> <pre><code>&gt;&gt;&gt; c2 = Carre(lst_c2, 2)\n&gt;&gt;&gt; c2.est_semimagique()\nTrue\n\n&gt;&gt;&gt; c3 = Carre(lst_c3, 3)\n&gt;&gt;&gt; c3.est_semimagique()\nTrue\n\n&gt;&gt;&gt; c3bis = Carre(lst_c3bis, 2)\n&gt;&gt;&gt; c3bis.est_semimagique()\nFalse\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-33","title":"\u25b6 Sujet 33","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-331","title":"Exercice 33.1","text":"<p>Exercice 33.1</p> \u00c9nonc\u00e9Correction <p>Programmer une fonction <code>renverse</code>, prenant en param\u00e8tre une cha\u00eene de caract\u00e8res <code>mot</code> et renvoie cette cha\u00eene de caract\u00e8res en ordre inverse.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; renverse(\"\")\n\"\"\n&gt;&gt;&gt; renverse(\"abc\")\n\"cba\"\n&gt;&gt;&gt; renverse(\"informatique\")\n\"euqitamrofni\"\n</code></pre> <pre><code>def renverse(mot):\n    sol = ''\n    for lettre in mot:\n        sol = lettre + sol\n    return sol\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-332","title":"Exercice 33.2","text":"<p>Exercice 33.2</p> \u00c9nonc\u00e9Correction <p>Un nombre premier est un nombre entier naturel qui admet exactement deux diviseurs distincts entiers et positifs : 1 et lui-m\u00eame. </p> <p>Le crible d\u2019\u00c9ratosth\u00e8ne permet de d\u00e9terminer les nombres premiers plus petit qu\u2019un certain nombre <code>n</code> fix\u00e9. </p> <p>On consid\u00e8re pour cela un tableau <code>tab</code> de <code>n</code>bool\u00e9ens, initialement tous \u00e9gaux \u00e0 <code>True</code>, sauf <code>tab[0]</code> et <code>tab[1]</code> qui valent <code>False</code>, 0 et 1 n\u2019\u00e9tant pas des nombres premiers.  </p> <p>On parcourt alors ce tableau de gauche \u00e0 droite.  </p> <p>Pour chaque indice <code>i</code> :</p> <ul> <li> <p>si <code>tab[i]</code> vaut <code>True</code> : le nombre <code>i</code> est premier et on donne la valeur <code>False</code> \u00e0 toutes les cases du tableau dont l\u2019indice est un multiple de <code>i</code>, \u00e0 partir de <code>2*i</code> (c\u2019est-\u00e0-dire <code>2*i</code>, <code>3*i</code> ...).</p> </li> <li> <p>si <code>tab[i]</code> vaut <code>False</code> : le nombre <code>i</code> n\u2019est pas premier et on n\u2019effectue aucun changement sur le tableau. </p> </li> </ul> <p>On dispose de la fonction <code>crible</code>, incompl\u00e8te et donn\u00e9e ci-dessous, prenant en param\u00e8tre un entier <code>n</code> strictement positif et renvoyant un tableau contenant tous les nombres premiers plus petits que <code>n</code>.</p> <pre><code>def crible(n):\n    \"\"\"Renvoie un tableau contenant tous les nombres premiers\n    plus petits que n.\"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\n    for i in range(n):\n        if tab[i]:\n            premiers.... \n            multiple = ... \n            while multiple &lt; n:\n                tab[multiple] = ... \n                multiple = ... \n    return premiers\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; crible(40)\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n&gt;&gt;&gt; crible(5)\n[2, 3]\n</code></pre> <pre><code>ddef crible(n):\n    \"\"\"Renvoie un tableau contenant tous les nombres premiers\n    plus petits que n.\"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\n    for i in range(n):\n        if tab[i]:\n            premiers.append(i)\n            multiple = i \n            while multiple &lt; n:\n                tab[multiple] = False \n                multiple = multiple + i \n    return premiers\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-34","title":"\u25b6 Sujet 34","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-341","title":"Exercice 34.1","text":"<p>Exercice 34.1</p> \u00c9nonc\u00e9Correction <p>Le nombre d\u2019occurrences d\u2019un caract\u00e8re dans une cha\u00eene de caract\u00e8re est le nombre d\u2019apparitions de ce caract\u00e8re dans la cha\u00eene.</p> <p>Exemples :</p> <ul> <li>le nombre d\u2019occurrences du caract\u00e8re <code>\u2018o\u2019</code> dans <code>\u2018bonjour\u2019</code> est 2 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re <code>\u2018b\u2019</code> dans <code>\u2018B\u00e9b\u00e9\u2019</code> est 1 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re <code>\u2018B\u2019</code> dans <code>\u2018B\u00e9b\u00e9\u2019</code> est 1 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re <code>\u2018 \u2018</code> dans <code>\u2018Hello world !\u2019</code> est 2.</li> </ul> <p>On cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et les valeurs le nombre d\u2019occurrences de ces caract\u00e8res.</p> <p>Par exemple : avec la phrase <code>'Hello world !'</code> le dictionnaire est le suivant :</p> <p><code>{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}</code></p> <p>L\u2019ordre des clefs n\u2019a pas d\u2019importance.</p> <p>\u00c9crire une fonction <code>nbr_occurrences</code> prenant comme param\u00e8tre une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoyant le dictionnaire des nombres d\u2019occurrences des caract\u00e8res de cette cha\u00eene.</p> <pre><code>def nbr_occurrences(chaine):\n    nb_occ = {}\n    for caractere in chaine:\n        if caractere in nb_occ:\n            nb_occ[caractere] += 1\n        else:\n            nb_occ[caractere] = 1\n    return nb_occ\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-342","title":"Exercice 34.2","text":"<p>Exercice 34.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>fusion</code> prend deux tableaux <code>tab1</code>, <code>tab2</code> (type <code>list</code>) d\u2019entiers tri\u00e9s par ordre croissant et les fusionne en un tableau tri\u00e9 <code>tab12</code> qu\u2019elle renvoie.</p> <p>Compl\u00e9ter le code de la fonction <code>fusion</code> ci-dessous.</p> <pre><code>def fusion(tab1,tab2):\n    '''Fusionne deux tableaux tri\u00e9s et renvoie le nouveau tableau tri\u00e9.'''\n    n1 = len(tab1)\n    n2 = len(tab2)\n    tab12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ...: \n        if tab1[i1] &lt; tab2[i2]:\n            tab12[i] = ... \n            i1 = ... \n        else:\n            tab12[i] = tab2[i2]\n            i2 = ... \n        i += 1\n    while i1 &lt; n1:\n        tab12[i] = ... \n        i1 = i1 + 1\n        i = ... \n    while i2 &lt; n2:\n        tab12[i] = ... \n        i2 = i2 + 1\n        i = ... \n    return tab12\n</code></pre> <p>Compl\u00e9ter le code.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; fusion([1, 6, 10],[0, 7, 8, 9])\n[0, 1, 6, 7, 8, 9, 10]\n</code></pre> <pre><code>def fusion(tab1, tab2):\n    n1 = len(tab1)\n    n2 = len(tab2)\n    tab12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and i2 &lt; n2 :\n        if tab1[i1] &lt; tab2[i2]:\n            tab12[i] = tab1[i1]\n            i1 = i1 + 1\n        else:\n            tab12[i] = tab2[i2]\n            i2 = i2 + 1\n        i += 1\n    while i1 &lt; n1:\n        tab12[i] = tab1[i1]\n        i1 = i1 + 1\n        i = i + 1\n    while i2 &lt; n2:\n        tab12[i] = tab2[i2]\n        i2 = i2 + 1\n        i = i + 1\n    return tab12\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-35","title":"\u25b6 Sujet 35","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-351","title":"Exercice 35.1","text":"<p>Exercice 35.1</p> \u00c9nonc\u00e9Correction <p>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux tableaux (de type <code>list</code>) : l\u2019un pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es :</p> <pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n</code></pre> <p>\u00c9crire la fonction <code>annee_temperature_minimale</code> qui prend en param\u00e8tres ces deux tableaux et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante.</p> <p>On suppose que la temp\u00e9rature minimale est atteinte une seule fois.</p> <p>Exemple : <pre><code>&gt;&gt;&gt; annee_temperature_minimale(t_moy, annees)\n(12.5, 2016)\n</code></pre></p> <pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n\ndef annee_temperature_minimale(releve, date):\n    temp_mini = releve[0]\n    date_mini = date[0]\n    for i in range(len(releve)):\n        if releve[i] &lt; temp_mini:\n            temp_mini = releve[i]\n            date_mini = date[i]\n    return temp_mini, date_mini\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-352","title":"Exercice 35.2","text":"<p>Exercice 35.2</p> \u00c9nonc\u00e9Correction <p>Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : kayak, radar, et non sont des mots palindromes.</p> <p>De m\u00eame certains nombres ont des \u00e9critures d\u00e9cimales qui sont des palindromes : 33, 121, 345543.</p> <p>L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome.</p> <p>Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous qui s\u2019appuient les unes sur les autres :</p> <ul> <li><code>inverse_chaine</code> : qui renvoie une cha\u00eene de caract\u00e8res invers\u00e9e ;</li> <li><code>est_palindrome</code> : qui teste si une cha\u00eene de caract\u00e8res est un palindrome ;</li> <li><code>est_nbre_palindrome</code> : qui teste si un nombre est un palindrome.</li> </ul> <p>Compl\u00e9ter le code des trois fonctions ci-dessous. <pre><code>def inverse_chaine(chaine):\n    '''Retourne la chaine invers\u00e9e'''\n    resultat = ... \n    for caractere in chaine:\n        resultat = ... \n    return resultat\n\ndef est_palindrome(chaine):\n    '''Renvoie un bool\u00e9en indiquant si la chaine ch\n    est un palindrome'''\n    inverse = inverse_chaine(chaine)\n    return ... \n\ndef est_nbre_palindrome(nbre):\n    '''Renvoie un bool\u00e9en indiquant si le nombre nbre \n    est un palindrome'''\n    chaine = ... \n    return est_palindrome(chaine)\n</code></pre></p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; inverse_chaine('bac')\n'cab'\n&gt;&gt;&gt; est_palindrome('NSI')\nFalse\n&gt;&gt;&gt; est_palindrome('ISN-NSI')\nTrue\n&gt;&gt;&gt; est_nbre_palindrome(214312)\nFalse\n&gt;&gt;&gt; est_nbre_palindrome(213312)\nTrue\n</code></pre> <pre><code>def inverse_chaine(chaine):\n    '''Retourne la chaine invers\u00e9e'''\n    resultat = '' \n    for caractere in chaine:\n        resultat = caractere + resultat \n    return resultat\n\ndef est_palindrome(chaine):\n    '''Renvoie un bool\u00e9en indiquant si la chaine ch\n    est un palindrome'''\n    inverse = inverse_chaine(chaine)\n    return chaine == inverse \n\ndef est_nbre_palindrome(nbre):\n    '''Renvoie un bool\u00e9en indiquant si le nombre nbre \n    est un palindrome'''\n    chaine = str(nbre) \n    return est_palindrome(chaine)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-36","title":"\u25b6 Sujet 36","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-361","title":"Exercice 36.1","text":"<p>Exercice 36.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>occurrences(caractere, chaine)</code> qui prend en param\u00e8tres <code>caractere</code>, une cha\u00eene de caract\u00e8re de longueur 1, et <code>chaine</code>, une cha\u00eene de caract\u00e8res. Cette fonction renvoie le nombre d\u2019occurrences de <code>caractere</code> dans <code>chaine</code>, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 <code>caractere</code> appara\u00eet dans <code>chaine</code>.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; occurrences('e', \"sciences\")\n2\n&gt;&gt;&gt; occurrences('i',\"mississippi\")\n4\n&gt;&gt;&gt; occurrences('a',\"mississippi\")\n0\n</code></pre></p> <pre><code>def occurrences(caractere, chaine):\n    somme = 0\n    for lettre in chaine:\n        if lettre == caractere:\n            somme += 1\n    return somme\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-362","title":"Exercice 36.2","text":"<p>Exercice 36.2</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets.</p> <p>Le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste <code>valeurs = [100, 50, 20, 10, 5, 2, 1]</code>. On suppose que les pi\u00e8ces et billets sont disponibles sans limitation.</p> <p>On cherche \u00e0 donner la liste des valeurs \u00e0 rendre pour une somme donn\u00e9e en argument. L\u2019algorithme utilis\u00e9 est de type glouton.</p> <p>Compl\u00e9ter le code Python ci-dessous de la fonction <code>rendu_glouton</code> qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.</p> <pre><code>valeurs = [100, 50, 20, 10, 5, 2, 1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\n        return ...\n    v = valeurs[rang]\n    if v &lt;= ... :\n        return ... + rendu_glouton(a_rendre - v, rang)\n    else :\n        return rendu_glouton(a_rendre, ...)\n</code></pre> <p>On devra obtenir :</p> <pre><code>&gt;&gt;&gt;rendu_glouton(67, 0)\n[50, 10, 5, 2]\n&gt;&gt;&gt;rendu_glouton(291, 0)\n[100, 100, 50, 20, 20, 1]\n&gt;&gt;&gt; rendu_glouton(291,1) # si on ne dispose pas de billets de 100\n[50, 50, 50, 50, 50, 20, 20, 1]\n</code></pre> <pre><code>valeurs = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\n        return []\n    v = valeurs[rang]\n    if v &lt;= a_rendre :\n        return [v] + rendu_glouton(a_rendre - v, rang)\n    else :\n        return rendu_glouton(a_rendre, rang + 1)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-37","title":"\u25b6 Sujet 37","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-371","title":"Exercice 37.1","text":"<p>Exercice 37.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>moyenne</code>   prenant en param\u00e8tre un tableau d'entiers <code>tab</code> (de type <code>list</code>) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide. Proposer une fa\u00e7on de traiter le cas o\u00f9 le tableau pass\u00e9 en param\u00e8tre est vide.</p> <p>Dans cet exercice, on s\u2019interdira d\u2019utiliser la fonction Python <code>sum</code>.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; moyenne([5,3,8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1,2,3,4,5,6,7,8,9,10])\n5.5\n&gt;&gt;&gt; moyenne([])\n# Comportement diff\u00e9rent suivant le traitement propos\u00e9.\n</code></pre></p> <pre><code>def moyenne(tab):\n    if tab == []:\n        print('Le tableau donn\u00e9 est vide')\n        return None\n    else:\n        somme = 0\n        for elt in tab:\n            somme += elt\n        return somme / len(tab)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-372","title":"Exercice 37.2","text":"<p>Exercice 37.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re un tableau d'entiers <code>tab</code> (de type <code>list</code>) dont les \u00e9l\u00e9ments sont des <code>0</code> ou des <code>1</code>). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri, le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des <code>0</code>, la seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des <code>1</code>. Au d\u00e9part, les zones ne contenant que des <code>0</code> et des <code>1</code> sont vides.</p> <p> Zone de 0Zone non tri\u00e9eZone de 1 </p> <p>Tant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier \u00e9l\u00e9ment :</p> <ul> <li>si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant que des 0 ;</li> <li>si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on consid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1.</li> </ul> <p>Dans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1.</p> <p>Compl\u00e9ter la fonction <code>tri</code> suivante :</p> <pre><code>def tri(tab):\n    '''tab est un tableau d'entiers contenant des 0 et des 1.\n    La fonction trie ce tableau en pla\u00e7ant tous les 0 \u00e0 gauche'''\n    i = ... # premier indice de la zone non tri\u00e9e \n    j = ... # dernier indice de la zone non tri\u00e9e \n    while i &lt; j:\n        if tab[i] == 0:\n            i = ... \n        else:\n            valeur = ... \n            tab[j] = ... \n            ...\n            j = ... \n</code></pre> <p>Exemple : <pre><code>&gt;&gt;&gt; tab = [0,1,0,1,0,1,0,1,0]\n&gt;&gt;&gt; tri(tab)\n&gt;&gt;&gt; tab\n[0, 0, 0, 0, 0, 1, 1, 1, 1]    \n</code></pre></p> <pre><code>def tri(tab):\n    '''tab est un tableau d'entiers contenant des 0 et des 1.\n    La fonction trie ce tableau en pla\u00e7ant tous les 0 \u00e0 gauche'''\n    i = 0 # premier indice de la zone non tri\u00e9e \n    j = len(tab) - 1 # dernier indice de la zone non tri\u00e9e \n    while i &lt; j:\n        if tab[i] == 0:\n            i = i + 1 \n        else:\n            valeur = tab[j] \n            tab[j] = tab[i] \n            tab[i] = valeur\n            j = j -1  \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-38","title":"\u25b6 Sujet 38","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-381","title":"Exercice 38.1","text":"<p>Exercice 38.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>indices_maxi</code> qui prend en param\u00e8tre un tableau non vide de nombre entiers <code>tab</code>, repr\u00e9sent\u00e9 par une liste Python et qui renvoie un tuple (<code>maxi</code>, <code>indices</code>) o\u00f9 :</p> <ul> <li><code>maxi</code> est le plus grand \u00e9l\u00e9ment du tableau <code>tab</code> ;</li> <li><code>indices</code> est une liste Python contenant les indices du tableau <code>tab</code> o\u00f9 appara\u00eet ce plus grand \u00e9l\u00e9ment.</li> </ul> <p>Exemple : <pre><code>&gt;&gt;&gt; indices_maxi([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, [3, 8])\n&gt;&gt;&gt; indices_maxi([7])\n(7, [0])\n</code></pre></p> <pre><code>def indices_maxi(tab):\n    val_max = tab[0]\n    ind_max = []\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n    for i in range(len(tab)):\n        if tab[i] == val_max:\n            ind_max.append(i)\n    return (val_max, ind_max)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-382","title":"Exercice 38.2","text":"<p>Exercice 38.2</p> \u00c9nonc\u00e9Correction <p>Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es par des listes Python.</p> <p>Si <code>pile</code> est une pile, alors <code>pile == []</code> indique si la pile est vide, <code>pile.pop()</code> retire et renvoie le sommet de la pile et <code>pile.append(v)</code> ajoute la valeur <code>v</code> au sommet de la pile.</p> <p>Si on consid\u00e8re qu\u2019une fonction manipule une pile, elle ne peut pas utiliser d\u2019autres op\u00e9ra- tions que celles d\u00e9crites ci-dessus.</p> <p>On cherche \u00e0 \u00e9crire une fonction <code>positifs</code> qui prend une pile de nombres entiers en param\u00e8tre et qui renvoie une nouvelle pile contenant les entiers positifs de la pile initiale, dans le m\u00eame ordre, quitte \u00e0 modifier la pile initiale.</p> <p>Pour cela, on va \u00e9galement \u00e9crire une fonction <code>renverse</code> qui prend une pile en param\u00e8tre et qui renvoie une nouvelle pile contenant les m\u00eames \u00e9l\u00e9ments que la pile initiale, mais dans l\u2019ordre inverse. Cette fonction sera \u00e9galement amen\u00e9e \u00e0 modifier la pile pass\u00e9e en param\u00e8tre.</p> <p>Compl\u00e9ter le code Python des fonctions <code>renverse</code> et <code>positifs</code> ci-apr\u00e8s</p> <pre><code>def renverse(pile):\n    '''renvoie une pile contenant les m\u00eames \u00e9l\u00e9ments que pile,\n    mais dans l'ordre inverse.\n    Cette fonction d\u00e9truit pile.'''\n    pile_inverse = ... \n    while pile != []:\n        ... .append(...) \n    return ... \n\n\ndef positifs(pile):\n    '''renvoie une pile contenant les \u00e9l\u00e9ments positifs de pile,\n    dans le m\u00eame ordre. Cette fonction d\u00e9truit pile.'''\n    pile_positifs = ... \n    while pile != []:\n        ... = pile.pop() \n        if ... &gt;= 0: \n            ...\n    return ... \n</code></pre> <p>Exemple : <pre><code>&gt;&gt;&gt; renverse([1, 2, 3, 4, 5])\n[5, 4, 3, 2, 1]\n&gt;&gt;&gt; positifs([-1, 0, 5, -3, 4, -6, 10, 9, -8])\n[0, 5, 4, 10, 9]\n&gt;&gt;&gt; positifs([-2])\n[]\n</code></pre></p> <pre><code>def renverse(pile):\n    '''renvoie une pile contenant les m\u00eames \u00e9l\u00e9ments que pile,\n    mais dans l'ordre inverse.\n    Cette fonction d\u00e9truit pile.'''\n    pile_inverse = [] \n    while pile != []:\n        pile_inverse.append(pile.pop()) \n    return pile_inverse \n\n\ndef positifs(pile):\n    '''renvoie une pile contenant les \u00e9l\u00e9ments positifs de pile,\n    dans le m\u00eame ordre. Cette fonction d\u00e9truit pile.'''\n    pile_positifs = [] \n    while pile != []:\n        elt = pile.pop() \n        if elt &gt;= 0: \n            pile_positifs.append(elt)\n    return renverse(pile_positifs) \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-39","title":"\u25b6 Sujet 39","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-391","title":"Exercice 39.1","text":"<p>Exercice 39.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers (type <code>list</code> ), et qui renvoie l\u2019indice de la derni\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>None</code> sinon.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4]) # renvoie None\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(1, [1, 0, 42, 7])\n0\n&gt;&gt;&gt; recherche(1, [1, 50, 1])\n2\n&gt;&gt;&gt; recherche(1, [8, 1, 10, 1, 7, 1, 8])\n5\n</code></pre></p> <pre><code>def recherche(elt, tab):\n    for i in range(len(tab)-1, -1, -1):\n        if tab[i] == elt:\n            return i\n    return None\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-392","title":"Exercice 39.2","text":"<p>Exercice 39.2</p> \u00c9nonc\u00e9Correction <p>On d\u00e9finit une classe g\u00e9rant une adresse IPv4.</p> <p>On rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale \u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec une plage d\u2019adresses IP de <code>192.168.0.0</code> \u00e0 <code>192.168.0.255</code>.</p> <p>On consid\u00e8re que les adresses IP saisies sont valides.</p> <p>Les adresses IP <code>192.168.0.0</code> et <code>192.168.0.255</code> sont des adresses r\u00e9serv\u00e9es.</p> <p>Le code ci-dessous impl\u00e9mente la classe <code>AdresseIP</code>.</p> <p><pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = ... \n\n    def liste_octets(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        # Note : split d\u00e9coupe la chaine de caract\u00e8res \n        # en fonction du s\u00e9parateur\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        reservees = [ ... ] \n        return ... \n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l'adresse self si elle existe et None sinon\"\"\"\n        octets = ... \n        if ... == 254: \n            return None\n        octet_nouveau = ... + ... \n        return AdresseIP('192.168.0.' + ...) \n</code></pre> Compl\u00e9ter le code ci-dessus et instancier trois objets : <code>adresse1</code>, <code>adresse2</code>, <code>adresse3</code> avec respectivement les arguments suivants :</p> <p><code>'192.168.0.1'</code>, <code>'192.168.0.2'</code>, <code>'192.168.0.0'</code></p> <p>V\u00e9rifier que :  <pre><code>&gt;&gt;&gt; adresse1.liste_octets()\n[192, 168, 0, 1]\n&gt;&gt;&gt; adresse1.est_reservee()\nFalse\n&gt;&gt;&gt; adresse3.est_reservee()\nTrue\n&gt;&gt;&gt; adresse2.adresse_suivante().adresse # acces valide \u00e0 adresse\n# ici car on sait que l'adresse suivante existe\n'192.168.0.3'\n</code></pre></p> <pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = adresse \n\n    def liste_octets(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        # Note : split d\u00e9coupe la chaine de caract\u00e8res \n        # en fonction du s\u00e9parateur\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        reservees = [ '192.168.0.0', '192.168.0.255' ] \n        return self.adresse in reservees \n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l'adresse self si elle existe et None sinon\"\"\"\n        octets = self.liste_octets() \n        if octets[3] == 254: \n            return None\n        octet_nouveau = octets[3] + 1 \n        return AdresseIP('192.168.0.' + str(octet_nouveau))\n\n\n\nadresse1 = AdresseIP('192.168.0.1')\nadresse2 = AdresseIP('192.168.0.2')\nadresse3 = AdresseIP('192.168.0.0')\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-40","title":"\u25b6 Sujet 40","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-401","title":"Exercice 40.1","text":"<p>Exercice 40.1</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re des tables, c\u2019est-\u00e0-dire des tableaux de dictionnaires ayant tous les m\u00eames cl\u00e9s, qui contiennent des enregistrements relatifs \u00e0 des animaux h\u00e9berg\u00e9s dans un refuge. Les attributs des enregistrements sont <code>'nom'</code>, <code>'espece'</code>, <code>'age'</code>, <code>'enclos'</code>.</p> <p>Voici un exemple d'une telle table :</p> <pre><code>animaux = [ {'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2},\n            {'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n            {'nom':'Tom', 'espece':'chat', 'age':7, 'enclos':4},\n            {'nom':'Belle', 'espece':'chien', 'age':6, 'enclos':3},\n            {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n</code></pre> <p>Programmer une fonction <code>selection_enclos</code> qui :</p> <ul> <li>prend en param\u00e8tres :<ul> <li>une table <code>animaux</code> contenant des enregistrements relatifs \u00e0 des animaux (comme dans l'exemple ci-dessus),</li> <li>un num\u00e9ro d'enclos <code>num_enclos</code> ;</li> </ul> </li> <li>renvoie une table contenant les enregistrements de <code>animaux</code> dont l'attribut <code>'enclos'</code> est <code>num_enclos</code>.</li> </ul> <p>Exemples avec la table <code>animaux</code> ci-dessus :</p> <pre><code>&gt;&gt;&gt; selection_enclos(animaux, 5)\n[{'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 2)\n[{'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 7)\n[]\n</code></pre> <pre><code>def selection_enclos(animaux, num_enclos):\n    table = []\n    for animal in animaux:\n        if animal['enclos'] == num_enclos:\n            table.append(animal)\n    return table\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-402","title":"Exercice 40.2","text":"<p>Exercice 40.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re des tableaux de nombres dont tous les \u00e9l\u00e9ments sont pr\u00e9sents exactement trois fois \u00e0 la suite, sauf un \u00e9l\u00e9ment qui est pr\u00e9sent une unique fois et que l'on appelle \u00ab l'intrus \u00bb. Voici quelques exemples :</p> <p><pre><code>tab_a = [3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n#l'intrus est 7\n\ntab_b = [8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3]\n#l'intrus est 8\n\ntab_c = [5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8]\n#l'intrus est 3\n</code></pre> On remarque qu'avec de tels tableaux :</p> <ul> <li>pour les indices multiples de 3 situ\u00e9s strictement avant l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite sont \u00e9gaux,</li> <li>pour les indices multiples de 3 situ\u00e9s apr\u00e8s l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite - s'il existe - sont diff\u00e9rents.</li> </ul> <p>Ce que l'on peut observer ci-dessous en observant les valeurs des paires de voisins marqu\u00e9es par des caract\u00e8res ^ :</p> <pre><code>[3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^\n 0        3        6        9        12       15       18       21\n</code></pre> <p>Dans des listes comme ceux ci-dessus, un algorithme r\u00e9cursif pour trouver l'intrus consiste alors \u00e0 choisir un indice <code>i</code> multiple de 3 situ\u00e9 approximativement au milieu des indices parmi lesquels se trouve l'intrus. </p> <p>Puis, en fonction des valeurs de l'\u00e9l\u00e9ment d'indice <code>i</code> et de son voisin de droite, \u00e0 appliquer r\u00e9cursivement l'algorithme \u00e0 la moiti\u00e9 droite ou \u00e0 la moiti\u00e9 gauche des indices parmi lesquels se trouve l'intrus. </p> <p>Par exemple, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 12, on voit les valeurs 2 et 4 qui sont diff\u00e9rentes : l\u2019intrus est donc \u00e0 gauche de l\u2019indice 12 (indice 12 compris)</p> <p>En revanche, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 3, on voit les valeurs 9 et 9 qui sont identiques : l\u2019intrus est donc \u00e0 droite des indices 3-4-5, donc \u00e0 partir de l\u2019indice 6.</p> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>trouver_intrus</code> propos\u00e9e page suivante qui met en \u0153uvre cet algorithme.</p> <pre><code>def trouver_intrus(tab, g, d):\n    '''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return ...\n\n    else:\n        nombre_de_triplets = (d - g) // ...\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if ... :\n            return ...\n        else:\n            return ...\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; trouver_intrus([3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8,\n8, 5, 5, 5], 0, 21)\n7\n\n&gt;&gt;&gt; trouver_intrus([8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3], 0, 12)\n8\n\n&gt;&gt;&gt; trouver_intrus([5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8], 0, 15)\n3\n</code></pre> <pre><code>def trouver_intrus(tab, g, d):\n    '''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return tab[g]\n\n    else:\n        nombre_de_triplets = (d - g) // 3\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if tab[indice] != tab[indice + 1] :\n            return trouver_intrus(tab, g, indice)\n        else:\n            return trouver_intrus(tab, indice + 3, d)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-41","title":"\u25b6 Sujet 41","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-411","title":"Exercice 41.1","text":"<p>Exercice 41.1</p> \u00c9nonc\u00e9Correction <p>Un arbre binaire est soit vide, repr\u00e9sent\u00e9 en Python par la valeur <code>None</code>, soit un n\u0153ud, contenant une \u00e9tiquette et deux sous-arbres gauche et droit et repr\u00e9sent\u00e9 par une instance de la classe <code>Noeud</code> donn\u00e9e ci-dessous.</p> <pre><code>class Noeud:\n    def __init__(self, etiquette, gauche, droit):\n        self.v = etiquette\n        self.gauche = gauche\n        self.droit = droit\n</code></pre> <p></p> <p>L\u2019arbre ci-dessus sera donc impl\u00e9ment\u00e9 de la mani\u00e8re suivante : <pre><code>a = Noeud(1, Noeud(4, None, None), Noeud(0, None, Noeud(7, None, None)))\n</code></pre></p> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tre un arbre <code>a</code> et qui renvoie la taille de l\u2019arbre que cette instance impl\u00e9mente.</p> <p>\u00c9crire de m\u00eame une fonction r\u00e9cursive <code>hauteur</code> prenant en param\u00e8tre un arbre <code>a</code> et qui renvoie la hauteur de l\u2019arbre que cette instance impl\u00e9mente.</p> <p>On consid\u00e8re que la hauteur d\u2019un arbre vide est -1 et la taille d\u2019un arbre vide est 0.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; hauteur(a)\n2\n&gt;&gt;&gt; taille(a)\n4\n&gt;&gt;&gt; hauteur(None)\n-1\n&gt;&gt;&gt; taille(None)\n0\n&gt;&gt;&gt; hauteur(Noeud(1, None, None))\n0\n&gt;&gt;&gt; taille(Noeud(1, None, None))\n1\n</code></pre> <pre><code>class Noeud:\n    def __init__(self, etiquette, gauche, droit):\n        self.v = etiquette\n        self.gauche = gauche\n        self.droit = droit\n\na = Noeud(1, Noeud(4, None, None), Noeud(0, None, Noeud(7, None, None)))\n\ndef taille(a):\n    if a is None:\n        return 0\n    return 1 + taille(a.gauche) + taille(a.droit)\n\ndef hauteur(a):\n    if a is None:\n        return -1\n    return 1 + max(hauteur(a.gauche), hauteur(a.droit))\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-412","title":"Exercice 41.2","text":"<p>Exercice 41.2</p> \u00c9nonc\u00e9Correction <p>On rappelle que les tableaux sont repr\u00e9sent\u00e9s par des listes en Python du type <code>list</code>.</p> <p>Le but de cet exercice est d\u2019\u00e9crire une fonction ajoute qui prend en param\u00e8tres trois arguments <code>indice</code>, <code>element</code> et <code>tab</code> et renvoie un tableau <code>tab_ins</code> dans lequel les \u00e9l\u00e9ments sont ceux du tableau <code>tab</code> avec, en plus, l\u2019\u00e9l\u00e9ment <code>element</code> \u00e0 l\u2019indice <code>indice</code>.</p> <p>On consid\u00e8re que les variables <code>indice</code> et <code>element</code> sont des entiers positifs et que les \u00e9l\u00e9ments de <code>tab</code> sont \u00e9galement des entiers.</p> <p>En r\u00e9alisant cette insertion, Les \u00e9l\u00e9ments du tableau <code>tab</code> dont les indices sont sup\u00e9rieurs ou \u00e9gaux \u00e0 <code>indice</code> apparaissent d\u00e9cal\u00e9s vers la droite dans le tableau <code>tab_ins</code>.</p> <p>Si <code>indice</code> est \u00e9gal au nombre d\u2019\u00e9l\u00e9ments du tableau <code>tab</code>, l\u2019\u00e9l\u00e9ment <code>element</code> est ajout\u00e9 dans <code>tab_ins</code> apr\u00e8s tous les \u00e9l\u00e9ments du tableau <code>tab</code>.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; ajoute(1, 4, [7, 8, 9])\n[7, 4, 8, 9]\n&gt;&gt;&gt; ajoute(3, 4, [7, 8, 9])\n[7, 8, 9, 4]\n&gt;&gt;&gt; ajoute(0, 4, [7, 8, 9])\n[4, 7, 8, 9]\n</code></pre> <p>Compl\u00e9ter et tester le code ci-dessous :</p> <pre><code>def ajoute(indice, element, tab):\n    '''Renvoie un nouveau tableau obtenu en ins\u00e9rant\n    element \u00e0 l'indice indice dans le tableau tab.'''\n    nbre_elts = len(tab)\n    tab_ins = [0] * (nbre_elts + 1)\n    for i in range(indice):\n        tab_ins[i] = ... \n    tab_ins[...] = ... \n    for i in range(indice + 1, nbre_elts + 1):\n        tab_ins[i] = ... \n    return tab_ins\n</code></pre> <pre><code>def ajoute(indice, element, tab):\n    '''Renvoie un nouveau tableau obtenu en ins\u00e9rant\n    element \u00e0 l'indice indice dans le tableau tab.'''\n    nbre_elts = len(tab)\n    tab_ins = [0] * (nbre_elts + 1)\n    for i in range(indice):\n        tab_ins[i] = tab[i] \n    tab_ins[indice] = element \n    for i in range(indice + 1, nbre_elts + 1):\n        tab_ins[i] = tab[i-1] \n    return tab_ins\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-42","title":"\u25b6 Sujet 42","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-421","title":"Exercice 42.1","text":"<p>Exercice 42.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>moyenne</code> qui prend en param\u00e8tre un tableau d\u2019entiers non vide et qui renvoie un nombre flottant donnant la moyenne de ces entiers.</p> <p>Attention : il est interdit d\u2019utiliser la fonction <code>sum</code> ou la fonction <code>mean</code> (module <code>statistics</code>) de Python.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; moyenne([1])\n1.0\n&gt;&gt;&gt; moyenne([1, 2, 3, 4, 5, 6, 7])\n4.0\n&gt;&gt;&gt; moyenne([1, 2])\n1.5\n</code></pre> <pre><code>def moyenne(tab):\n    somme = 0\n    for elt in tab:\n        somme += elt\n    return somme / len(tab)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-422","title":"Exercice 42.2","text":"<p>Exercice 42.2</p> \u00c9nonc\u00e9Correction <p>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente dans un tableau de valeurs tri\u00e9es dans l'ordre croissant.</p> <p>Compl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s.</p> <pre><code>def dichotomie(tab, x):\n    \"\"\"applique une recherche dichotomique pour d\u00e9terminer\n    si x est dans le tableau tri\u00e9 tab.\n    La fonction renvoie True si tab contient x et False sinon\"\"\"\n\n    debut = 0\n    fin = ... \n    while debut &lt;= fin:\n        m = ... \n        if x == tab[m]:\n            return ... \n        if x &gt; tab[m]:\n            debut = ... \n        else:\n            fin = ... \n    return False\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 27)\nFalse\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 1)\nFalse\n&gt;&gt;&gt; dichotomie([], 28)\nFalse\n</code></pre> <pre><code>def dichotomie(tab, x):\n    \"\"\"applique une recherche dichotomique pour d\u00e9terminer\n    si x est dans le tableau tri\u00e9 tab.\n    La fonction renvoie True si tab contient x et False sinon\"\"\"\n\n    debut = 0\n    fin = len(tab) - 1 \n    while debut &lt;= fin:\n        m = (debut + fin) // 2 \n        if x == tab[m]:\n            return True \n        if x &gt; tab[m]:\n            debut = m + 1 \n        else:\n            fin = m - 1 \n    return False\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-43","title":"\u25b6 Sujet 43","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-431","title":"Exercice 43.1","text":"<p>Exercice 43.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>a_doublon</code> qui prend en param\u00e8tre un tableau tri\u00e9 de nombres dans l\u2019ordre croissant et renvoie <code>True</code> si ce tableau contient au moins deux nombres identiques, <code>False</code> sinon.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; a_doublon([])\nFalse\n&gt;&gt;&gt; a_doublon([1])\nFalse\n&gt;&gt;&gt; a_doublon([1, 2, 4, 6, 6])\nTrue\n&gt;&gt;&gt; a_doublon([2, 5, 7, 7, 7, 9])\nTrue\n&gt;&gt;&gt; a_doublon([0, 2, 3])\nFalse\n</code></pre> <pre><code>def a_doublon(tab):\n    for i in range(len(tab)-1):\n        if tab[i] == tab[i+1]:\n            return True\n    return False\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-432","title":"Exercice 43.2","text":"<p>Exercice 43.2</p> \u00c9nonc\u00e9Correction <p>On souhaite g\u00e9n\u00e9rer des grilles du jeu de d\u00e9mineur \u00e0 partir de la position des bombes \u00e0 placer. On se limite \u00e0 la g\u00e9n\u00e9ration de grilles carr\u00e9es de taille \\(n \\times n\\) o\u00f9 \\(n\\) est le nombre de bombes du jeu.  </p> <p>Dans le jeu du d\u00e9mineur, chaque case de la grille contient soit une bombe, soit une valeur qui correspond aux nombres de bombes situ\u00e9es dans le voisinage direct de la case (au- dessus, en dessous, \u00e0 droite, \u00e0 gauche ou en diagonale : chaque case a donc 8 voisins si elle n'est pas situ\u00e9e au bord de la grille).</p> <p>Voici un exemple de grille \\(5 \\times 5\\) de d\u00e9mineur dans laquelle la bombe est repr\u00e9sent\u00e9e par une \u00e9toile :</p> <p></p> <p>On utilise une liste de listes pour repr\u00e9senter la grille et on choisit de coder une bombe par la valeur -1.</p> <p>L'exemple ci-contre sera donc cod\u00e9 par la liste :</p> <pre><code>[[1, 1, 1, 0, 0],\n[1, -1, 1, 1, 1],\n[2, 2, 3, 2, -1],\n[1, -1, 2, -1, 3],\n[1, 1, 2, 2, -1]]\n</code></pre> <p>Compl\u00e9ter le code suivant afin de g\u00e9n\u00e9rer des grilles de d\u00e9mineur, on pourra v\u00e9rifier que l'appel</p> <p><code>genere_grille([(1, 1), (2, 4), (3, 1), (3, 3), (4, 4)])</code></p> <p>renvoie bien la liste donn\u00e9e en exemple.</p> <pre><code>def voisinage(n, ligne, colonne):\n    \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n    \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\n    voisins = ...\n    for l, c in voisins:\n        if grille[l][c] != ...: # si ce n'est pas une bombe\n            ...  # on ajoute 1 \u00e0 sa valeur\n\n\n\ndef genere_grille(bombes):\n    \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\n        grille[ligne][colonne] = ... # place la bombe\n        ... # incr\u00e9mente ses voisins\n\n    return grille\n</code></pre> <pre><code>def voisinage(n, ligne, colonne):\n    \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n    \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\n    voisins = voisinage(len(grille), ligne, colonne)\n    for l, c in voisins:\n        if grille[l][c] != -1: # si ce n'est pas une bombe\n            grille[l][c] += 1  # on ajoute 1 \u00e0 sa valeur\n\n\n\ndef genere_grille(bombes):\n    \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\n        grille[ligne][colonne] = -1 # place la bombe\n        incremente_voisins(grille, ligne, colonne) # incr\u00e9mente ses voisins\n\n    return grille\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-44","title":"\u25b6 Sujet 44","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-441","title":"Exercice 44.1","text":"<p>Exercice 44.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>enumere</code> qui prend en param\u00e8tre un tableau <code>tab</code> (type <code>list</code>) et renvoie un dictionnaire <code>d</code> dont les cl\u00e9s sont les \u00e9l\u00e9ments de <code>tab</code> avec pour valeur associ\u00e9e la liste des indices de l\u2019\u00e9l\u00e9ment dans le tableau <code>tab</code>.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; enumere([])\n{}\n&gt;&gt;&gt; enumere([1, 2, 3])\n{1: [0], 2: [1], 3: [2]}\n&gt;&gt;&gt; enumere([1, 1, 2, 3, 2, 1])\n{1: [0, 1, 5], 2: [2, 4], 3: [3]}\n</code></pre> <pre><code>def enumere(tab):\n    d = {}\n    for i in range(len(tab)):\n        if tab[i] in d:\n            d[tab[i]].append(i)\n        else:\n            d[tab[i]] = [i]\n    return d\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-442","title":"Exercice 44.2","text":"<p>Exercice 44.2</p> \u00c9nonc\u00e9Correction <p>Un arbre binaire est soit vide, repr\u00e9sent\u00e9 en Python par la valeur <code>None</code>, soit un n\u0153ud, contenant une \u00e9tiquette et deux sous-arbres gauche et droit et repr\u00e9sent\u00e9 par une instance de la classe <code>Noeud</code> donn\u00e9e ci-dessous.</p> <pre><code>class Noeud:\n    \"\"\"Classe repr\u00e9sentant un noeud d'un arbre binaire\"\"\"\n    def __init__(self, etiquette, gauche, droit):\n        \"\"\"Cr\u00e9e un noeud de valeur etiquette avec \n        gauche et droit comme fils.\"\"\"\n        self.etiquette = etiquette\n        self.gauche = gauche\n        self.droit = droit\n\ndef parcours(arbre, liste):\n    \"\"\"parcours r\u00e9cursivement l'arbre en ajoutant les \u00e9tiquettes\n    de ses noeuds \u00e0 la liste pass\u00e9e en argument en ordre infixe.\"\"\"\n    if arbre != None:\n        parcours(arbre.gauche, liste)\n        liste.append(arbre.etiquette)\n        parcours(arbre.droit, liste)\n    return liste\n</code></pre> <p>La fonction r\u00e9cursive <code>parcours</code> renvoie la liste des \u00e9tiquettes des n\u0153uds de l\u2019arbre impl\u00e9- ment\u00e9 par l\u2019instance <code>arbre</code> dans l\u2019ordre du parcours en profondeur infixe \u00e0 partir d\u2019une liste vide pass\u00e9e en argument.</p> <p>Compl\u00e9ter le code de la fonction <code>insere</code>, pr\u00e9sent\u00e9 page suivante, qui prend en argument un arbre binaire de recherche <code>arbre</code> repr\u00e9sent\u00e9 ainsi et une \u00e9tiquette <code>cle</code>, non pr\u00e9sente dans l\u2019arbre, et qui :</p> <ul> <li>renvoie une nouvelle feuille d\u2019\u00e9tiquette <code>cle</code> s\u2019il est vide ;</li> <li>renvoie l\u2019arbre apr\u00e8s l\u2019avoir modifi\u00e9 en ins\u00e9rant <code>cle</code> sinon ;</li> <li>garantit que l\u2019arbre ainsi compl\u00e9t\u00e9 soit encore un arbre binaire de recherche.</li> </ul> <p>Tester ensuite ce code en utilisant la fonction <code>parcours</code> et en ins\u00e9rant successivement des n\u0153uds d\u2019\u00e9tiquette 1, 4, 6 et 8 dans l\u2019arbre binaire de recherche repr\u00e9sent\u00e9 ci- dessous :</p> <p></p> <pre><code>def insere(arbre, cle):\n    \"\"\"insere la cle dans l'arbre binaire de recherche\n    repr\u00e9sent\u00e9 par arbre.\n    Retourne l'arbre modifi\u00e9.\"\"\"\n    if arbre == None:\n        return Noeud(cle, None, None) # creation d'une feuille\n    else:\n        if ...: \n            arbre.gauche = insere(arbre.gauche, cle)\n        else:\n            arbre.droit = ... \n        return arbre\n</code></pre> <pre><code>def insere(arbre, cle):\n    \"\"\"insere la cle dans l'arbre binaire de recherche\n    repr\u00e9sent\u00e9 par arbre.\n    Retourne l'arbre modifi\u00e9.\"\"\"\n    if arbre == None:\n        return Noeud(cle, None, None) # creation d'une feuille\n    else:\n        if cle &lt; arbre.etiquette: \n            arbre.gauche = insere(arbre.gauche, cle)\n        else:\n            arbre.droit = insere(arbre.droit, cle) \n        return arbre\n</code></pre> <p>Tests :</p> <pre><code>&gt;&gt;&gt; a = Noeud(5, None, None)\n&gt;&gt;&gt; a = insere(a, 2)\n&gt;&gt;&gt; a = insere(a, 3)\n&gt;&gt;&gt; a = insere(a, 7)\n&gt;&gt;&gt; parcours(a, [])\n[2, 3, 5, 7]\n&gt;&gt;&gt; a = insere(a, 1)\n&gt;&gt;&gt; a = insere(a, 4)\n&gt;&gt;&gt; a = insere(a, 6)\n&gt;&gt;&gt; a = insere(a, 8)\n&gt;&gt;&gt; parcours(a, [])\n[1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-45","title":"\u25b6 Sujet 45","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-451","title":"Exercice 45.1","text":"<p>Exercice 45.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>compte_occurrences</code> prenant en param\u00e8tres une valeur <code>x</code> et un tableau <code>tab</code> (de type <code>list</code>) et renvoyant le nombre d\u2019occurrences de <code>x</code> dans <code>tab</code>.</p> <p>L\u2019objectif de cet exercice \u00e9tant de parcourir un tableau, il est interdit d\u2019utiliser la m\u00e9thode <code>count</code> des listes Python.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; compte_occurrences(5, [])\n0\n&gt;&gt;&gt; compte_occurrences(5, [-2, 3, 1, 5, 3, 7, 4])\n1\n&gt;&gt;&gt; compte_occurrences('a', ['a','b','c','a','d','e','a'])\n3\n</code></pre> <pre><code>def compte_occurrences(x, tab):\n    nb = 0\n    for element in tab:\n        if element == x:\n            nb += 1\n    return nb\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-452","title":"Exercice 45.2","text":"<p>Exercice 45.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re dans cet exercice un algorithme glouton pour le rendu de monnaie. Pour rendre une somme en monnaie, on utilise \u00e0 chaque fois la plus grosse pi\u00e8ce possible et ainsi de suite jusqu\u2019\u00e0 ce que la somme restante \u00e0 rendre soit nulle.</p> <p>Les pi\u00e8ces de monnaie utilis\u00e9es sont :</p> <p><code>pieces = [1, 2, 5, 10, 20, 50, 100, 200]</code></p> <p>On souhaite \u00e9crire une fonction <code>rendu_monnaie</code> qui prend en param\u00e8tres</p> <ul> <li>un entier <code>somme_due</code> repr\u00e9sentant la somme \u00e0 payer ;</li> <li>un entier <code>somme_versee</code> repr\u00e9sentant la somme vers\u00e9e qui est sup\u00e9rieure ou \u00e9gale \u00e0 <code>somme_due</code> ;</li> </ul> <p>et qui renvoie un tableau de type <code>list</code> contenant les pi\u00e8ces qui composent le rendu de la monnaie restante, c\u2019est-\u00e0-dire de <code>somme_versee - somme_due</code>.</p> <p>Ainsi, l\u2019instruction <code>rendu_monnaie(452, 500)</code> renvoie le tableau <code>[20, 20, 5, 2, 1]</code>.</p> <p>En effet, la somme \u00e0 rendre est de <code>48</code> euros soit <code>20 + 20 + 5 + 2 + 1</code>.</p> <p>Le code de la fonction <code>rendu_monnaie</code> est donn\u00e9 ci-dessous :</p> <pre><code>def rendu_monnaie(somme_due, somme_versee):\n    '''Renvoie la liste des pi\u00e8ces \u00e0 rendre pour rendre la monnaie\n    lorsqu'on doit rendre somme_versee - somme_due'''\n    rendu = ... \n    a_rendre = ... \n    i = len(pieces) - 1\n    while a_rendre &gt; ...: \n        while pieces[i] &gt; a_rendre:\n            i = i - 1\n        rendu.append(...) \n        a_rendre = ... \n    return rendu\n</code></pre> <p>Compl\u00e9ter ce code et le tester :</p> <pre><code>&gt;&gt;&gt; rendu_monnaie(700, 700)\n[]\n&gt;&gt;&gt; rendu_monnaie(102, 500)\n[200, 100, 50, 20, 20, 5, 2, 1]\n</code></pre> <pre><code>pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n\ndef rendu_monnaie(somme_due, somme_versee):\n    '''Renvoie la liste des pi\u00e8ces \u00e0 rendre pour rendre la monnaie\n    lorsqu'on doit rendre somme_versee - somme_due'''\n    rendu = [] \n    a_rendre = somme_versee - somme_due \n    i = len(pieces) - 1\n    while a_rendre &gt; 0: \n        while pieces[i] &gt; a_rendre:\n            i = i - 1\n        rendu.append(pieces[i]) \n        a_rendre = a_rendre - pieces[i] \n    return rendu\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-46","title":"\u25b6 Sujet 46","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-461","title":"Exercice 46.1","text":"<p>Exercice 46.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres un tableau <code>tab</code> de nombres entiers tri\u00e9s par ordre croissant et un nombre entier <code>n</code>, et qui effectue une recherche dichotomique du nombre entier <code>n</code> dans le tableau non vide <code>tab</code>.</p> <p>Cette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le tableau, <code>None</code> sinon.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5) # renvoie None\n</code></pre></p> <pre><code>def recherche(tab, n):\n    ind_debut = 0\n    ind_fin = len(tab) - 1\n    while ind_debut &lt;= ind_fin:\n        ind_milieu = (ind_debut + ind_fin) // 2\n        if tab[ind_milieu] == n:\n            return ind_milieu\n        elif tab[ind_milieu] &lt; n:\n            ind_debut = ind_milieu + 1\n        else:\n            ind_fin = ind_milieu - 1\n    return None\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-462","title":"Exercice 46.2","text":"<p>Exercice 46.2</p> \u00c9nonc\u00e9Correction <p>Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant dans l\u2019alphabet. Par exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A, le Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019 ...) ne sont pas cod\u00e9s.</p> <p>La fonction <code>position_alphabet</code> ci-dessous prend en param\u00e8tre un caract\u00e8re <code>lettre</code> et renvoie la position de <code>lettre</code> dans la cha\u00eene de caract\u00e8res <code>alphabet</code> s\u2019il s\u2019y trouve.</p> <p>La fonction <code>cesar</code> prend en param\u00e8tres une cha\u00eene de caract\u00e8res <code>message</code> et un nombre entier <code>decalage</code> et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant le d\u00e9calage <code>decalage</code>.</p> <pre><code>alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    '''Renvoie la position de la lettre dans l'alphabet'''\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    '''Renvoie le message cod\u00e9 par la m\u00e9thode de C\u00e9sar\n    pour le decalage donn\u00e9'''\n    resultat = ''\n    for ... in message: \n        if 'A' &lt;= c and c &lt;= 'Z':\n            indice = (...) % 26 \n            resultat = resultat + alphabet[indice]\n        else:\n            resultat = ... \n    return resultat\n</code></pre> <p>Compl\u00e9ter la fonction <code>cesar</code>.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; cesar('BONJOUR A TOUS. VIVE LA MATIERE NSI !', 4)\n'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !'\n&gt;&gt;&gt; cesar('GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !', -5)\n'BONJOUR A TOUS. VIVE LA MATIERE NSI !'\n</code></pre> <pre><code>alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    '''Renvoie la position de la lettre dans l'alphabet'''\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    '''Renvoie le message cod\u00e9 par la m\u00e9thode de C\u00e9sar\n    pour le decalage donn\u00e9'''\n    resultat = ''\n    for c in message: \n        if 'A' &lt;= c and c &lt;= 'Z':\n            indice = (position_alphabet(c) + decalage) % 26 \n            resultat = resultat + alphabet[indice]\n        else:\n            resultat = resultat + c \n    return resultat\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-47","title":"\u25b6 Sujet 47","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-471","title":"Exercice 47.1","text":"<p>Exercice 47.1</p> \u00c9nonc\u00e9Correction <p>Sur le r\u00e9seau social TipTop, on s\u2019int\u00e9resse au nombre de \u00ab like \u00bb des abonn\u00e9s. Les donn\u00e9es sont stock\u00e9es dans des dictionnaires o\u00f9 les cl\u00e9s sont les pseudos et les valeurs correspondantes sont les nombres de \u00ab like \u00bb comme ci-dessous :</p> <p><code>{'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50}</code></p> <p>\u00c9crire une fonction <code>max_dico</code> qui :</p> <ul> <li>Prend en param\u00e8tre un dictionnaire <code>dico</code> non vide dont les cl\u00e9s sont des cha\u00eenes de caract\u00e8res et les valeurs associ\u00e9es sont des entiers ;</li> <li>Renvoie un tuple dont :<ul> <li>La premi\u00e8re valeur est une cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale ;</li> <li>la seconde valeur est cette valeur maximale.</li> </ul> </li> </ul> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; max_dico({'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50})\n('Ada', 201)\n&gt;&gt;&gt; max_dico({'Alan': 222, 'Ada': 201, 'Eve': 220, 'Tim': 50})\n('Alan', 222)\n</code></pre> <pre><code>def max_dico(dico):\n    cle_max = ''\n    val_max = 0\n    for cle in dico:\n        if dico[cle] &gt; val_max:\n            val_max = dico[cle]\n            cle_max = cle\n    return (cle_max, val_max)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-472","title":"Exercice 47.2","text":"<p>Exercice 47.2</p> \u00c9nonc\u00e9Correction <p>Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme par exemple : (2 + 3) \u00d7 5. </p> <p>Il existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en saisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On mod\u00e9lise cette saisie par le tableau <code>[2, 3, '+', 5, '*']</code>. </p> <p>Autre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : </p> <p><code>[3, 2, '*', 5, '+']</code>. </p> <p>D\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation postfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche \u00e0 droite de la fa\u00e7on suivante :</p> <ul> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ;</li> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au sommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet de la pile.</li> <li>\u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de l\u2019expression arithm\u00e9tique.</li> </ul> <p>Dans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +.</p> <p>Pour cet exercice, on dispose d\u2019une classe <code>Pile</code> qui impl\u00e9mente les m\u00e9thodes de base sur la structure de pile.</p> <p>Compl\u00e9ter le script de la fonction <code>eval_expression</code> qui re\u00e7oit en param\u00e8tre une liste python repr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur associ\u00e9e.</p> <pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide. Produit une erreur sinon.\n        \"\"\"\n        assert not self.est_vide()\n        return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for ... in tab:\n        if element != '+' ... element != '*':\n            p.empiler(...)\n        else:\n            if element == ...:\n                resultat = ... + ...\n            else:\n                resultat = ...\n            p.empiler(...)\n    return ...\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; eval_expression([2, 3, '+', 5, '*'])\n25\n&gt;&gt;&gt; eval_expression([1, 2, '+', 3, '*'])\n9\n&gt;&gt;&gt; eval_expression([1, 2, 3, '+', '*'])\n5\n</code></pre> <pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for element in tab:\n        if element != '+' and element != '*':\n            p.empiler(element)\n        else:\n            if element == '+':\n                resultat = p.depiler() + p.depiler()\n            else:\n                resultat = p.depiler() * p.depiler()\n            p.empiler(resultat)\n    return p.depiler()\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#sujet-48","title":"\u25b6 Sujet 48","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-481","title":"Exercice 48.1","text":"<p>Exercice 48.1</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re dans cet exercice un graphe orient\u00e9 repr\u00e9sent\u00e9 sous forme de listes d\u2019adjacence.</p> <p>On suppose que les sommets sont num\u00e9rot\u00e9s de <code>0</code> \u00e0 <code>n-1</code>.</p> <p>Par exemple, le graphe suivant :</p> <p></p> <p>est repr\u00e9sent\u00e9 par la liste d\u2019adjacence suivante :</p> <pre><code>adj = [[1, 2], [2], [0], [0]]\n</code></pre> <p>\u00c9crire une fonction <code>voisins_entrants(adj, x)</code> qui prend en param\u00e8tre le graphe donn\u00e9 sous forme de liste d\u2019adjacence et qui renvoie une liste contenant les voisins entrants du sommet <code>x</code>, c\u2019est-\u00e0-dire les sommets <code>y</code> tels qu\u2019il existe une ar\u00eate de <code>y</code> vers <code>x</code>.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; voisins_entrants([[1, 2], [2], [0], [0]], 0)\n[2, 3]\n&gt;&gt;&gt; voisins_entrants([[1, 2], [2], [0], [0]], 1)\n[0]\n</code></pre> <pre><code>def voisins_entrants(adj, x):\n    vois = []\n    for i in range(len(adj)):\n        if x in adj[i]:\n            vois.append(i)\n    return vois\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2024/#exercice-482","title":"Exercice 48.2","text":"<p>Exercice 48.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re dans cet exercice la suite de nombre suivante : 1, 11, 21, 1211, 111221, ...</p> <p>Cette suite est construite ainsi : pour passer d\u2019une valeur \u00e0 la suivante, on la lit et on l\u2019\u00e9crit sous la forme d\u2019un nombre. Ainsi, pour 1211 :</p> <ul> <li>on lit un 1, un 2, deux 1 ;</li> <li>on \u00e9crit donc en nombre 1 1, 1 2, 2 1 ;</li> <li>puis on concat\u00e8ne 111221.</li> </ul> <p>Compl\u00e9ter la fonction <code>nombre_suivant</code> qui prend en entr\u00e9e un nombre sous forme de chaine de caract\u00e8res et qui renvoie le nombre suivant par ce proc\u00e9d\u00e9, encore sous forme de cha\u00eene de caract\u00e8res.</p> <pre><code>def nombre_suivant(s):\n    '''Renvoie le nombre suivant de celui represent\u00e9 par s\n    en appliquant le proc\u00e9d\u00e9 de lecture.'''\n    resultat = ''\n    chiffre = s[0]\n    compte = 1\n    for i in range(...): \n        if s[i] == chiffre:\n            compte = ... \n        else:\n            resultat += ... + ... \n            chiffre = ... \n            ...\n    lecture_... = ... + ... \n    resultat += lecture_chiffre\n    return resultat\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; nombre_suivant('1211')\n'111221'\n&gt;&gt;&gt; nombre_suivant('311')\n'1321'\n</code></pre> <pre><code>def nombre_suivant(s):\n    '''Renvoie le nombre suivant de celui represent\u00e9 par s\n    en appliquant le proc\u00e9d\u00e9 de lecture.'''\n    resultat = ''\n    chiffre = s[0]\n    compte = 1\n    for i in range(1,len(s)): \n        if s[i] == chiffre:\n            compte = compte + 1 \n        else:\n            resultat += str(compte) + chiffre \n            chiffre = s[i] \n            compte = 1\n    lecture_chiffre = str(compte) + chiffre \n    resultat += lecture_chiffre\n    return resultat\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/","title":"\u00c9preuve Pratique BNS 2025","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-01","title":"\u25b6 Sujet 01","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-011","title":"Exercice 01.1","text":"<p>Exercice 01.1</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re dans cet exercice un graphe orient\u00e9 repr\u00e9sent\u00e9 sous forme de listes d\u2019adjacence.</p> <p>On suppose que les sommets sont num\u00e9rot\u00e9s de <code>0</code> \u00e0 <code>n-1</code>.</p> <p>Par exemple, le graphe suivant :</p> <p></p> <p>est repr\u00e9sent\u00e9 par la liste d\u2019adjacence suivante :</p> <pre><code>adj = [[1, 2], [2], [0], [0]]\n</code></pre> <p>\u00c9crire une fonction <code>voisins_entrants(adj, x)</code> qui prend en param\u00e8tre le graphe donn\u00e9 sous forme de liste d\u2019adjacence et qui renvoie une liste contenant les voisins entrants du sommet <code>x</code>, c\u2019est-\u00e0-dire les sommets <code>y</code> tels qu\u2019il existe une ar\u00eate de <code>y</code> vers <code>x</code>.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; voisins_entrants([[1, 2], [2], [0], [0]], 0)\n[2, 3]\n&gt;&gt;&gt; voisins_entrants([[1, 2], [2], [0], [0]], 1)\n[0]\n</code></pre> <pre><code>def voisins_entrants(adj, x):\n    vois = []\n    for i in range(len(adj)):\n        if x in adj[i]:\n            vois.append(i)\n    return vois\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-012","title":"Exercice 01.2","text":"<p>Exercice 01.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re dans cet exercice la suite de nombre suivante : 1, 11, 21, 1211, 111221, ...</p> <p>Cette suite est construite ainsi : pour passer d\u2019une valeur \u00e0 la suivante, on la lit et on l\u2019\u00e9crit sous la forme d\u2019un nombre. Ainsi, pour 1211 :</p> <ul> <li>on lit un 1, un 2, deux 1 ;</li> <li>on \u00e9crit donc en nombre 1 1, 1 2, 2 1 ;</li> <li>puis on concat\u00e8ne 111221.</li> </ul> <p>Compl\u00e9ter la fonction <code>nombre_suivant</code> qui prend en entr\u00e9e un nombre sous forme de chaine de caract\u00e8res et qui renvoie le nombre suivant par ce proc\u00e9d\u00e9, encore sous forme de cha\u00eene de caract\u00e8res.</p> <pre><code>def nombre_suivant(s):\n    '''Renvoie le nombre suivant de celui represent\u00e9 par s\n    en appliquant le proc\u00e9d\u00e9 de lecture.'''\n    resultat = ''\n    chiffre = s[0]\n    compte = 1\n    for i in range(...): \n        if s[i] == chiffre:\n            compte = ... \n        else:\n            resultat += ... + ... \n            chiffre = ... \n            ...\n    lecture_... = ... + ... \n    resultat += lecture_chiffre\n    return resultat\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; nombre_suivant('1211')\n'111221'\n&gt;&gt;&gt; nombre_suivant('311')\n'1321'\n</code></pre> <pre><code>def nombre_suivant(s):\n    '''Renvoie le nombre suivant de celui represent\u00e9 par s\n    en appliquant le proc\u00e9d\u00e9 de lecture.'''\n    resultat = ''\n    chiffre = s[0]\n    compte = 1\n    for i in range(1,len(s)): \n        if s[i] == chiffre:\n            compte = compte + 1 \n        else:\n            resultat += str(compte) + chiffre \n            chiffre = s[i] \n            compte = 1\n    lecture_chiffre = str(compte) + chiffre \n    resultat += lecture_chiffre\n    return resultat\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-02","title":"\u25b6 Sujet 02","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-021","title":"Exercice 02.1","text":"<p>Exercice 02.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>max_et_indice</code> qui prend en param\u00e8tre un tableau non vide <code>tab</code> de nombres entiers et qui renvoie la valeur du plus grand \u00e9l\u00e9ment de ce tableau ainsi que l\u2019indice de sa premi\u00e8re apparition dans ce tableau.</p> <p>L\u2019utilisation de la fonction native <code>max</code> n\u2019est pas autoris\u00e9e.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; max_et_indice([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, 3)\n&gt;&gt;&gt; max_et_indice([-2])\n(-2, 0)\n&gt;&gt;&gt; max_et_indice([-1, -1, 3, 3, 3])\n(3, 2)\n&gt;&gt;&gt; max_et_indice([1, 1, 1, 1])\n(1, 0)\n</code></pre> <pre><code>def max_et_indice(tab):\n    '''\n    renvoie la valeur du plus grand \u00e9l\u00e9ment de ce tableau ainsi\n    que l\u2019indice de sa premi\u00e8re apparition dans ce tableau.\n    '''\n    val_max = tab[0]\n    ind_max = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n            ind_max = i\n    return (val_max, ind_max)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-022","title":"Exercice 02.2","text":"<p>Exercice 02.2</p> \u00c9nonc\u00e9Correction <p>L\u2019ordre des g\u00e8nes sur un chromosome est repr\u00e9sent\u00e9 par un tableau <code>ordre</code> de <code>n</code> cases d\u2019entiers distincts deux \u00e0 deux et compris entre 1 et <code>n</code>.</p> <p>Par exemple, <code>ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]</code> dans le cas <code>n = 9</code>.</p> <p>On dit qu\u2019il y a un point de rupture dans <code>ordre</code> dans chacune des situations suivantes :</p> <ul> <li>la premi\u00e8re valeur de <code>ordre</code> n\u2019est pas 1 ;</li> <li>l\u2019\u00e9cart entre deux g\u00e8nes cons\u00e9cutifs n\u2019est pas \u00e9gal \u00e0 1 ;</li> <li>la derni\u00e8re valeur de <code>ordre</code> n\u2019est pas n.</li> </ul> <p>Par exemple, si <code>ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]</code> avec <code>n = 9</code>, on a</p> <ul> <li>un point de rupture au d\u00e9but car 5 est diff\u00e9rent de 1</li> <li>un point de rupture entre 3 et 6 (l\u2019\u00e9cart est de 3)</li> <li>un point de rupture entre 7 et 2 (l\u2019\u00e9cart est de 5)</li> <li>un point de rupture entre 1 et 8 (l\u2019\u00e9cart est de 7)</li> </ul> <p>Il y a donc 4 points de rupture.</p> <p>Compl\u00e9ter les fonctions Python <code>est_un_ordre</code> et <code>nombre_points_rupture</code> propos\u00e9es \u00e0 la page suivante pour que :</p> <ul> <li> <p>la fonction <code>est_un_ordre</code> renvoie <code>True</code> si le tableau pass\u00e9 en param\u00e8tre repr\u00e9sente bien un ordre de g\u00e8nes de chromosome et <code>False</code> sinon ;</p> </li> <li> <p>la fonction <code>nombre_points_rupture</code> renvoie le nombre de points de rupture d\u2019un tableau pass\u00e9 en param\u00e8tre repr\u00e9sentant l\u2019ordre de g\u00e8nes d\u2019un chromosome.</p> </li> </ul> <pre><code>def est_un_ordre(tab):\n    '''\n    Renvoie True si tab est de longueur n et contient tous les\n    entiers de 1 \u00e0 n, False sinon\n    '''\n    n = len(tab)\n    # les entiers vus lors du parcours\n    vus = ... \n\n    for x in tab:\n        if x &lt; ... or x &gt;... or ...: \n            return False\n        ... .append(...) \n    return True\n\ndef nombre_points_rupture(ordre):\n    '''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente \n    un ordre de g\u00e8nes de chromosome\n    '''\n    # on v\u00e9rifie que ordre est un ordre de g\u00e8nes\n    assert ... \n    n = len(ordre)\n    nb = 0\n    if ordre[...] != 1: # le premier n'est pas 1 \n        nb = nb + 1\n    i = 0\n    while i &lt; ...: \n        if ... not in [-1, 1]: # l'\u00e9cart n'est pas 1 \n            nb = nb + 1\n        i = i + 1\n    if ordre[i] != ...: # le dernier n'est pas n \n        nb = nb + 1\n    return nb\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; est_un_ordre([1, 6, 2, 8, 3, 7])\nFalse\n&gt;&gt;&gt; est_un_ordre([5, 4, 3, 6, 7, 2, 1, 8, 9])\nTrue\n&gt;&gt;&gt; nombre_points_rupture([5, 4, 3, 6, 7, 2, 1, 8, 9])\n4\n&gt;&gt;&gt; nombre_points_rupture([1, 2, 3, 4, 5])\n0\n&gt;&gt;&gt; nombre_points_rupture([1, 6, 2, 8, 3, 7, 4, 5])\n7\n&gt;&gt;&gt; nombre_points_rupture([2, 1, 3, 4])\n2\n</code></pre> <pre><code>def est_un_ordre(tab):\n    '''\n    Renvoie True si tab est de longueur n et contient tous les\n    entiers de 1 \u00e0 n, False sinon\n    '''\n    n = len(tab)\n    # les entiers vus lors du parcours\n    vus = [] \n\n    for x in tab:\n        if x &lt; 1 or x &gt; n or x in vus: \n            return False\n        vus.append(x) \n    return True\n\ndef nombre_points_rupture(ordre):\n    '''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente \n    un ordre de g\u00e8nes de chromosome\n    '''\n    # on v\u00e9rifie que ordre est un ordre de g\u00e8nes\n    assert est_un_ordre(ordre) \n    n = len(ordre)\n    nb = 0\n    if ordre[0] != 1: # le premier n'est pas 1 \n        nb = nb + 1\n    i = 0\n    while i &lt; n - 1: \n        if ordre[i+1] - ordre[i] not in [-1, 1]: # l'\u00e9cart n'est pas 1 \n            nb = nb + 1\n        i = i + 1\n    if ordre[i] != n: # le dernier n'est pas n \n        nb = nb + 1\n    return nb\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-03","title":"\u25b6 Sujet 03","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-031","title":"Exercice 03.1","text":"<p>Exercice 03.1</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par :</p> <ul> <li>les deux premi\u00e8res valeurs sont \u00e9gales \u00e0 1 ;</li> <li>ensuite, chaque valeur est obtenue en faisant la somme des deux valeurs qui la pr\u00e9c\u00e8dent.</li> </ul> <p>La troisi\u00e8me valeur est donc \\(1+1 = 2\\), la quatri\u00e8me est \\(1+2 = 3\\), la cinqui\u00e8me est \\(2+3 = 5\\), la sixi\u00e8me est \\(3 + 5 = 8\\), et ainsi de suite.</p> <p>Cette suite d\u2019entiers est connue sous le nom de suite de Fibonacci.</p> <p>\u00c9crire en Python une fonction <code>fibonacci</code> qui prend en param\u00e8tre un entier <code>n</code> suppos\u00e9 strictement positif et qui renvoie le terme d\u2019indice <code>n</code> de cette suite.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n</code></pre> <p>Version r\u00e9cursive :</p> <pre><code>def fibonacci(n):\n    if n &lt;= 2 :\n        return 1   \n    else :\n        return fibonacci(n-1) + fibonacci(n-2)\n</code></pre> <p>Version programmation dynamique bottom-up:</p> <pre><code>def fibonacci(n):\n    d = {}\n    d[1] = 1\n    d[2] = 1\n    for k in range(3, n+1):\n        d[k] = d[k-1] + d[k-2]\n    return d[n]\n</code></pre> <p>Version programmation dynamique top-down avec m\u00e9mo\u00efsation:</p> <pre><code>dict_fibo = {1:1, 2:1}\ndef fibonacci(n):\n    if n in dict_fibo:\n        return dict_fibo[n]\n    dict_fibo[n] = fibonacci(n-1) + fibonacci(n-2)\n    return dict_fibo[n]\n</code></pre> <p>On peut constater que la version r\u00e9cursive \u00e9choue \u00e0 calculer <code>fibonacci(45)</code>, alors que les deux autres versions le font quasi-imm\u00e9diatement. </p>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-032","title":"Exercice 03.2","text":"<p>Exercice 03.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la fonction <code>eleves_du_mois</code> prenant en param\u00e8tres <code>eleves</code> et <code>notes</code> deux tableaux non vides de m\u00eame longueur, le premier contenant le nom des \u00e9l\u00e8ves et le second, des entiers positifs d\u00e9signant leur note \u00e0 un contr\u00f4le de sorte que <code>eleves[i]</code> a obtenu la note <code>notes[i]</code>.  </p> <p>Cette fonction renvoie le couple constitu\u00e9 de la note maximale attribu\u00e9e et des noms des \u00e9l\u00e8ves ayant obtenu cette note regroup\u00e9s dans un tableau.  </p> <p>Ainsi, l\u2019instruction <code>eleves_du_mois(['a', 'b', 'c', 'd'], [15, 18, 12, 18])</code> renvoie le couple <code>(18, ['b', 'd'])</code>.</p> <pre><code>def eleves_du_mois(eleves, notes):\n    note_maxi = 0\n    meilleurs_eleves =  ...\n\n    for i in range(...) :\n        if notes[i] == ... :\n            meilleurs_eleves.append(...)\n        elif notes[i] &gt; note_maxi:\n            note_maxi = ...\n            meilleurs_eleves = [...]\n\n    return (note_maxi,meilleurs_eleves)\n</code></pre> <p>Compl\u00e9ter ce code.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; eleves_nsi = ['a','b','c','d','e','f','g','h','i','j']\n&gt;&gt;&gt; notes_nsi = [30, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n&gt;&gt;&gt; eleves_du_mois(eleves_nsi, notes_nsi)\n(80, ['c', 'f', 'h'])\n</code></pre> <pre><code>def eleves_du_mois(eleves, notes):\n    note_maxi = 0\n    meilleurs_eleves =  []\n\n    for i in range(len(eleves)) :\n        if notes[i] == note_maxi :\n            meilleurs_eleves.append(eleves[i])\n        elif notes[i] &gt; note_maxi:\n            note_maxi = notes[i]\n            meilleurs_eleves = [eleves[i]]\n\n    return (note_maxi, meilleurs_eleves)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-04","title":"\u25b6 Sujet 04","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-041","title":"Exercice 04.1","text":"<p>Exercice 04.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>ecriture_binaire_entier_positif</code> qui prend en param\u00e8tre un entier positif <code>n</code> et renvoie une une chaine de caract\u00e8re correspondant \u00e0 l\u2018\u00e9criture binaire de <code>n</code>.</p> <p>On rappelle que :</p> <ul> <li>l\u2019\u00e9criture binaire de 25 est 11001 car \\(25 = 1 \\times 2^4 + 1 \\times 2^3 + 0 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0\\) ;</li> <li><code>n % 2</code> vaut 0 ou 1 selon que <code>n</code> est pair ou impair ;</li> <li><code>n // 2</code>  donne le quotient de la division euclidienne de <code>n</code> par 2.</li> </ul> <p>Il est interdit dans cet exercice d\u2019utiliser la fonction <code>bin</code> de Python.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; 5 % 2\n1\n&gt;&gt;&gt; 5 // 2\n2\n&gt;&gt;&gt; ecriture_binaire_entier_positif(0)\n'0'\n&gt;&gt;&gt; ecriture_binaire_entier_positif(2)\n'10'\n&gt;&gt;&gt; ecriture_binaire_entier_positif(105)\n'1101001'\n</code></pre> <pre><code>def ecriture_binaire_entier_positif(n):\n    if n == 0:\n        return '0' \n    bin_n = '' \n    while n != 0 : \n        bin_n = str(n % 2) + bin_n \n        n = n // 2\n    return bin_n\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-042","title":"Exercice 04.2","text":"<p>Exercice 04.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>tri_bulles</code> prend en param\u00e8tre une liste <code>tab</code> d\u2019entiers (type <code>list</code>) et le modifie pour le trier par ordre croissant.</p> <p>Le tri \u00e0 bulles est un tri en place qui commence par placer le plus grand \u00e9l\u00e9ment en derni\u00e8re position en parcourant le tableau de gauche \u00e0 droite et en \u00e9changeant au passage les \u00e9l\u00e9ments voisins mal ordonn\u00e9s (si la valeur de l\u2019\u00e9l\u00e9ment d\u2019indice <code>i</code> a une valeur strictement sup\u00e9rieure \u00e0 celle de l\u2019indice <code>i + 1</code>, ils sont \u00e9chang\u00e9s). Le tri place ensuite en avant-derni\u00e8re position le plus grand \u00e9l\u00e9ment du tableau priv\u00e9 de son dernier \u00e9l\u00e9ment en proc\u00e9dant encore \u00e0 des \u00e9changes d\u2019\u00e9l\u00e9ments voisins. Ce principe est r\u00e9p\u00e9t\u00e9 jusqu\u2019\u00e0 placer le minimum en premi\u00e8re position.</p> <p>Exemple : pour trier le tableau <code>[7, 9, 4, 3]</code> :</p> <ul> <li>premi\u00e8re \u00e9tape : 7 et 9 ne sont pas \u00e9chang\u00e9s, puis 9 et 4 sont \u00e9chang\u00e9s, puis 9 et 3 sont \u00e9chang\u00e9s, le tableau est alors <code>[7, 4, 3, 9]</code></li> <li>deuxi\u00e8me \u00e9tape : 7 et 4 sont \u00e9chang\u00e9s, puis 7 et 3 sont \u00e9chang\u00e9s, le tableau est alors <code>[4, 3, 7, 9]</code></li> <li>troisi\u00e8me \u00e9tape : 4 et 3 sont \u00e9chang\u00e9s, le tableau est alors <code>[3, 4, 7, 9]</code></li> </ul> <p>Compl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction tri_bulles.</p> <pre><code>def echange(tab, i, j):\n    '''Echange les \u00e9l\u00e9ments d'indice i et j dans le tableau tab.'''\n    temp = ... \n    tab[i] = ... \n    tab[j] = ... \n\ndef tri_bulles(tab):\n    '''Trie le tableau tab dans l'ordre croissant\n    par la m\u00e9thode du tri \u00e0 bulles.'''\n    n = len(tab)\n    for i in range(...): \n        for j in range(...): \n            if ... &gt; ...: \n                echange(tab, j, ...) \n</code></pre> <p>Exemples : <pre><code>&gt;&gt;&gt; tab = []\n&gt;&gt;&gt; tri_bulles(tab)\n&gt;&gt;&gt; tab\n[]\n&gt;&gt;&gt; tab2 = [9, 3, 7, 2, 3, 1, 6]\n&gt;&gt;&gt; tri_bulles(tab2)\n&gt;&gt;&gt; tab2\n[1, 2, 3, 3, 6, 7, 9]\n&gt;&gt;&gt; tab3 = [9, 7, 4, 3]\n&gt;&gt;&gt; tri_bulles(tab3)\n&gt;&gt;&gt; tab3\n[3, 4, 7, 9]\n</code></pre></p> <pre><code>def echange(tab, i, j):\n    '''Echange les \u00e9l\u00e9ments d'indice i et j dans le tableau tab.'''\n    temp = tab[i] \n    tab[i] = tab[j] \n    tab[j] = temp \n\ndef tri_bulles(tab):\n    '''Trie le tableau tab dans l'ordre croissant\n    par la m\u00e9thode du tri \u00e0 bulles.'''\n    n = len(tab)\n    for i in range(n-1, -1, -1): \n        for j in range(i): \n            if tab[j] &gt; tab[j+1]: \n                echange(tab, j, j+1) \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-05","title":"\u25b6 Sujet 05","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-051","title":"Exercice 05.1","text":"<p>Exercice 05.1</p> \u00c9nonc\u00e9Correction <p>Programmer une fonction <code>renverse</code>, prenant en param\u00e8tre une cha\u00eene de caract\u00e8res <code>mot</code> et renvoie cette cha\u00eene de caract\u00e8res en ordre inverse.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; renverse(\"\")\n\"\"\n&gt;&gt;&gt; renverse(\"abc\")\n\"cba\"\n&gt;&gt;&gt; renverse(\"informatique\")\n\"euqitamrofni\"\n</code></pre> <pre><code>def renverse(mot):\n    sol = ''\n    for lettre in mot:\n        sol = lettre + sol\n    return sol\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-052","title":"Exercice 05.2","text":"<p>Exercice 05.2</p> \u00c9nonc\u00e9Correction <p>Un nombre premier est un nombre entier naturel qui admet exactement deux diviseurs distincts entiers et positifs : 1 et lui-m\u00eame. </p> <p>Le crible d\u2019\u00c9ratosth\u00e8ne permet de d\u00e9terminer les nombres premiers plus petit qu\u2019un certain nombre <code>n</code> fix\u00e9. </p> <p>On consid\u00e8re pour cela un tableau <code>tab</code> de <code>n</code>bool\u00e9ens, initialement tous \u00e9gaux \u00e0 <code>True</code>, sauf <code>tab[0]</code> et <code>tab[1]</code> qui valent <code>False</code>, 0 et 1 n\u2019\u00e9tant pas des nombres premiers.  </p> <p>On parcourt alors ce tableau de gauche \u00e0 droite.  </p> <p>Pour chaque indice <code>i</code> :</p> <ul> <li> <p>si <code>tab[i]</code> vaut <code>True</code> : le nombre <code>i</code> est premier et on donne la valeur <code>False</code> \u00e0 toutes les cases du tableau dont l\u2019indice est un multiple de <code>i</code>, \u00e0 partir de <code>2*i</code> (c\u2019est-\u00e0-dire <code>2*i</code>, <code>3*i</code> ...).</p> </li> <li> <p>si <code>tab[i]</code> vaut <code>False</code> : le nombre <code>i</code> n\u2019est pas premier et on n\u2019effectue aucun changement sur le tableau. </p> </li> </ul> <p>On dispose de la fonction <code>crible</code>, incompl\u00e8te et donn\u00e9e ci-dessous, prenant en param\u00e8tre un entier <code>n</code>  sup\u00e9rieur \u00e0 1 et renvoyant un tableau contenant tous les nombres premiers plus petits que <code>n</code>.</p> <pre><code>def crible(n):\n    \"\"\"Renvoie un tableau contenant tous les nombres premiers\n    plus petits que n.\"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\n    for i in range(n):\n        if tab[i]:\n            premiers.... \n            multiple = ... \n            while multiple &lt; n:\n                tab[multiple] = ... \n                multiple = ... \n    return premiers\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; crible(40)\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n&gt;&gt;&gt; crible(5)\n[2, 3]\n</code></pre> <pre><code>def crible(n):\n    \"\"\"Renvoie un tableau contenant tous les nombres premiers\n    plus petits que n.\"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\n    for i in range(n):\n        if tab[i]:\n            premiers.append(i)\n            multiple = 2*i \n            while multiple &lt; n:\n                tab[multiple] = False \n                multiple = multiple + i \n    return premiers\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-06","title":"\u25b6 Sujet 06","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-061","title":"Exercice 06.1","text":"<p>Exercice 06.1</p> \u00c9nonc\u00e9Correction <p>On rappelle que :</p> <ul> <li>le nombre \\(a^n\\) est le nombre \\(a \\times a \\times a \\times \\dots \\times a\\), o\u00f9 le facteur \\(a\\) appara\u00eet \\(n\\) fois,</li> <li>en langage Python, l\u2019instruction <code>t[-1]</code> permet d\u2019acc\u00e9der au dernier \u00e9l\u00e9ment du tableau <code>t</code>.</li> </ul> <p>Dans cet exercice, l\u2019op\u00e9rateur <code>**</code>  et la fonction <code>pow</code> ne sont pas autoris\u00e9s.</p> <p>Programmer en langage Python une fonction <code>liste_puissances</code> qui prend en arguments un nombre entier <code>a</code>, un entier strictement positif <code>n</code> et qui renvoie la liste de ses puissances \\(\\rm{[a^1, a^2, ..., a^n]}\\).</p> <p>Programmer \u00e9galement une fonction <code>liste_puisssances_borne</code> qui prend en arguments un nombre entier <code>a</code> sup\u00e9rieur ou \u00e9gal \u00e0 2 et un entier <code>borne</code>, et qui renvoie la liste de ses puissances, \u00e0 l\u2019exclusion de \\(\\rm{a^0}\\), strictement inf\u00e9rieures \u00e0 <code>borne</code>.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; liste_puissances(3, 5)\n[3, 9, 27, 81, 243]\n&gt;&gt;&gt; liste_puissances(-2, 4)\n[-2, 4, -8, 16]\n&gt;&gt;&gt; liste_puissances_borne(2, 16)\n[2, 4, 8]\n&gt;&gt;&gt; liste_puissances_borne(2, 17)\n[2, 4, 8, 16]\n&gt;&gt;&gt; liste_puissances_borne(5, 5)\n[]\n</code></pre> <pre><code>def liste_puissances(a,n):\n    puissances = [a]\n    for i in range(n-1):\n        puissances.append(puissances[-1] * a)\n    return puissances\n\ndef liste_puissances_borne(a, borne):\n    lst = []\n    val = a\n    while val &lt; borne:\n        lst.append(val)\n        val = val * a\n    return lst\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-062","title":"Exercice 06.2","text":"<p>Exercice 06.2</p> \u00c9nonc\u00e9Correction <p>On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous :</p> A B C D E F G H I J K L M 1 2 3 4 5 6 7 8 9 10 11 12 13 N O P Q R S T U V W X Y Z 14 15 16 17 18 19 20 21 22 23 24 25 26 <p>Cette table de correspondance est stock\u00e9e dans un dictionnaire <code>dico</code> o\u00f9 les cl\u00e9s sont les lettres de l\u2019alphabet et les valeurs les codes correspondants.</p> <pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n</code></pre> <p>Pour un mot donn\u00e9, on d\u00e9termine d\u2019une part son code alphab\u00e9tique concat\u00e9n\u00e9, obtenu par la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, son code additionn\u00e9, qui est la somme des codes de chacun de ses caract\u00e8res.</p> <p>Par ailleurs, on dit que ce mot est \u00ab parfait \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.</p> <p>Exemples :</p> <ul> <li> <p>Pour le mot <code>\"PAUL\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1612112'</code>, soit l\u2019entier 1 612 112. Son code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50. 50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot <code>\"PAUL\"</code> n\u2019est pas parfait.</p> </li> <li> <p>Pour le mot <code>\"ALAIN\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1121914'</code>, soit l\u2019entier 1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37. 37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot <code>\"ALAIN\"</code> est parfait.</p> </li> </ul> <p>Compl\u00e9ter la fonction <code>codes_parfait</code> situ\u00e9e \u00e0 la page suivante et qui prend en param\u00e8tre un mot en majuscule et renvoie un triplet constitu\u00e9 du code additionn\u00e9, du code concat\u00e9n\u00e9 et d\u2019un bool\u00e9en indiquant si le mot est parfait ou non.</p> <p>On rappelle que pour tester si un entier <code>b</code> divise un entier <code>a</code>, on utilise l'op\u00e9rateur modulo <code>a % b</code> qui renvoie le reste de la division euclidienne de <code>a</code> par <code>b</code>. Si <code>a % b</code> vaut 0, alors <code>b</code> divise <code>a</code>.</p> <pre><code>def codes_parfait(mot):\n    \"\"\"Renvoie un triplet \n    (code_additionne, code_concatene, mot_est_parfait) o\u00f9 :\n    - code_additionne est la somme des codes des lettres du mot ;\n    - code_concatene est le code des lettres du mot concat\u00e9n\u00e9es ;\n    - mot_est_parfait est un bool\u00e9en indiquant si le mot est parfait.\"\"\"\n    code_concatene = \"\"\n    code_additionne = ... \n    for c in mot:\n        code_concatene = code_concatene + ... \n        code_additionne = code_additionne + ... \n    code_concatene = int(code_concatene)\n    mot_est_parfait = ... \n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre> <p>Exemples : <pre><code>&gt;&gt;&gt; codes_parfait(\"PAUL\")\n(50, 1612112, False)\n&gt;&gt;&gt; codes_parfait(\"ALAIN\")\n(37, 1121914, True)\n</code></pre></p> <pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\n\ndef codes_parfait(mot):\n    # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_concatene = \"\"\n    code_additionne = 0\n    for c in mot:\n        code_concatene = code_concatene + str(dico[c])\n        code_additionne = code_additionne + dico[c]\n    code_concatene = int(code_concatene)\n    mot_est_parfait = code_concatene % code_additionne == 0\n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-07","title":"\u25b6 Sujet 07","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-071","title":"Exercice 07.1","text":"<p>Exercice 07.1</p> \u00c9nonc\u00e9Correction <p>Le nombre d\u2019occurrences d\u2019un caract\u00e8re dans une cha\u00eene de caract\u00e8re est le nombre d\u2019apparitions de ce caract\u00e8re dans la cha\u00eene.</p> <p>Exemples :</p> <ul> <li>le nombre d\u2019occurrences du caract\u00e8re <code>\u2018o\u2019</code> dans <code>\u2018bonjour\u2019</code> est 2 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re <code>\u2018b\u2019</code> dans <code>\u2018B\u00e9b\u00e9\u2019</code> est 1 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re <code>\u2018B\u2019</code> dans <code>\u2018B\u00e9b\u00e9\u2019</code> est 1 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re <code>\u2018 \u2018</code> dans <code>\u2018Hello world !\u2019</code> est 2.</li> </ul> <p>On cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et les valeurs le nombre d\u2019occurrences de ces caract\u00e8res.</p> <p>Par exemple : avec la phrase <code>'Hello world !'</code> le dictionnaire est le suivant :</p> <p><code>{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}</code></p> <p>L\u2019ordre des clefs n\u2019a pas d\u2019importance.</p> <p>\u00c9crire une fonction <code>nbr_occurrences</code> prenant comme param\u00e8tre une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoyant le dictionnaire des nombres d\u2019occurrences des caract\u00e8res de cette cha\u00eene.</p> <pre><code>def nbr_occurrences(chaine):\n    nb_occ = {}\n    for caractere in chaine:\n        if caractere in nb_occ:\n            nb_occ[caractere] += 1\n        else:\n            nb_occ[caractere] = 1\n    return nb_occ\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-072","title":"Exercice 07.2","text":"<p>Exercice 07.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>fusion</code> prend deux tableaux <code>tab1</code>, <code>tab2</code> (type <code>list</code>) d\u2019entiers tri\u00e9s par ordre croissant et les fusionne en un tableau tri\u00e9 <code>tab12</code> qu\u2019elle renvoie.</p> <p>Compl\u00e9ter le code de la fonction <code>fusion</code> ci-dessous.</p> <pre><code>def fusion(tab1,tab2):\n    '''Fusionne deux tableaux tri\u00e9s et renvoie le nouveau tableau tri\u00e9.'''\n    n1 = len(tab1)\n    n2 = len(tab2)\n    tab12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ...: \n        if tab1[i1] &lt; tab2[i2]:\n            tab12[i] = ... \n            i1 = ... \n        else:\n            tab12[i] = tab2[i2]\n            i2 = ... \n        i += 1\n    while i1 &lt; n1:\n        tab12[i] = ... \n        i1 = i1 + 1\n        i = ... \n    while i2 &lt; n2:\n        tab12[i] = ... \n        i2 = i2 + 1\n        i = ... \n    return tab12\n</code></pre> <p>Compl\u00e9ter le code.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; fusion([1, 6, 10],[0, 7, 8, 9])\n[0, 1, 6, 7, 8, 9, 10]\n</code></pre> <pre><code>def fusion(tab1, tab2):\n    n1 = len(tab1)\n    n2 = len(tab2)\n    tab12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and i2 &lt; n2 :\n        if tab1[i1] &lt; tab2[i2]:\n            tab12[i] = tab1[i1]\n            i1 = i1 + 1\n        else:\n            tab12[i] = tab2[i2]\n            i2 = i2 + 1\n        i += 1\n    while i1 &lt; n1:\n        tab12[i] = tab1[i1]\n        i1 = i1 + 1\n        i = i + 1\n    while i2 &lt; n2:\n        tab12[i] = tab2[i2]\n        i2 = i2 + 1\n        i = i + 1\n    return tab12\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-08","title":"\u25b6 Sujet 08","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-081","title":"Exercice 08.1","text":"<p>Exercice 08.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire la fonction <code>maximum_tableau</code>, prenant en param\u00e8tre un tableau non vide de nombres <code>tab</code> (de type <code>list</code>) et renvoyant le plus grand \u00e9l\u00e9ment de ce tableau.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; maximum_tableau([98, 12, 104, 23, 131, 9])\n131\n&gt;&gt;&gt; maximum_tableau([-27, 24, -3, 15])\n24\n</code></pre> <pre><code>def maximum_tableau(tab):\n    maximum = tab[0]\n    for element in tab:\n        if element &gt; maximum:\n            maximum = element\n    return maximum\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-082","title":"Exercice 08.2","text":"<p>Exercice 08.2</p> \u00c9nonc\u00e9Correction <p>On dispose de cha\u00eenes de caract\u00e8res contenant uniquement des parenth\u00e8ses ouvrantes et fermantes. </p> <p>Un parenth\u00e9sage est correct si :</p> <ul> <li>le nombre de parenth\u00e8ses ouvrantes de la cha\u00eene est \u00e9gal au nombre de parenth\u00e8ses fermantes.</li> <li>en parcourant la cha\u00eene de gauche \u00e0 droite, le nombre de parenth\u00e8ses d\u00e9j\u00e0 ouvertes doit \u00eatre, \u00e0 tout moment, sup\u00e9rieur ou \u00e9gal au nombre de parenth\u00e8ses d\u00e9j\u00e0 ferm\u00e9es.</li> </ul> <p>Ainsi, <code>((()())(()))</code> est un parenth\u00e9sage correct. </p> <p>Les parenth\u00e9sages <code>())(()</code> et <code>(())(()</code> sont, eux, incorrects.</p> <p>On dispose du code de la classe <code>Pile</code> suivant :</p> <pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie un bool\u00e9en indiquant si la pile est vide.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l'\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide. Produit une erreur sinon.\n        \"\"\"\n        assert not self.est_vide()\n        return self.contenu.pop()\n</code></pre> <p>On souhaite programmer une fonction <code>bon_parenthesage</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>ch</code> form\u00e9e de parenth\u00e8ses et renvoie <code>True</code> si la cha\u00eene est bien parenth\u00e9s\u00e9e et <code>False</code> sinon.</p> <p>Cette fonction utilise une pile et suit le principe suivant : en parcourant la cha\u00eene de gauche \u00e0 droite, si on trouve une parenth\u00e8se ouvrante, on l\u2019empile au sommet de la pile et si on trouve une parenth\u00e8se fermante, on d\u00e9pile (si possible) la parenth\u00e8se ouvrante stock\u00e9e au sommet de la pile. </p> <p>La cha\u00eene est alors bien parenth\u00e9s\u00e9e si, \u00e0 la fin du parcours, la pile est vide. </p> <p>Elle est, par contre, mal parenth\u00e9s\u00e9e : </p> <ul> <li>si dans le parcours, on trouve une parenth\u00e8se fermante, alors que la pile est vide ;</li> <li>ou si, \u00e0 la fin du parcours, la pile n\u2019est pas vide.</li> </ul> <p>Compl\u00e9ter le code de la fonction <code>bon_parenthesage</code> ci-dessous:</p> <pre><code>def bon_parenthesage(ch):\n    \"\"\"Renvoie un bool\u00e9en indiquant si la cha\u00eene ch \n    est bien parenth\u00e9s\u00e9e\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == ...: \n            p.empiler(c)\n        elif c == ...: \n            if p.est_vide():\n                ...\n            else:\n                ...\n    return ... \n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; bon_parenthesage(\"((()())(()))\")\nTrue\n&gt;&gt;&gt; bon_parenthesage(\"())(()\")\nFalse\n&gt;&gt;&gt; bon_parenthesage(\"(())(()\")\nFalse\n</code></pre> <pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie un bool\u00e9en indiquant si la pile est vide.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l'\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide. Produit une erreur sinon.\n        \"\"\"\n        assert not self.est_vide()\n        return self.contenu.pop()\n\ndef bon_parenthesage(ch):\n    \"\"\"Renvoie un bool\u00e9en indiquant si la cha\u00eene ch est bien parenth\u00e9s\u00e9e\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == '(':\n            p.empiler(c)\n        elif c == ')':\n            if p.est_vide():\n                return False\n            else:\n                p.depiler()\n    return p.est_vide()\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-09","title":"\u25b6 Sujet 09","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-091","title":"Exercice 09.1","text":"<p>Exercice 09.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers relatifs <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres.</p> <p>Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <pre><code>&gt;&gt;&gt; multiplication(3, 5)\n15\n&gt;&gt;&gt; multiplication(-4, -8)\n32\n&gt;&gt;&gt; multiplication(-2, 6)\n-12\n&gt;&gt;&gt; multiplication(-2, 0)\n0\n</code></pre> <pre><code>def multiplication(n1, n2):\n    # on se ram\u00e8ne d'abord au cas o\u00f9 n1 et n2 sont tous les deux positifs :\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-092","title":"Exercice 09.2","text":"<p>Exercice 09.2</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse dans cet exercice \u00e0 la recherche dichotomique dans un tableau tri\u00e9 d\u2019entiers. Compl\u00e9ter la fonction suivante en respectant la sp\u00e9cification.</p> <pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d'entiers tri\u00e9 dans l'ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ... \n        if x == tab[m]:\n            return ... \n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ... \n    return ... \n</code></pre> <p>Exemples : <pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\nFalse\n</code></pre></p> <pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-10","title":"\u25b6 Sujet 10","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-101","title":"Exercice 10.1","text":"<p>Exercice 10.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres un tableau <code>tab</code> de nombres entiers tri\u00e9s par ordre croissant et un nombre entier <code>n</code>, et qui effectue une recherche dichotomique du nombre entier <code>n</code> dans le tableau non vide <code>tab</code>.</p> <p>Cette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le tableau, <code>None</code> sinon.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5) # renvoie None\n</code></pre></p> <pre><code>def recherche(tab, n):\n    ind_debut = 0\n    ind_fin = len(tab) - 1\n    while ind_debut &lt;= ind_fin:\n        ind_milieu = (ind_debut + ind_fin) // 2\n        if tab[ind_milieu] == n:\n            return ind_milieu\n        elif tab[ind_milieu] &lt; n:\n            ind_debut = ind_milieu + 1\n        else:\n            ind_fin = ind_milieu - 1\n    return None\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-102","title":"Exercice 10.2","text":"<p>Exercice 10.2</p> \u00c9nonc\u00e9Correction <p>Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant dans l\u2019alphabet. Par exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A, le Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019 ...) ne sont pas cod\u00e9s.</p> <p>La fonction <code>position_alphabet</code> ci-dessous prend en param\u00e8tre un caract\u00e8re <code>lettre</code> et renvoie la position de <code>lettre</code> dans la cha\u00eene de caract\u00e8res <code>alphabet</code> s\u2019il s\u2019y trouve.</p> <p>La fonction <code>cesar</code> prend en param\u00e8tres une cha\u00eene de caract\u00e8res <code>message</code> et un nombre entier <code>decalage</code> et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant le d\u00e9calage <code>decalage</code>.</p> <pre><code>alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    '''Renvoie la position de la lettre dans l'alphabet'''\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    '''Renvoie le message cod\u00e9 par la m\u00e9thode de C\u00e9sar\n    pour le decalage donn\u00e9'''\n    resultat = ''\n    for ... in message: \n        if 'A' &lt;= c and c &lt;= 'Z':\n            indice = (...) % 26 \n            resultat = resultat + alphabet[indice]\n        else:\n            resultat = ... \n    return resultat\n</code></pre> <p>Compl\u00e9ter la fonction <code>cesar</code>.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; cesar('BONJOUR A TOUS. VIVE LA MATIERE NSI !', 4)\n'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !'\n&gt;&gt;&gt; cesar('GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !', -5)\n'BONJOUR A TOUS. VIVE LA MATIERE NSI !'\n</code></pre> <pre><code>alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    '''Renvoie la position de la lettre dans l'alphabet'''\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    '''Renvoie le message cod\u00e9 par la m\u00e9thode de C\u00e9sar\n    pour le decalage donn\u00e9'''\n    resultat = ''\n    for c in message: \n        if 'A' &lt;= c and c &lt;= 'Z':\n            indice = (position_alphabet(c) + decalage) % 26 \n            resultat = resultat + alphabet[indice]\n        else:\n            resultat = resultat + c \n    return resultat\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-11","title":"\u25b6 Sujet 11","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-111","title":"Exercice 11.1","text":"<p>Exercice 11.1</p> \u00c9nonc\u00e9Correction <p>Un arbre binaire est soit vide, repr\u00e9sent\u00e9 en Python par la valeur <code>None</code>, soit un n\u0153ud repr\u00e9sent\u00e9 par un triplet <code>(g, x, d)</code> o\u00f9 <code>x</code> est l\u2019\u00e9tiquette du n\u0153ud et <code>g</code> et <code>d</code> sont les sous-arbres gauche et droit.</p> <p>On souhaite \u00e9crire une fonction <code>parcours_largeur</code> qui prend en param\u00e8tre un arbre binaire et qui renvoie la liste des \u00e9tiquettes des n\u0153uds de l\u2019arbre parcourus en largeur.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; arbre = ( ( (None, 1, None), 2, (None, 3, None) ), 4, ( (None, 5, None), 6, (None, 7, None) ) )\n&gt;&gt;&gt; parcours_largeur(arbre)\n[4, 2, 6, 1, 3, 5, 7]\n</code></pre> <pre><code>def parcours_largeur(arbre):\n    parcours = []\n    file = [arbre]\n    while file != []:\n        a = file.pop(0)\n        parcours.append(a[1])\n        if a[0] != None:\n            file.append(a[0])\n        if a[2] != None:\n            file.append(a[2])\n    return parcours\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-112","title":"Exercice 11.2","text":"<p>Exercice 11.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re un tableau non vide de nombre entiers, positifs ou n\u00e9gatifs, et on souhaite d\u00e9terminer la plus grande somme possible de ses \u00e9l\u00e9ments cons\u00e9cutifs.</p> <p>Par exemple, dans le tableau <code>[1, -2, 3, 10, -4, 7, 2, -5]</code>, la plus grande somme est 18 obtenue en additionnant les \u00e9l\u00e9ments 3, 10, -4, 7, 2.</p> <p>Pour cela, on va r\u00e9soudre le probl\u00e8me par programmation dynamique. Si on note <code>tab</code> le tableau consid\u00e9r\u00e9 et <code>i</code> un indice dans ce tableau, on se ram\u00e8ne \u00e0 un probl\u00e8me plus simple : d\u00e9terminer la plus grande somme possible de ses \u00e9l\u00e9ments cons\u00e9cutifs se terminant \u00e0 l\u2019indice <code>i</code>.</p> <p>Si on connait la plus grande somme possible de ses \u00e9l\u00e9ments cons\u00e9cutifs se terminant \u00e0 l\u2019indice <code>i-1</code>, on peut d\u00e9terminer la plus grande somme possible de ses \u00e9l\u00e9ments cons\u00e9cutifs se terminant \u00e0 l\u2019indice <code>i</code> :</p> <ul> <li>soit on obtient une plus grande somme en ajoutant <code>tab[i]</code> \u00e0 cette somme pr\u00e9c\u00e9dente ;</li> <li>soit on commence une nouvelle somme \u00e0 partir de <code>tab[i]</code>.</li> </ul> <p>Remarque : les sommes consid\u00e9r\u00e9es contiennent toujours au moins un terme.</p> <p>Compl\u00e9ter la fonction <code>somme_max</code> ci-dessous qui r\u00e9alise cet algorithme.</p> <pre><code>def somme_max(tab):\n    n = len(tab)\n    sommes_max = [0]*n\n    sommes_max[0] = tab[0]\n    # on calcule la plus grande somme se terminant en i\n    for i in range(1,n):\n        if ... + ... &gt; ...: \n            sommes_max[i] = ... \n        else:\n            sommes_max[i] = ... \n    # on en d\u00e9duit la plus grande somme de celles-ci\n    maximum = 0\n    for i in range(1, n):\n        if ... &gt; ...: \n            maximum = i\n\n    return sommes_max[...] \n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; somme_max([1, 2, 3, 4, 5])\n15\n&gt;&gt; somme_max([1, 2, -3, 4, 5])\n9\n&gt;&gt;&gt; somme_max([1, 2, -2, 4, 5])\n10\n&gt;&gt;&gt; somme_max([1, -2, 3, 10, -4, 7, 2, -5])\n18\n</code></pre> <pre><code>def somme_max(tab):\n    n = len(tab)\n    sommes_max = [0]*n\n    sommes_max[0] = tab[0]\n    # on calcule la plus grande somme se terminant en i\n    for i in range(1,n):\n        if sommes_max[i-1] + tab[i] &gt; tab[i]:\n            sommes_max[i] = sommes_max[i-1] + tab[i]\n        else:\n            sommes_max[i] = tab[i]\n    # on en d\u00e9duit la plus grande somme de celles-ci\n    maximum = 0\n    for i in range(1, n):\n        if sommes_max[i]  &gt; sommes_max[maximum]:\n            maximum = i\n    return sommes_max[maximum]\n</code></pre> <p>Merci \u00e0 N. Maier pour la correction</p>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-12","title":"\u25b6 Sujet 12","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-121","title":"Exercice 12.1","text":"<p>Exercice 12.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>fusion</code> prenant en param\u00e8tres deux tableaux non vides <code>tab1</code> et <code>tab2</code> (type <code>list</code>) d'entiers, chacun dans l\u2019ordre croissant, et renvoyant un tableau tri\u00e9 dans l\u2019ordre croissant et contenant l\u2019ensemble des valeurs de <code>tab1</code> et <code>tab2</code>.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; fusion([3, 5], [2, 5])\n[2, 3, 5, 5]\n&gt;&gt;&gt; fusion([-2, 4], [-3, 5, 10])\n[-3, -2, 4, 5, 10]\n&gt;&gt;&gt; fusion([4], [2, 6])\n[2, 4, 6]\n&gt;&gt;&gt; fusion([], [])\n[]\n&gt;&gt;&gt; fusion([1, 2, 3], [])\n[1, 2, 3]\n</code></pre> <pre><code>def fusion(tab1, tab2):\n    tab_fusion = []\n    i1 = 0\n    i2 = 0\n    while i1 &lt; len(tab1) and i2 &lt; len(tab2):\n        if tab1[i1] &lt; tab2[i2]:\n            tab_fusion.append(tab1[i1])\n            i1 += 1\n        else:\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n\n    if i1 == len(tab1):\n        while i2 &lt; len(tab2):\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n    else:\n        while i1 &lt; len(tab1):\n            tab_fusion.append(tab1[i1])\n            i1 += 1        \n\n    return tab_fusion\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-122","title":"Exercice 12.2","text":"<p>Exercice 12.2</p> \u00c9nonc\u00e9Correction <p>Le but de cet exercice est d\u2019\u00e9crire une fonction r\u00e9cursive <code>traduire_romain</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res, non vide, repr\u00e9sentant un nombre \u00e9crit en chiffres romains et qui renvoie son \u00e9criture d\u00e9cimale.</p> <p>Les chiffres romains consid\u00e9r\u00e9s sont : I, V, X, L, C, D et M. Ils repr\u00e9sentent respectivement les nombres 1, 5, 10, 50, 100, 500, et 1000 en base dix.</p> <p>On dispose d\u2019un dictionnaire <code>romains</code> dont les cl\u00e9s sont les caract\u00e8res apparaissant dans l\u2019\u00e9criture en chiffres romains et les valeurs sont les nombres entiers associ\u00e9s en \u00e9criture d\u00e9cimale :</p> <p><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}</code></p> <p>Le code de la fonction <code>traduire_romain</code> fournie repose sur le principe suivant :</p> <ul> <li> <p>la valeur d\u2019un caract\u00e8re est ajout\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur sup\u00e9rieure (ou \u00e9gale) \u00e0 celle du caract\u00e8re qui le suit ;</p> </li> <li> <p>la valeur d\u2019un caract\u00e8re est retranch\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur strictement inf\u00e9rieure \u00e0 celle du caract\u00e8re qui le suit.</p> </li> </ul> <p>Ainsi, XIV correspond au nombre 10 + 5 - 1 puisque :</p> <ul> <li> <p>la valeur de X (10) est sup\u00e9rieure \u00e0 celle de I (1), on ajoute donc 10 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire IV ;</p> </li> <li> <p>la valeur de I (1) est strictement inf\u00e9rieure \u00e0 celle de V (5), on soustrait donc 1 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire V.</p> </li> </ul> <p>On rappelle que pour priver une cha\u00eene de caract\u00e8res de son premier caract\u00e8re, on utilisera l\u2019instruction :</p> <p><code>nom_de_variable[1:]</code></p> <p>Par exemple, si la variable <code>mot</code> contient la cha\u00eene <code>\"CDI\"</code>, <code>mot[1:]</code> renvoie <code>\"DI\"</code>.</p> <pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n    \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\n        return ...\n    elif romains[nombre[0]] &gt;= ...\n        return romains[nombre[0]] + ...\n    else:\n        return ...\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; traduire_romain(\"XIV\")\n14\n&gt;&gt;&gt; traduire_romain(\"CXLII\")\n142\n&gt;&gt;&gt; traduire_romain(\"MMXXIV\")\n2024\n</code></pre> <pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n    \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\n        return romains[nombre]\n    elif romains[nombre[0]] &gt;= romains[nombre[1]]:\n        return romains[nombre[0]] + traduire_romain(nombre[1:])\n    else:\n        return traduire_romain(nombre[1:]) - romains[nombre[0]]\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-13","title":"\u25b6 Sujet 13","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-131","title":"Exercice 13.1","text":"<p>Exercice 13.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers (type <code>list</code>), et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>None</code> sinon.</p> <p>L\u2019objectif de cet exercice est de parcourir un tableau, il est interdit d\u2019utiliser la m\u00e9thode <code>index</code> des listes Python.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4]) # renvoie None\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p> <pre><code>def recherche(elt, tab):\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            return i        \n    return None         \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-132","title":"Exercice 13.2","text":"<p>Exercice 13.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la fonction <code>insere</code> ci-dessous qui prend en argument un tableau <code>tab</code> d\u2019entiers tri\u00e9s par ordre croissant et un entier <code>a</code>. </p> <p>Cette fonction cr\u00e9e et renvoie un nouveau tableau \u00e0 partir de celui fourni en param\u00e8tre en y ins\u00e9rant la valeur <code>a</code> de sorte que le tableau renvoy\u00e9 soit encore tri\u00e9 par ordre croissant. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes Python.</p> <pre><code>def insere(tab, a):\n    \"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    tab_a = [ a ] + tab # nouveau tableau contenant a \n                        # suivi des \u00e9l\u00e9ments de tab\n    i = 0\n    while i &lt; ... and a &gt; ...: \n        tab_a[i] = ... \n        tab_a[i+1] = a\n        i = ... \n    return tab_a\n</code></pre> <p>Compl\u00e9ter la fonction <code>insere</code> ci-dessus.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; insere([1, 2, 4, 5], 3)\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; insere([1, 2, 7, 12, 14, 25], 30)\n[1, 2, 7, 12, 14, 25, 30]\n&gt;&gt;&gt; insere([2, 3, 4], 1)\n[1, 2, 3, 4]\n&gt;&gt;&gt; insere([], 1)\n[1]\n</code></pre></p> <pre><code>def insere(tab, a):\n    \"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    tab_a = [ a ] + tab # nouveau tableau contenant a \n                        # suivi des \u00e9l\u00e9ments de tab\n    i = 0\n    while i &lt; len(tab_a) - 1 and a &gt; tab_a[i+1]: \n        tab_a[i] = tab_a[i+1] \n        tab_a[i+1] = a\n        i = i + 1 \n    return tab_a\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-14","title":"\u25b6 Sujet 14","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-141","title":"Exercice 14.1","text":"<p>Exercice 14.1</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice les tableaux sont repr\u00e9sent\u00e9s par des listes Python (type <code>list</code>).</p> <p>\u00c9crire en python deux fonctions :</p> <ul> <li><code>lancer</code> de param\u00e8tre <code>n</code>, un entier positif, qui renvoie un tableau de <code>n</code> entiers obtenus al\u00e9atoirement entre 1 et 6 (1 et 6 inclus) ;</li> <li><code>paire_6</code> de param\u00e8tre <code>tab</code>, un tableau de n entiers compris entre 1 et 6 et qui renvoie un bool\u00e9en \u00e9gal \u00e0 <code>True</code> si le nombre de 6 est sup\u00e9rieur ou \u00e9gal \u00e0 2, <code>False</code> sinon.</li> </ul> <p>On pourra utiliser la fonction <code>randint(a,b)</code> du module <code>random</code> pour laquelle la documentation officielle est la suivante :</p> <p><code>random.randint(a, b)</code> <code>Renvoie un entier al\u00e9atoire N tel que a &lt;=N &lt;= b.</code></p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; lancer1 = lancer(5)\n&gt;&gt;&gt; lancer1\n[5, 6, 6, 2, 2]\n&gt;&gt;&gt; paire_6(lancer1)\nTrue\n&gt;&gt;&gt; lancer2 = lancer(5)\n&gt;&gt;&gt; lancer2\n[6, 5, 1, 6, 6]\n&gt;&gt;&gt; paire_6(lancer2)\nTrue\n&gt;&gt;&gt; lancer3 = lancer(3)\n&gt;&gt;&gt; lancer3\n[2, 2, 6]\n&gt;&gt;&gt; paire_6(lancer3)\nFalse\n&gt;&gt;&gt; lancer4 = lancer(0)\n&gt;&gt;&gt; lancer4\n[]\n&gt;&gt;&gt; paire_6(lancer4)\nFalse\n</code></pre> <pre><code>from random import randint\n\ndef lancer(n):\n    return [randint(1, 6) for _ in range(n)]\n\ndef paire_6(tab):\n    nb = 0\n    for elt in tab:\n        if elt == 6:\n            nb += 1\n    if nb &gt;= 2 :\n        return True\n    else:\n        return False\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-142","title":"Exercice 14.2","text":"<p>Exercice 14.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques.</p> <p>La largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le nombre de sous-listes.</p> <p>Chaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est un entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel.</p> <p>Le n\u00e9gatif d\u2019une image est l\u2019image constitu\u00e9e des pixels <code>x_n</code> tels que <code>x_n + x_i = 255</code> o\u00f9 <code>x_i</code> est le pixel correspondant de l\u2019image initiale.</p> <p>\u00c9tant donn\u00e9 une valeur <code>seuil</code>, la binarisation d'une image est l'image constitu\u00e9e des pixels <code>x_b</code> valant <code>0</code> si <code>x_i &lt; seuil</code> et <code>255</code> sinon, o\u00f9 <code>x_i</code> est le pixel correspondant de l'image initiale.</p> <p>Compl\u00e9ter le programme suivant : <pre><code>def nombre_lignes(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return ... \n\ndef nombre_colonnes(image):\n    '''renvoie la largeur de l'image'''\n    return ... \n\ndef negatif(image):\n    '''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n    # on cree une image de 0 aux memes dimensions \n    # que le parametre image\n    nouvelle_image = [[0 for k in range(nombre_colonnes(image))]\n         for i in range(nombre_lignes(image))]\n\n    for i in range(nombre_lignes(image)):\n        for j in range(...): \n            nouvelle_image[i][j] = ... \n    return nouvelle_image\n\ndef binaire(image, seuil):\n    '''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil et 255 sinon'''\n    nouvelle_image = [[0] * nombre_colonnes(image)\n                      for i in range(nombre_lignes(image))]\n\n    for i in range(nombre_lignes(image)):\n        for j in range(...): \n            if image[i][j] &lt; ... : \n                nouvelle_image[i][j] = ... \n            else:\n                nouvelle_image[i][j] = ... \n    return nouvelle_image\n</code></pre></p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; img=[[20, 34, 254, 145, 6], [23, 124, 237, 225, 69],\n[197, 174, 207, 25, 87], [255, 0, 24, 197, 189]]\n&gt;&gt;&gt; nombre_lignes(img)\n4\n&gt;&gt;&gt; nombre_colonnes(img)\n5\n&gt;&gt;&gt; negatif(img)\n[[235, 221, 1, 110, 249], [232, 131, 18, 30, 186],\n[58, 81, 48, 230, 168], [0, 255, 231, 58, 66]]\n&gt;&gt;&gt; binaire(img,120)\n[[0, 0, 255, 255, 0],[0, 255, 255, 255, 0],\n[255, 255, 255, 0, 0],[255, 0, 0, 255, 255]]\n</code></pre> <pre><code>def nombre_lignes(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return len(image) \n\ndef nombre_colonnes(image):\n    '''renvoie la largeur de l'image'''\n    return len(image[0]) \n\ndef negatif(image):\n    '''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n    # on cree une image de 0 aux memes dimensions \n    # que le parametre image\n    nouvelle_image = [[0 for k in range(nombre_colonnes(image))]\n         for i in range(nombre_lignes(image))]\n\n    for i in range(nombre_lignes(image)):\n        for j in range(nombre_colonnes(image)): \n            nouvelle_image[i][j] = 255 - image[i][j] \n    return nouvelle_image\n\ndef binaire(image, seuil):\n    '''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil et 1 sinon'''\n    nouvelle_image = [[0] * nombre_colonnes(image)\n                      for i in range(nombre_lignes(image))]\n\n    for i in range(nombre_lignes(image)):\n        for j in range(nombre_colonnes(image)): \n            if image[i][j] &lt; seuil : \n                nouvelle_image[i][j] = 0 \n            else:\n                nouvelle_image[i][j] = 255 \n    return nouvelle_image\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-15","title":"\u25b6 Sujet 15","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-151","title":"Exercice 15.1","text":"<p>Exercice 15.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers relatifs <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres.</p> <p>Les seules op\u00e9rations arithm\u00e9tiques autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>Exemples : <pre><code>&gt;&gt;&gt; multiplication(3,5)\n15\n&gt;&gt;&gt; multiplication(-4,-8)\n32\n&gt;&gt;&gt; multiplication(-2,6)\n-12\n&gt;&gt;&gt; multiplication(-2,0)\n0\n</code></pre></p> <pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-152","title":"Exercice 15.2","text":"<p>Exercice 15.2</p> \u00c9nonc\u00e9Correction <p>Soit <code>tab</code> un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et <code>n</code> un entier.</p> <p>La fonction <code>chercher</code> ci-dessous doit renvoyer un indice o\u00f9 la valeur <code>n</code> appara\u00eet dans <code>tab</code> si cette valeur y figure et <code>None</code> sinon. </p> <p>Les param\u00e8tres de la fonction sont :</p> <ul> <li><code>tab</code>, le tableau dans lequel s'effectue la recherche ;</li> <li><code>x</code>, l'entier \u00e0 chercher dans le tableau ;</li> <li><code>i</code>, l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ;</li> <li><code>j</code>, l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche.</li> </ul> <p>L\u2019algorithme demand\u00e9 est une recherche dichotomique r\u00e9cursive.</p> <p>Recopier et compl\u00e9ter le code de la fonction <code>chercher</code> suivante :</p> <pre><code>def chercher(tab, x, i, j):\n    '''Renvoie l'indice de x dans tab, si x est dans tab, \n    None sinon.\n    On suppose que tab est tri\u00e9 dans l'ordre croissant.'''\n    if i &gt; j:\n        return None\n    m = (i + j) // ... \n    if ... &lt; x: \n        return chercher(tab, x, ... , ...) \n    elif tab[m] &gt; x:\n        return chercher(tab, x, ... , ...) \n    else:\n        return ... \n</code></pre> <p>Exemples : <pre><code>&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 5)\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 9, 0, 5)\n4\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 6, 0, 5)\n2\n&gt;&gt;&gt; chercher([1], 0, 0, 0)\n&gt;&gt;&gt; chercher([1], 1, 0, 0)\n0\n</code></pre></p> <pre><code>def chercher(tab, x, i, j):\n    '''Renvoie l'indice de x dans tab, si x est dans tab, \n    None sinon.\n    On suppose que tab est tri\u00e9 dans l'ordre croissant.'''\n    if i &gt; j:\n        return None\n    m = (i + j) // 2 \n    if tab[m] &lt; x: \n        return chercher(tab, x, m+1 , j) \n    elif tab[m] &gt; x:\n        return chercher(tab, x, i , m-1) \n    else:\n        return m \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-16","title":"\u25b6 Sujet 16","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-161","title":"Exercice 16.1","text":"<p>Exercice 16.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>moyenne(notes)</code> qui renvoie la moyenne pond\u00e9r\u00e9e des r\u00e9sultats contenus dans le tableau <code>notes</code>, non vide, donn\u00e9 en param\u00e8tre. Ce tableau contient des couples <code>(note, coefficient)</code> dans lesquels :</p> <ul> <li><code>note</code> est un nombre de type flottant (<code>float</code>) compris entre 0 et 20 ;</li> <li><code>coefficient</code> est un nombre entier strictement positif.</li> </ul> <p>Ainsi l\u2019expression <code>moyenne([(15.0,2),(9.0,1),(12.0,3)])</code> devra renvoyer <code>12.5</code>.</p> <p>\\(\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5\\)</p> <pre><code>def moyenne(liste_notes):\n    somme_notes = 0\n    somme_coeffs = 0\n    for devoir in liste_notes:\n        note = devoir[0]\n        coeff = devoir[1]\n        somme_notes += note * coeff\n        somme_coeffs += coeff\n    return somme_notes / somme_coeffs\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-162","title":"Exercice 16.2","text":"<p>Exercice 16.2</p> \u00c9nonc\u00e9Correction <p>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal (Figure 1).</p> <p>Dans le triangle de Pascal, chaque ligne commence et se termine par le nombre 1. Comme l\u2019illustre la Figure 2, on additionne deux valeurs successives d\u2019une ligne pour obtenir la valeur qui se situe sous la deuxi\u00e8me valeur.</p> <p></p> <p>Compl\u00e9ter les fonctions <code>ligne_suivante</code> et <code>pascal</code> ci-dessous. La fonction <code>ligne_suivante</code> prend en param\u00e8tre une liste d\u2019entiers <code>ligne</code> correspondant \u00e0 une ligne du triangle de Pascal et renvoie la liste correspondant \u00e0 la ligne suivante du triangle de Pascal. La fonction <code>pascal</code> prend en param\u00e8tre un entier n et l\u2019utilise pour construire le triangle de Pascal ayant <code>n+1</code> lignes sous la forme d\u2019une liste de listes.</p> <pre><code>def ligne_suivante(ligne):\n    '''Renvoie la ligne suivant ligne du triangle de Pascal'''\n    ligne_suiv = [...] \n    for i in range(...): \n        ligne_suiv.append(...) \n    ligne_suiv.append(...) \n    return ligne_suiv\n\ndef pascal(n):\n    '''Renvoie le triangle de Pascal de hauteur n'''\n    triangle = [ [1] ]\n    for k in range(...): \n        ligne_k = ... \n        triangle.append(ligne_k)\n    return triangle\n</code></pre> <p>Exemples: <pre><code>&gt;&gt;&gt; ligne_suivante([1, 3, 3, 1])\n[1, 4, 6, 4, 1]\n&gt;&gt;&gt; pascal(2)\n[[1], [1, 1], [1, 2, 1]]\n&gt;&gt;&gt; pascal(3)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n</code></pre></p> <pre><code>def ligne_suivante(ligne):\n    '''Renvoie la ligne suivant ligne du triangle de Pascal'''\n    ligne_suiv = [ligne[0]] \n    for i in range(1, len(ligne)): \n        ligne_suiv.append(ligne[i-1] + ligne[i]) \n    ligne_suiv.append(ligne[-1]) \n    return ligne_suiv\n\ndef pascal(n):\n    '''Renvoie le triangle de Pascal de hauteur n'''\n    triangle = [ [1] ]\n    for k in range(n): \n        ligne_k = ligne_suivante(triangle[-1]) \n        triangle.append(ligne_k)\n    return triangle\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-17","title":"\u25b6 Sujet 17","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-171","title":"Exercice 17.1","text":"<p>Exercice 17.1</p> \u00c9nonc\u00e9Correction <p>Un arbre binaire est soit vide, repr\u00e9sent\u00e9 en Python par la valeur <code>None</code>, soit un n\u0153ud, contenant une \u00e9tiquette et deux sous-arbres gauche et droit repr\u00e9sent\u00e9s par une instance de la classe <code>Noeud</code> donn\u00e9e ci-dessous.</p> <pre><code>class Noeud:\n    def __init__(self, etiquette, gauche, droit):\n        self.v = etiquette\n        self.gauche = gauche\n        self.droit = droit\n</code></pre> <p></p> <p>L\u2019arbre ci-dessus sera donc impl\u00e9ment\u00e9 de la mani\u00e8re suivante : <pre><code>a = Noeud(1, Noeud(4, None, None), Noeud(0, None, Noeud(7, None, None)))\n</code></pre></p> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tre un arbre <code>a</code> et qui renvoie la taille de l\u2019arbre que cette instance impl\u00e9mente.</p> <p>\u00c9crire de m\u00eame une fonction r\u00e9cursive <code>hauteur</code> prenant en param\u00e8tre un arbre <code>a</code> et qui renvoie la hauteur de l\u2019arbre que cette instance impl\u00e9mente.</p> <p>On consid\u00e8re que la hauteur d\u2019un arbre vide est -1 et la taille d\u2019un arbre vide est 0.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; hauteur(a)\n2\n&gt;&gt;&gt; taille(a)\n4\n&gt;&gt;&gt; hauteur(None)\n-1\n&gt;&gt;&gt; taille(None)\n0\n&gt;&gt;&gt; hauteur(Noeud(1, None, None))\n0\n&gt;&gt;&gt; taille(Noeud(1, None, None))\n1\n</code></pre> <pre><code>class Noeud:\n    def __init__(self, etiquette, gauche, droit):\n        self.v = etiquette\n        self.gauche = gauche\n        self.droit = droit\n\na = Noeud(1, Noeud(4, None, None), Noeud(0, None, Noeud(7, None, None)))\n\ndef taille(a):\n    if a is None:\n        return 0\n    return 1 + taille(a.gauche) + taille(a.droit)\n\ndef hauteur(a):\n    if a is None:\n        return -1\n    return 1 + max(hauteur(a.gauche), hauteur(a.droit))\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-172","title":"Exercice 17.2","text":"<p>Exercice 17.2</p> \u00c9nonc\u00e9Correction <p>On rappelle que les tableaux sont repr\u00e9sent\u00e9s par des listes en Python du type <code>list</code>.</p> <p>Le but de cet exercice est d\u2019\u00e9crire une fonction ajoute qui prend en param\u00e8tres trois arguments <code>indice</code>, <code>element</code> et <code>tab</code> et renvoie un tableau <code>tab_ins</code> dans lequel les \u00e9l\u00e9ments sont ceux du tableau <code>tab</code> avec, en plus, l\u2019\u00e9l\u00e9ment <code>element</code> \u00e0 l\u2019indice <code>indice</code>.</p> <p>On consid\u00e8re que les variables <code>indice</code> et <code>element</code> sont des entiers positifs et que les \u00e9l\u00e9ments de <code>tab</code> sont \u00e9galement des entiers.</p> <p>En r\u00e9alisant cette insertion, Les \u00e9l\u00e9ments du tableau <code>tab</code> dont les indices sont sup\u00e9rieurs ou \u00e9gaux \u00e0 <code>indice</code> apparaissent d\u00e9cal\u00e9s vers la droite dans le tableau <code>tab_ins</code>.</p> <p>Si <code>indice</code> est \u00e9gal au nombre d\u2019\u00e9l\u00e9ments du tableau <code>tab</code>, l\u2019\u00e9l\u00e9ment <code>element</code> est ajout\u00e9 dans <code>tab_ins</code> apr\u00e8s tous les \u00e9l\u00e9ments du tableau <code>tab</code>.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; ajoute(1, 4, [7, 8, 9])\n[7, 4, 8, 9]\n&gt;&gt;&gt; ajoute(3, 4, [7, 8, 9])\n[7, 8, 9, 4]\n&gt;&gt;&gt; ajoute(0, 4, [7, 8, 9])\n[4, 7, 8, 9]\n</code></pre> <p>Compl\u00e9ter et tester le code ci-dessous :</p> <pre><code>def ajoute(indice, element, tab):\n    '''Renvoie un nouveau tableau obtenu en ins\u00e9rant\n    element \u00e0 l'indice indice dans le tableau tab.'''\n    nbre_elts = len(tab)\n    tab_ins = [0] * (nbre_elts + 1)\n    for i in range(indice):\n        tab_ins[i] = ... \n    tab_ins[...] = ... \n    for i in range(indice + 1, nbre_elts + 1):\n        tab_ins[i] = ... \n    return tab_ins\n</code></pre> <pre><code>def ajoute(indice, element, tab):\n    '''Renvoie un nouveau tableau obtenu en ins\u00e9rant\n    element \u00e0 l'indice indice dans le tableau tab.'''\n    nbre_elts = len(tab)\n    tab_ins = [0] * (nbre_elts + 1)\n    for i in range(indice):\n        tab_ins[i] = tab[i] \n    tab_ins[indice] = element \n    for i in range(indice + 1, nbre_elts + 1):\n        tab_ins[i] = tab[i-1] \n    return tab_ins\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-18","title":"\u25b6 Sujet 18","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-181","title":"Exercice 18.1","text":"<p>Exercice 18.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>moyenne</code> qui prend en param\u00e8tre un tableau d\u2019entiers non vide et qui renvoie un nombre flottant donnant la moyenne de ces entiers.</p> <p>Attention : il est interdit d\u2019utiliser la fonction <code>sum</code> ou la fonction <code>mean</code> (module <code>statistics</code>) de Python.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; moyenne([1])\n1.0\n&gt;&gt;&gt; moyenne([1, 2, 3, 4, 5, 6, 7])\n4.0\n&gt;&gt;&gt; moyenne([1, 2])\n1.5\n</code></pre> <pre><code>def moyenne(tab):\n    somme = 0\n    for elt in tab:\n        somme += elt\n    return somme / len(tab)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-182","title":"Exercice 18.2","text":"<p>Exercice 18.2</p> \u00c9nonc\u00e9Correction <p>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente dans un tableau de valeurs tri\u00e9es dans l'ordre croissant.</p> <p>Compl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s.</p> <pre><code>def dichotomie(tab, x):\n    \"\"\"applique une recherche dichotomique pour d\u00e9terminer\n    si x est dans le tableau tri\u00e9 tab.\n    La fonction renvoie True si tab contient x et False sinon\"\"\"\n\n    debut = 0\n    fin = ... \n    while debut &lt;= fin:\n        m = ... \n        if x == tab[m]:\n            return ... \n        if x &gt; tab[m]:\n            debut = ... \n        else:\n            fin = ... \n    return False\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 27)\nFalse\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 1)\nFalse\n&gt;&gt;&gt; dichotomie([], 28)\nFalse\n</code></pre> <pre><code>def dichotomie(tab, x):\n    \"\"\"applique une recherche dichotomique pour d\u00e9terminer\n    si x est dans le tableau tri\u00e9 tab.\n    La fonction renvoie True si tab contient x et False sinon\"\"\"\n\n    debut = 0\n    fin = len(tab) - 1 \n    while debut &lt;= fin:\n        m = (debut + fin) // 2 \n        if x == tab[m]:\n            return True \n        if x &gt; tab[m]:\n            debut = m + 1 \n        else:\n            fin = m - 1 \n    return False\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-19","title":"\u25b6 Sujet 19","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-191","title":"Exercice 19.1","text":"<p>Exercice 19.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche_min</code> qui prend en param\u00e8tre un tableau de nombres <code>tab</code> non vide, et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; recherche_min([5])\n0\n&gt;&gt;&gt; recherche_min([2, 4, 1])\n2\n&gt;&gt;&gt; recherche_min([5, 3, 2, 2, 4])\n2\n&gt;&gt;&gt; recherche_min([-1, -2, -3, -3])\n2\n</code></pre></p> <pre><code>def recherche_min(tab):\n    indice_min = 0\n    for i in range(len(tab)):\n        if tab[i] &lt; tab[indice_min]:\n            indice_min = i\n    return indice_min\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-192","title":"Exercice 19.2","text":"<p>Exercice 19.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la fonction <code>separe</code> ci-dessous qui prend en argument un tableau <code>tab</code> dont les \u00e9l\u00e9ments sont des <code>0</code> et des <code>1</code> et qui s\u00e9pare les <code>0</code> des <code>1</code> en pla\u00e7ant les <code>0</code> en d\u00e9but de tableau et les <code>1</code> \u00e0 la suite.</p> <pre><code>def separe(tab):\n    '''Separe les 0 et les 1 dans le tableau tab'''\n    gauche = 0\n    droite = ... \n    while gauche &lt; droite:\n        if tab[gauche] == 0 :\n            gauche = ... \n        else :\n            tab[gauche] = ... \n            tab[droite] = ... \n            droite = ... \n    return tab\n</code></pre> <p>Compl\u00e9ter la fonction <code>separe</code> ci-dessus.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; separe([1, 0, 1, 0, 1, 0, 1, 0])\n[0, 0, 0, 0, 1, 1, 1, 1]\n&gt;&gt;&gt; separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0])\n[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre> <p>Description d\u2019\u00e9tapes effectu\u00e9es par la fonction separe sur le tableau ci-dessous, les caract\u00e8res <code>^</code> indiquent les cases point\u00e9es par les indices gauche et droite :</p> <pre><code>tab = [1, 0, 1, 0, 1, 0, 1, 0]\n       ^                    ^\n</code></pre> <ul> <li> <p>Etape 1 : on regarde la premi\u00e8re case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec la derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus la derni\u00e8re case en compte. <pre><code>tab = [0, 0, 1, 0, 1, 0, 1, 1]\n       ^                 ^\n</code></pre></p> </li> <li> <p>Etape 2 : on regarde \u00e0 nouveau la premi\u00e8re case, qui contient maintenant un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la premi\u00e8re case en compte. <pre><code>tab = [0, 0, 1, 0, 1, 0, 1, 1]\n          ^              ^\n</code></pre></p> </li> <li> <p>Etape 3 : on regarde la seconde case, qui contient un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la seconde case en compte. <pre><code>tab = [0, 0, 1, 0, 1, 0, 1, 1]\n             ^           ^\n</code></pre></p> </li> <li> <p>Etape 4 : on regarde la troisi\u00e8me case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec l\u2019avant-derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus l\u2019avant-derni\u00e8re case en compte. <pre><code>tab = [0, 0, 1, 0, 1, 0, 1, 1]\n             ^        ^\n</code></pre></p> </li> </ul> <p>Et ainsi de suite...</p> <p><code>tab = [0, 0, 0, 0, 1, 1, 1, 1]</code></p> <pre><code>def separe(tab):\n    '''Separe les 0 et les 1 dans le tableau tab'''\n    gauche = 0\n    droite = len(tab) - 1 \n    while gauche &lt; droite:\n        if tab[gauche] == 0 :\n            gauche = gauche + 1 \n        else :\n            tab[gauche] = tab[droite] \n            tab[droite] = 1 \n            droite = droite - 1 \n    return tab\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-20","title":"\u25b6 Sujet 20","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-201","title":"Exercice 20.1","text":"<p>Exercice 20.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>min_et_max</code> qui prend en param\u00e8tre un tableau de nombres <code>tab</code> non vide, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s <code>min</code> et <code>max</code>.</p> <p>Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>L\u2019utilisation des fonctions natives <code>min</code>, <code>max</code> et <code>sorted</code>, ainsi que la m\u00e9thode <code>sort</code> n\u2019est pas autoris\u00e9e.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; min_et_max([0, 1, 4, 2, -2, 9, 3, 1, 7, 1])\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; min_et_max([0, 1, 2, 3])\n{'min': 0, 'max': 3}\n&gt;&gt;&gt; min_et_max([3])\n{'min': 3, 'max': 3}\n&gt;&gt;&gt; min_et_max([1, 3, 2, 1, 3])\n{'min': 1, 'max': 3}\n&gt;&gt;&gt; min_et_max([-1, -1, -1, -1, -1])\n{'min': -1, 'max': -1}\n</code></pre> <pre><code>def min_et_max(tab):\n    d = {}\n    d['min'] = tab[0]\n    d['max'] = tab[0]\n    for val in tab:\n        if val &lt; d['min']:\n            d['min'] = val\n        if val &gt; d['max']:\n            d['max'] = val\n    return d\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-202","title":"Exercice 20.2","text":"<p>Exercice 20.2</p> \u00c9nonc\u00e9Correction <p>On dispose d\u2019une classe <code>Carte</code> permettant de cr\u00e9er des objets mod\u00e9lisant des cartes \u00e0 jouer.</p> <p>Compl\u00e9ter la classe <code>Paquet_de_cartes</code> suivante en respectant les sp\u00e9cifications donn\u00e9es dans les cha\u00eenes de documentation.</p> <p>Ajouter une assertion dans la m\u00e9thode <code>recuperer_carte</code> de la classe <code>Paquet_de_cartes</code> afin de v\u00e9rifier que le param\u00e8tre <code>pos</code> est correct.</p> <p>On rappelle que l\u2019instruction</p> <pre><code>assert condition, message\n</code></pre> <p>permet de v\u00e9rifier que la condition est vraie. Si ce n\u2019est pas le cas, le programme s\u2019arr\u00eate et affiche le message d\u2019erreur fourni.</p> <pre><code>class Carte:\n    def __init__(self, c, v):\n        \"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def recuperer_valeur(self):\n        \"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def recuperer_couleur(self):\n        \"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n        \"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\n        ...\n        ...\n            ...\n                ...\n\n    def recuperer_carte(self, pos):\n        \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\n        ...\n        ...\n</code></pre> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; jeu = Paquet_de_cartes()\n&gt;&gt;&gt; carte1 = jeu.recuperer_carte(20)\n&gt;&gt;&gt; carte1.recuperer_valeur() + \" de \" + carte1.recuperer_couleur()\n\"8 de coeur\"\n&gt;&gt;&gt; carte2 = jeu.recuperer_carte(0)\n&gt;&gt;&gt; carte2.recuperer_valeur() + \" de \" + carte2.recuperer_couleur()\n\"As de pique\"\n&gt;&gt;&gt; carte3 = jeu.recuperer_carte(52)\nAssertionError : param\u00e8tre pos invalide\n</code></pre> <pre><code>class Carte:\n    def __init__(self, c, v):\n        \"\"\"Initialise les attributs couleur (entre 1 et 4), \n        et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def recuperer_valeur(self):\n        \"\"\" Renvoie la valeur de la carte : \n        As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', \n                   '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def recuperer_couleur(self):\n        \"\"\" Renvoie la couleur de la carte \n        (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n        \"\"\" Initialise l'attribut contenu avec une liste des 52\n        objets Carte possibles rang\u00e9s par valeurs croissantes en\n        commen\u00e7ant par pique, puis c\u0153ur, carreau et tr\u00e8fle. \"\"\"\n        self.contenu = []\n        for c in range(1, 5):\n            for v in range(1, 14):\n                self.contenu.append(Carte(c,v))\n\n    def recuperer_carte(self, pos):\n        \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos \n        (entier compris entre 0 et 51). \"\"\"\n        assert 0 &lt;= pos &lt;= 51,  'param\u00e8tre pos invalide'\n        return self.contenu[pos]\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-21","title":"\u25b6 Sujet 21","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-211","title":"Exercice 21.1","text":"<p>Exercice 21.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>indices_maxi</code> qui prend en param\u00e8tre un tableau non vide de nombre entiers <code>tab</code>, repr\u00e9sent\u00e9 par une liste Python et qui renvoie un tuple (<code>maxi</code>, <code>indices</code>) o\u00f9 :</p> <ul> <li><code>maxi</code> est le plus grand \u00e9l\u00e9ment du tableau <code>tab</code> ;</li> <li><code>indices</code> est une liste Python contenant les indices du tableau <code>tab</code> o\u00f9 appara\u00eet ce plus grand \u00e9l\u00e9ment.</li> </ul> <p>Exemple : <pre><code>&gt;&gt;&gt; indices_maxi([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, [3, 8])\n&gt;&gt;&gt; indices_maxi([7])\n(7, [0])\n</code></pre></p> <pre><code>def indices_maxi(tab):\n    val_max = tab[0]\n    ind_max = []\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n    for i in range(len(tab)):\n        if tab[i] == val_max:\n            ind_max.append(i)\n    return (val_max, ind_max)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-212","title":"Exercice 21.2","text":"<p>Exercice 21.2</p> \u00c9nonc\u00e9Correction <p>Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es par des listes Python.</p> <p>Si <code>pile</code> est une pile, alors <code>pile == []</code> indique si la pile est vide, <code>pile.pop()</code> retire et renvoie le sommet de la pile et <code>pile.append(v)</code> ajoute la valeur <code>v</code> au sommet de la pile.</p> <p>Si on consid\u00e8re qu\u2019une fonction manipule une pile, elle ne peut pas utiliser d\u2019autres op\u00e9ra- tions que celles d\u00e9crites ci-dessus.</p> <p>On cherche \u00e0 \u00e9crire une fonction <code>positifs</code> qui prend une pile de nombres entiers en param\u00e8tre et qui renvoie une nouvelle pile contenant les entiers positifs de la pile initiale, dans le m\u00eame ordre, quitte \u00e0 modifier la pile initiale.</p> <p>Pour cela, on va \u00e9galement \u00e9crire une fonction <code>renverse</code> qui prend une pile en param\u00e8tre et qui renvoie une nouvelle pile contenant les m\u00eames \u00e9l\u00e9ments que la pile initiale, mais dans l\u2019ordre inverse. Cette fonction sera \u00e9galement amen\u00e9e \u00e0 modifier la pile pass\u00e9e en param\u00e8tre.</p> <p>Compl\u00e9ter le code Python des fonctions <code>renverse</code> et <code>positifs</code> ci-apr\u00e8s</p> <pre><code>def renverse(pile):\n    '''renvoie une pile contenant les m\u00eames \u00e9l\u00e9ments que pile,\n    mais dans l'ordre inverse.\n    Cette fonction d\u00e9truit pile.'''\n    pile_inverse = ... \n    while pile != []:\n        ... .append(...) \n    return ... \n\n\ndef positifs(pile):\n    '''renvoie une pile contenant les \u00e9l\u00e9ments positifs de pile,\n    dans le m\u00eame ordre. Cette fonction d\u00e9truit pile.'''\n    pile_positifs = ... \n    while pile != []:\n        ... = pile.pop() \n        if ... &gt;= 0: \n            ...\n    return ... \n</code></pre> <p>Exemple : <pre><code>&gt;&gt;&gt; renverse([1, 2, 3, 4, 5])\n[5, 4, 3, 2, 1]\n&gt;&gt;&gt; positifs([-1, 0, 5, -3, 4, -6, 10, 9, -8])\n[0, 5, 4, 10, 9]\n&gt;&gt;&gt; positifs([-2])\n[]\n</code></pre></p> <pre><code>def renverse(pile):\n    '''renvoie une pile contenant les m\u00eames \u00e9l\u00e9ments que pile,\n    mais dans l'ordre inverse.\n    Cette fonction d\u00e9truit pile.'''\n    pile_inverse = [] \n    while pile != []:\n        pile_inverse.append(pile.pop()) \n    return pile_inverse \n\n\ndef positifs(pile):\n    '''renvoie une pile contenant les \u00e9l\u00e9ments positifs de pile,\n    dans le m\u00eame ordre. Cette fonction d\u00e9truit pile.'''\n    pile_positifs = [] \n    while pile != []:\n        elt = pile.pop() \n        if elt &gt;= 0: \n            pile_positifs.append(elt)\n    return renverse(pile_positifs) \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-22","title":"\u25b6 Sujet 22","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-221","title":"Exercice 22.1","text":"<p>Exercice 22.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers (type <code>list</code> ), et qui renvoie l\u2019indice de la derni\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>None</code> sinon.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4]) # renvoie None\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(1, [1, 0, 42, 7])\n0\n&gt;&gt;&gt; recherche(1, [1, 50, 1])\n2\n&gt;&gt;&gt; recherche(1, [8, 1, 10, 1, 7, 1, 8])\n5\n</code></pre></p> <pre><code>def recherche(elt, tab):\n    for i in range(len(tab)-1, -1, -1):\n        if tab[i] == elt:\n            return i\n    return None\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-222","title":"Exercice 22.2","text":"<p>Exercice 22.2</p> \u00c9nonc\u00e9Correction <p>On d\u00e9finit une classe g\u00e9rant une adresse IPv4.</p> <p>On rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale \u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec une plage d\u2019adresses IP de <code>192.168.0.0</code> \u00e0 <code>192.168.0.255</code>.</p> <p>On consid\u00e8re que les adresses IP saisies sont valides.</p> <p>Les adresses IP <code>192.168.0.0</code> et <code>192.168.0.255</code> sont des adresses r\u00e9serv\u00e9es.</p> <p>Le code ci-dessous impl\u00e9mente la classe <code>AdresseIP</code>.</p> <p><pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = ... \n\n    def liste_octets(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        # Note : split d\u00e9coupe la chaine de caract\u00e8res \n        # en fonction du s\u00e9parateur\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        reservees = [ ... ] \n        return ... \n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l'adresse self si elle existe et None sinon\"\"\"\n        octets = ... \n        if ... == 254: \n            return None\n        octet_nouveau = ... + ... \n        return AdresseIP('192.168.0.' + ...) \n</code></pre> Compl\u00e9ter le code ci-dessus et instancier trois objets : <code>adresse1</code>, <code>adresse2</code>, <code>adresse3</code> avec respectivement les arguments suivants :</p> <p><code>'192.168.0.1'</code>, <code>'192.168.0.2'</code>, <code>'192.168.0.0'</code></p> <p>V\u00e9rifier que :  <pre><code>&gt;&gt;&gt; adresse1.liste_octets()\n[192, 168, 0, 1]\n&gt;&gt;&gt; adresse1.est_reservee()\nFalse\n&gt;&gt;&gt; adresse3.est_reservee()\nTrue\n&gt;&gt;&gt; adresse2.adresse_suivante().adresse # acces valide \u00e0 adresse\n# ici car on sait que l'adresse suivante existe\n'192.168.0.3'\n</code></pre></p> <pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = adresse \n\n    def liste_octets(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        # Note : split d\u00e9coupe la chaine de caract\u00e8res \n        # en fonction du s\u00e9parateur\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        reservees = [ '192.168.0.0', '192.168.0.255' ] \n        return self.adresse in reservees \n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l'adresse self si elle existe et None sinon\"\"\"\n        octets = self.liste_octets() \n        if octets[3] == 254: \n            return None\n        octet_nouveau = octets[3] + 1 \n        return AdresseIP('192.168.0.' + str(octet_nouveau))\n\n\n\nadresse1 = AdresseIP('192.168.0.1')\nadresse2 = AdresseIP('192.168.0.2')\nadresse3 = AdresseIP('192.168.0.0')\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-23","title":"\u25b6 Sujet 23","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-231","title":"Exercice 23.1","text":"<p>Exercice 23.1</p> \u00c9nonc\u00e9Correction <p>On veut trier par ordre croissant les notes d\u2019une \u00e9valuation qui sont des nombres entiers compris entre 0 et 10 (inclus).</p> <p>Ces notes sont contenues dans un tableau <code>notes_eval</code> (type <code>list</code>)</p> <p>\u00c9crire une fonction <code>effectif_notes</code> prenant en param\u00e8tre le tableau <code>notes_eval</code> et renvoyant un tableau de longueur 11 tel que la valeur d\u2019indice <code>i</code> soit le nombre de notes valant <code>i</code> dans le tableau <code>notes_eval</code>.</p> <p>\u00c9crire ensuite une fonction <code>notes_triees</code> prenant en param\u00e8tre le tableau des effectifs des notes et renvoyant un tableau contenant les m\u00eames valeurs que <code>notes_eval</code> mais tri\u00e9es dans l\u2019ordre croissant.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; notes_eval = [2, 0, 5, 9, 6, 9, 10, 5, 7, 9, 9, 5, 0, 9, 6, 5, 4]\n&gt;&gt;&gt; eff = effectif_notes(notes_eval)\n&gt;&gt;&gt; eff\n[2, 0, 1, 0, 1, 4, 2, 1, 0, 5, 1]\n&gt;&gt;&gt; notes_triees(eff)\n[0, 0, 2, 4, 5, 5, 5, 5, 6, 6, 7, 9, 9, 9, 9, 9, 10]\n</code></pre> <pre><code>def effectif_notes(notes_eval):\n    tab = [0]*11\n    for note in notes_eval:\n        tab[note] += 1\n    return tab\n\ndef notes_triees(eff):\n    triees = []\n    for i in range(11):\n        if eff[i] != 0: #(1)\n            for _ in range(eff[i]):\n                triees.append(i)\n    return triees\n</code></pre> <ol> <li>On peut ne pas effectuer ce test, car si <code>eff[i]</code> vaut 0, on ne rentrera pas dans la boucle <code>for _ in range(0)</code> et donc on ne touchera pas \u00e0 la liste <code>triees</code>.  </li> </ol>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-232","title":"Exercice 23.2","text":"<p>Exercice 23.2</p> \u00c9nonc\u00e9Correction <p>L\u2019objectif de cet exercice est d\u2019\u00e9crire deux fonctions r\u00e9cursives <code>dec_to_bin</code> et <code>bin_to_dec</code> assurant respectivement la conversion de l\u2019\u00e9criture d\u00e9cimale d\u2019un nombre entier vers son \u00e9criture en binaire et, r\u00e9ciproquement, la conversion de l\u2019\u00e9criture en binaire d\u2019un nombre vers son \u00e9criture d\u00e9cimale.</p> <p>Dans cet exercice, on s\u2019interdit l\u2019usage des fonctions Python <code>bin</code> et <code>int</code>.</p> <p>L'exemple suivant montre comment obtenir l\u2019\u00e9criture en binaire du nombre 25 :</p> <p>\\(25 =  2 \\times 12 + 1\\) \\(\\phantom{25} = 2 \\times (2 \\times 6 + 0) + 1\\) \\(\\phantom{25} = 2 \\times (2 \\times (2 \\times 3 + 0) + 0) + 1\\) \\(\\phantom{25} = 2 \\times (2 \\times (2 \\times (2 \\times 1+1) + 0) + 0) + 1\\) \\(\\phantom{25} = 2 \\times (2 \\times (2 \\times (2 \\times (2\u00a0\\times 0 + 1)+1) + 0) + 0) + 1\\) \\(\\phantom{25} = 1 \\times 2^4 + 1 \\times 2^3 + 0 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0\\) \\(\\phantom{25} = \\overline{11001}_2\\) </p> <p>L'\u00e9criture binaire de 25 est donc <code>11001</code>.</p> <p>0n rappelle \u00e9galement que :</p> <ul> <li><code>a // 2</code> renvoie le quotient de la division euclidienne de <code>a</code> par 2.</li> <li><code>a % 2</code> renvoie le reste dans la division euclidienne de <code>a</code> par 2.</li> </ul> <p>On indique enfin qu\u2019en Python si <code>mot = \"informatique\"</code> alors :</p> <ul> <li><code>mot[-1]</code> renvoie <code>'e'</code>, c\u2019est-\u00e0-dire le dernier caract\u00e8re de la cha\u00eene de caract\u00e8res <code>mot</code>.</li> <li><code>mot[:-1]</code> renvoie <code>'informatiqu'</code> , c\u2019est-\u00e0-dire l\u2019ensemble de la cha\u00eene de caract\u00e8res <code>mot</code> priv\u00e9e de son dernier caract\u00e8re.</li> </ul> <p>Compl\u00e9ter, puis tester, les codes de deux fonctions ci-dessous.  On pr\u00e9cise que la fonction r\u00e9cursive <code>dec_to_bin</code> prend en param\u00e8tre un nombre entier et renvoie une cha\u00eene de caract\u00e8res contenant l\u2019\u00e9criture en binaire du nombre pass\u00e9 en param\u00e8tre.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; dec_to_bin(25)\n'11001'\n</code></pre> <p>La fonction r\u00e9cursive <code>bin_to_dec</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res repr\u00e9sentant l\u2019\u00e9criture d\u2019un nombre en binaire et renvoie l\u2019\u00e9criture d\u00e9cimale de ce nombre.</p> <pre><code>&gt;&gt;&gt; bin_to_dec('101010')\n42\n</code></pre> <pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\n    if q == ...: \n        return ... \n    else:\n        return dec_to_bin(...) + ... \n\ndef bin_to_dec(nb_bin):\n    if len(nb_bin) == 1:\n        if ... == '0': \n            return 0\n        else:\n            return ... \n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\n            ...\n        return ... * bin_to_dec(nb_bin[:-1]) + ... \n</code></pre> <pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\n    if q == 0: \n        return str(r) \n    else:\n        return dec_to_bin(q) + str(r) \n\ndef bin_to_dec(nb_bin):\n    if len(nb_bin) == 1:\n        if nb_bin == '0': \n            return 0\n        else:\n            return 1 \n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\n            bit_droit = 1\n        return 2 * bin_to_dec(nb_bin[:-1]) + bit_droit\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-24","title":"\u25b6 Sujet 24","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-241","title":"Exercice 24.1","text":"<p>Exercice 24.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>enumere</code> qui prend en param\u00e8tre un tableau <code>tab</code> (type <code>list</code>) et renvoie un dictionnaire <code>d</code> dont les cl\u00e9s sont les \u00e9l\u00e9ments de <code>tab</code> avec pour valeur associ\u00e9e la liste des indices de l\u2019\u00e9l\u00e9ment dans le tableau <code>tab</code>.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; enumere([])\n{}\n&gt;&gt;&gt; enumere([1, 2, 3])\n{1: [0], 2: [1], 3: [2]}\n&gt;&gt;&gt; enumere([1, 1, 2, 3, 2, 1])\n{1: [0, 1, 5], 2: [2, 4], 3: [3]}\n</code></pre> <pre><code>def enumere(tab):\n    d = {}\n    for i in range(len(tab)):\n        if tab[i] in d:\n            d[tab[i]].append(i)\n        else:\n            d[tab[i]] = [i]\n    return d\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-242","title":"Exercice 24.2","text":"<p>Exercice 24.2</p> \u00c9nonc\u00e9Correction <p>Un arbre binaire est soit vide, repr\u00e9sent\u00e9 en Python par la valeur <code>None</code>, soit un n\u0153ud, contenant une \u00e9tiquette et deux sous-arbres gauche et droit et repr\u00e9sent\u00e9 par une instance de la classe <code>Noeud</code> donn\u00e9e ci-dessous.</p> <pre><code>class Noeud:\n    \"\"\"Classe repr\u00e9sentant un noeud d'un arbre binaire\"\"\"\n    def __init__(self, etiquette, gauche, droit):\n        \"\"\"Cr\u00e9e un noeud de valeur etiquette avec \n        gauche et droit comme fils.\"\"\"\n        self.etiquette = etiquette\n        self.gauche = gauche\n        self.droit = droit\n\ndef parcours(arbre, liste):\n    \"\"\"parcours r\u00e9cursivement l'arbre en ajoutant les \u00e9tiquettes\n    de ses noeuds \u00e0 la liste pass\u00e9e en argument en ordre infixe.\"\"\"\n    if arbre != None:\n        parcours(arbre.gauche, liste)\n        liste.append(arbre.etiquette)\n        parcours(arbre.droit, liste)\n    return liste\n</code></pre> <p>La fonction r\u00e9cursive <code>parcours</code> renvoie la liste des \u00e9tiquettes des n\u0153uds de l\u2019arbre impl\u00e9- ment\u00e9 par l\u2019instance <code>arbre</code> dans l\u2019ordre du parcours en profondeur infixe \u00e0 partir d\u2019une liste vide pass\u00e9e en argument.</p> <p>Compl\u00e9ter le code de la fonction <code>insere</code>, pr\u00e9sent\u00e9 page suivante, qui prend en argument un arbre binaire de recherche <code>arbre</code> repr\u00e9sent\u00e9 ainsi et une \u00e9tiquette <code>cle</code>, non pr\u00e9sente dans l\u2019arbre, et qui :</p> <ul> <li>renvoie une nouvelle feuille d\u2019\u00e9tiquette <code>cle</code> s\u2019il est vide ;</li> <li>renvoie l\u2019arbre apr\u00e8s l\u2019avoir modifi\u00e9 en ins\u00e9rant <code>cle</code> sinon ;</li> <li>garantit que l\u2019arbre ainsi compl\u00e9t\u00e9 soit encore un arbre binaire de recherche.</li> </ul> <p>Tester ensuite ce code en utilisant la fonction <code>parcours</code> et en ins\u00e9rant successivement des n\u0153uds d\u2019\u00e9tiquette 1, 4, 6 et 8 dans l\u2019arbre binaire de recherche repr\u00e9sent\u00e9 ci- dessous :</p> <p></p> <pre><code>def insere(arbre, cle):\n    \"\"\"insere la cle dans l'arbre binaire de recherche\n    repr\u00e9sent\u00e9 par arbre.\n    Retourne l'arbre modifi\u00e9.\"\"\"\n    if arbre == None:\n        return Noeud(cle, None, None) # creation d'une feuille\n    else:\n        if ...: \n            arbre.gauche = insere(arbre.gauche, cle)\n        else:\n            arbre.droit = ... \n        return arbre\n</code></pre> <pre><code>def insere(arbre, cle):\n    \"\"\"insere la cle dans l'arbre binaire de recherche\n    repr\u00e9sent\u00e9 par arbre.\n    Retourne l'arbre modifi\u00e9.\"\"\"\n    if arbre == None:\n        return Noeud(cle, None, None) # creation d'une feuille\n    else:\n        if cle &lt; arbre.etiquette: \n            arbre.gauche = insere(arbre.gauche, cle)\n        else:\n            arbre.droit = insere(arbre.droit, cle) \n        return arbre\n</code></pre> <p>Tests :</p> <pre><code>&gt;&gt;&gt; a = Noeud(5, None, None)\n&gt;&gt;&gt; a = insere(a, 2)\n&gt;&gt;&gt; a = insere(a, 3)\n&gt;&gt;&gt; a = insere(a, 7)\n&gt;&gt;&gt; parcours(a, [])\n[2, 3, 5, 7]\n&gt;&gt;&gt; a = insere(a, 1)\n&gt;&gt;&gt; a = insere(a, 4)\n&gt;&gt;&gt; a = insere(a, 6)\n&gt;&gt;&gt; a = insere(a, 8)\n&gt;&gt;&gt; parcours(a, [])\n[1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-25","title":"\u25b6 Sujet 25","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-251","title":"Exercice 25.1","text":"<p>Exercice 25.1</p> \u00c9nonc\u00e9Correction <p>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux tableaux (de type <code>list</code>) : l\u2019un pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es :</p> <pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n</code></pre> <p>\u00c9crire la fonction <code>annee_temperature_minimale</code> qui prend en param\u00e8tres ces deux tableaux et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante.</p> <p>On suppose que la temp\u00e9rature minimale est atteinte une seule fois.</p> <p>Exemple : <pre><code>&gt;&gt;&gt; annee_temperature_minimale(t_moy, annees)\n(12.5, 2016)\n</code></pre></p> <pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n\ndef annee_temperature_minimale(releve, date):\n    temp_mini = releve[0]\n    date_mini = date[0]\n    for i in range(len(releve)):\n        if releve[i] &lt; temp_mini:\n            temp_mini = releve[i]\n            date_mini = date[i]\n    return temp_mini, date_mini\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-252","title":"Exercice 25.2","text":"<p>Exercice 25.2</p> \u00c9nonc\u00e9Correction <p>Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : kayak, radar, et non sont des mots palindromes.</p> <p>De m\u00eame certains nombres ont des \u00e9critures d\u00e9cimales qui sont des palindromes : 33, 121, 345543.</p> <p>L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome.</p> <p>Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous qui s\u2019appuient les unes sur les autres :</p> <ul> <li><code>inverse_chaine</code> : qui renvoie une cha\u00eene de caract\u00e8res invers\u00e9e ;</li> <li><code>est_palindrome</code> : qui teste si une cha\u00eene de caract\u00e8res est un palindrome ;</li> <li><code>est_nbre_palindrome</code> : qui teste si un nombre est un palindrome.</li> </ul> <p>Compl\u00e9ter le code des trois fonctions ci-dessous. <pre><code>def inverse_chaine(chaine):\n    '''Retourne la chaine invers\u00e9e'''\n    resultat = ... \n    for caractere in chaine:\n        resultat = ... \n    return resultat\n\ndef est_palindrome(chaine):\n    '''Renvoie un bool\u00e9en indiquant si la chaine ch\n    est un palindrome'''\n    inverse = inverse_chaine(chaine)\n    return ... \n\ndef est_nbre_palindrome(nbre):\n    '''Renvoie un bool\u00e9en indiquant si le nombre nbre \n    est un palindrome'''\n    chaine = ... \n    return est_palindrome(chaine)\n</code></pre></p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; inverse_chaine('bac')\n'cab'\n&gt;&gt;&gt; est_palindrome('NSI')\nFalse\n&gt;&gt;&gt; est_palindrome('ISN-NSI')\nTrue\n&gt;&gt;&gt; est_nbre_palindrome(214312)\nFalse\n&gt;&gt;&gt; est_nbre_palindrome(213312)\nTrue\n</code></pre> <pre><code>def inverse_chaine(chaine):\n    '''Retourne la chaine invers\u00e9e'''\n    resultat = '' \n    for caractere in chaine:\n        resultat = caractere + resultat \n    return resultat\n\ndef est_palindrome(chaine):\n    '''Renvoie un bool\u00e9en indiquant si la chaine ch\n    est un palindrome'''\n    inverse = inverse_chaine(chaine)\n    return chaine == inverse \n\ndef est_nbre_palindrome(nbre):\n    '''Renvoie un bool\u00e9en indiquant si le nombre nbre \n    est un palindrome'''\n    chaine = str(nbre) \n    return est_palindrome(chaine)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-26","title":"\u25b6 Sujet 26","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-261","title":"Exercice 26.1","text":"<p>Exercice 26.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>ajoute_dictionnaires</code> qui prend en param\u00e8tres deux dictionnaires <code>d1</code> et <code>d2</code> dont les cl\u00e9s sont des nombres et renvoie le dictionnaire <code>d</code> d\u00e9fini de la fa\u00e7on suivante :</p> <ul> <li>Les cl\u00e9s de <code>d</code> sont celles de <code>d1</code> et celles de <code>d2</code> r\u00e9unies.</li> <li>Si une cl\u00e9 est pr\u00e9sente dans les deux dictionnaires <code>d1</code> et <code>d2</code>, sa valeur associ\u00e9e dans le dictionnaire <code>d</code> est la somme de ses valeurs dans les dictionnaires <code>d1</code> et <code>d2</code>.</li> <li>Si une cl\u00e9 n\u2019est pr\u00e9sente que dans un des deux dictionnaires, sa valeur associ\u00e9e dans le dictionnaire <code>d</code> est la m\u00eame que sa valeur dans le dictionnaire o\u00f9 elle est pr\u00e9sente.</li> </ul> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {2: 9, 3: 11})\n{1: 5, 2: 16, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({}, {2: 9, 3: 11})\n{2: 9, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {})\n{1: 5, 2: 7}\n</code></pre> <pre><code>def ajoute_dictionnaires(d1, d2):\n    d = {}\n    for cle in d1:\n        d[cle] = d1[cle]\n    for cle in d2:\n        if cle in d:\n            d[cle] += d2[cle]\n        else:\n            d[cle] = d2[cle]\n    return d\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-262","title":"Exercice 26.2","text":"<p>Exercice 26.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re une piste carr\u00e9e qui contient 4 cases par c\u00f4t\u00e9. Les cases sont num\u00e9rot\u00e9es de 0 inclus \u00e0 12 exclu comme ci-dessous :</p> <p></p> <p>L\u2019objectif de l\u2019exercice est d\u2019impl\u00e9menter le jeu suivant :</p> <p>Au d\u00e9part, le joueur place son pion sur la case 0. A chaque coup, il lance un d\u00e9 \u00e9quilibr\u00e9 \u00e0 six faces et avance son pion d\u2019autant de cases que le nombre indiqu\u00e9 par le d\u00e9 (entre 1 et 6 inclus) dans le sens des aiguilles d\u2019une montre.</p> <p>Par exemple, s\u2019il obtient 2 au premier lancer, il pose son pion sur la case 2 puis s\u2019il obtient 6 au deuxi\u00e8me lancer, il le pose sur la case 8, puis s\u2019il obtient \u00e0 nouveau 6, il pose le pion sur la case 2.</p> <p>Le jeu se termine lorsque le joueur a pos\u00e9 son pion sur toutes les cases de la piste.</p> <p>Compl\u00e9ter la fonction <code>nombre_coups</code> ci-dessous de sorte qu\u2019elle renvoie le nombre de lancers al\u00e9atoires n\u00e9cessaires pour terminer le jeu.</p> <pre><code>from random import randint\n\ndef nombre_coups():\n    '''Simule un jeu de plateau avec 12 cases et renvoie le nombre\n    n\u00e9cessaire de coups pour visiter toutes les cases.'''\n    nombre_cases = 12\n    # indique si une case a \u00e9t\u00e9 vue\n    cases_vues = [ False ] * nombre_cases\n    nombre_cases_vues = 1\n    cases_vues[0] = True\n    case_en_cours = 0\n    n = ... \n    while ... &lt; ...: \n        x = randint(1, 6)\n        case_en_cours = (case_en_cours + ...) % ... \n        if ...: \n            cases_vues[case_en_cours] = True\n            nombre_cases_vues = ... \n        n = ... \n    return n\n</code></pre> <pre><code>from random import randint\n\ndef nombre_coups():\n    '''Simule un jeu de plateau avec 12 cases et renvoie le nombre\n    minimal de coups pour visiter toutes les cases.'''\n    nombre_cases = 12\n    # indique si une case a \u00e9t\u00e9 vue\n    cases_vues = [ False ] * nombre_cases\n    nombre_cases_vues = 1\n    cases_vues[0] = True\n    case_en_cours = 0\n    n = 0 \n    while nombre_cases_vues &lt; nombre_cases: \n        x = randint(1, 6)\n        case_en_cours = (case_en_cours + x) % nombre_cases \n        if not cases_vues[case_en_cours]: \n            cases_vues[case_en_cours] = True\n            nombre_cases_vues = nombre_cases_vues + 1 \n        n = n + 1 \n    return n\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-27","title":"\u25b6 Sujet 27","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-271","title":"Exercice 27.1","text":"<p>Exercice 27.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>verifie</code> qui prend en param\u00e8tre un tableau de valeurs num\u00e9riques et qui renvoie <code>True</code> si ce tableau est tri\u00e9 dans l\u2019ordre croissant, <code>False</code> sinon.</p> <p>Un tableau vide est consid\u00e9r\u00e9 comme tri\u00e9.</p> <p>Exemples :</p> <pre><code>Exemples :\n&gt;&gt;&gt; verifie([0, 5, 8, 8, 9])\nTrue\n&gt;&gt;&gt; verifie([8, 12, 4])\nFalse\n&gt;&gt;&gt; verifie([-1, 4])\nTrue\n&gt;&gt;&gt; verifie([])\nTrue\n&gt;&gt;&gt; verifie([5])\nTrue\n</code></pre> <pre><code>def verifie(tab):\n    for i in range(1, len(tab)):\n        if tab[i] &lt; tab[i-1]:\n            return False\n    return True\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-272","title":"Exercice 27.2","text":"<p>Exercice 27.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re dans cet exercice l\u2019\u00e9lection d\u2019un vainqueur \u00e0 l\u2019issue d\u2019un vote. Les r\u00e9sultats du vote sont stock\u00e9s dans un tableau : chaque vote exprim\u00e9 est le nom d\u2019un ou d\u2019une candidate. Par exemple, les r\u00e9sultats pourraient correspondre au tableau :</p> <pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n</code></pre> <p>indiquant que 3 candidats ont obtenu au moins un vote chacun : A, B et C.</p> <p>On cherche \u00e0 d\u00e9terminer le ou les candidats ayant obtenu le plus de suffrages. Pour cela, on propose d\u2019\u00e9crire deux fonctions :</p> <ul> <li>La fonction <code>depouille</code> doit permettre de compter le nombre de votes exprim\u00e9s pour chaque artiste. Elle prend en param\u00e8tre un tableau et renvoie le r\u00e9sultat dans un dictionnaire dont les cl\u00e9s sont les noms des issues et les valeurs le nombre de votes en leur faveur.</li> <li>La fonction <code>vainqueurs</code> doit d\u00e9signer le nom du ou des gagnants. Elle prend en param\u00e8tre un dictionnaire non vide dont la structure est celle du dictionnaire renvoy\u00e9 par la fonction <code>depouille</code> et renvoie un tableau. Ce tableau peut donc contenir plusieurs \u00e9l\u00e9ments s\u2019il y a des artistes ex- aequo. Compl\u00e9ter les fonctions <code>depouille</code> et <code>vainqueurs</code> ci-apr\u00e8s pour qu\u2019elles renvoient les r\u00e9sultats attendus.</li> </ul> <pre><code>def depouille(urne):\n    '''prend en param\u00e8tre une liste de suffrages et renvoie un \n    dictionnaire avec le nombre de voix pour chaque candidat'''\n    resultat = ... \n    for bulletin in urne:\n        if ...: \n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            ...\n    return resultat\n\ndef vainqueurs(election):\n    '''prend en param\u00e8tre un dictionnaire non vide avec le nombre de voix\n    pour chaque candidat et renvoie la liste des vainqueurs'''\n    nmax = 0\n    for candidat in election:\n        if ... &gt; ... : \n            nmax = ... \n    liste_finale = [ nom for nom in election if ... ] \n    return ... \n</code></pre> <p>Exemples d\u2019utilisation :</p> <pre><code>&gt;&gt;&gt; depouille([ 'A', 'B', 'A' ])\n{'A': 2, 'B': 1}\n&gt;&gt;&gt; depouille([])\n{}\n&gt;&gt;&gt; election = depouille(['A', 'A', 'A', 'B', 'C',\n'B', 'C', 'B', 'C', 'B'])\n&gt;&gt;&gt; election\n{'A': 3, 'B': 4, 'C': 3}\n&gt;&gt;&gt; vainqueurs(election)\n['B']\n&gt;&gt;&gt; vainqueurs({ 'A' : 2, 'B' : 2, 'C' : 1})\n['A', 'B']\n</code></pre> <pre><code>def depouille(urne):\n    '''prend en param\u00e8tre une liste de suffrages et renvoie un \n    dictionnaire avec le nombre de voix pour chaque candidat'''\n    resultat = {}\n    for bulletin in urne:\n        if bulletin in resultat:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            resultat[bulletin] = 1\n    return resultat\n\ndef vainqueurs(election):\n    '''prend en param\u00e8tre un dictionnaire non vide avec le nombre de voix\n    pour chaque candidat et renvoie la liste des vainqueurs'''\n    nmax = 0\n    for candidat in election:\n        if election[candidat] &gt; nmax: \n            nmax = election[candidat] \n    liste_finale = [ nom for nom in election if election[nom] == nmax ]\n    return liste_finale\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-28","title":"\u25b6 Sujet 28","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-281","title":"Exercice 28.1","text":"<p>Exercice 28.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>a_doublon</code> qui prend en param\u00e8tre un tableau tri\u00e9 de nombres dans l\u2019ordre croissant et renvoie <code>True</code> si ce tableau contient au moins deux nombres identiques, <code>False</code> sinon.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; a_doublon([])\nFalse\n&gt;&gt;&gt; a_doublon([1])\nFalse\n&gt;&gt;&gt; a_doublon([1, 2, 4, 6, 6])\nTrue\n&gt;&gt;&gt; a_doublon([2, 5, 7, 7, 7, 9])\nTrue\n&gt;&gt;&gt; a_doublon([0, 2, 3])\nFalse\n</code></pre> <pre><code>def a_doublon(tab):\n    for i in range(len(tab)-1):\n        if tab[i] == tab[i+1]:\n            return True\n    return False\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-282","title":"Exercice 28.2","text":"<p>Exercice 28.2</p> \u00c9nonc\u00e9Correction <p>On souhaite g\u00e9n\u00e9rer des grilles du jeu de d\u00e9mineur \u00e0 partir de la position des bombes \u00e0 placer. On se limite \u00e0 la g\u00e9n\u00e9ration de grilles carr\u00e9es de taille \\(n \\times n\\) o\u00f9 \\(n\\) est le nombre de bombes du jeu.  </p> <p>Dans le jeu du d\u00e9mineur, chaque case de la grille contient soit une bombe, soit une valeur qui correspond aux nombres de bombes situ\u00e9es dans le voisinage direct de la case (au- dessus, en dessous, \u00e0 droite, \u00e0 gauche ou en diagonale : chaque case a donc 8 voisins si elle n'est pas situ\u00e9e au bord de la grille).</p> <p>Voici un exemple de grille \\(5 \\times 5\\) de d\u00e9mineur dans laquelle la bombe est repr\u00e9sent\u00e9e par une \u00e9toile :</p> <p></p> <p>On utilise une liste de listes pour repr\u00e9senter la grille et on choisit de coder une bombe par la valeur -1.</p> <p>L'exemple ci-contre sera donc cod\u00e9 par la liste :</p> <pre><code>[[1, 1, 1, 0, 0],\n[1, -1, 1, 1, 1],\n[2, 2, 3, 2, -1],\n[1, -1, 2, -1, 3],\n[1, 1, 2, 2, -1]]\n</code></pre> <p>Compl\u00e9ter le code suivant afin de g\u00e9n\u00e9rer des grilles de d\u00e9mineur, on pourra v\u00e9rifier que l'appel</p> <p><code>genere_grille([(1, 1), (2, 4), (3, 1), (3, 3), (4, 4)])</code></p> <p>renvoie bien la liste donn\u00e9e en exemple.</p> <pre><code>def voisinage(n, ligne, colonne):\n    \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) dans un grille de taille n x n,\n    en tenant compte des cases sur les bords. \"\"\"\n    voisins = []\n    for dl in range(-1, 2):\n        for dc in range(-1, 2):\n            l = ligne + dl\n            c = colonne + dc\n            if (l, c) != (ligne, colonne) and 0 &lt;= l &lt; n and 0 &lt;= c &lt; n:\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n    \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\n    voisins = ...\n    for l, c in voisins:\n        if grille[l][c] != ...: # si ce n'est pas une bombe\n            ...  # on ajoute 1 \u00e0 sa valeur\n\n\n\ndef genere_grille(bombes):\n    \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\n        grille[ligne][colonne] = ... # place la bombe\n        ... # incr\u00e9mente ses voisins\n\n    return grille\n</code></pre> <pre><code>def voisinage(n, ligne, colonne):\n    \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n    \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\n    voisins = voisinage(len(grille), ligne, colonne)\n    for l, c in voisins:\n        if grille[l][c] != -1: # si ce n'est pas une bombe\n            grille[l][c] += 1  # on ajoute 1 \u00e0 sa valeur\n\n\n\ndef genere_grille(bombes):\n    \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\n        grille[ligne][colonne] = -1 # place la bombe\n        incremente_voisins(grille, ligne, colonne) # incr\u00e9mente ses voisins\n\n    return grille\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-29","title":"\u25b6 Sujet 29","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-291","title":"Exercice 29.1","text":"<p>Exercice 29.1</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re des tables, c\u2019est-\u00e0-dire des tableaux de dictionnaires ayant tous les m\u00eames cl\u00e9s, qui contiennent des enregistrements relatifs \u00e0 des animaux h\u00e9berg\u00e9s dans un refuge. Les attributs des enregistrements sont <code>'nom'</code>, <code>'espece'</code>, <code>'age'</code>, <code>'enclos'</code>.</p> <p>Voici un exemple d'une telle table :</p> <pre><code>animaux = [ {'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2},\n            {'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n            {'nom':'Tom', 'espece':'chat', 'age':7, 'enclos':4},\n            {'nom':'Belle', 'espece':'chien', 'age':6, 'enclos':3},\n            {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n</code></pre> <p>Programmer une fonction <code>selection_enclos</code> qui :</p> <ul> <li>prend en param\u00e8tres :<ul> <li>une table <code>animaux</code> contenant des enregistrements relatifs \u00e0 des animaux (comme dans l'exemple ci-dessus),</li> <li>un num\u00e9ro d'enclos <code>num_enclos</code> ;</li> </ul> </li> <li>renvoie une table contenant les enregistrements de <code>animaux</code> dont l'attribut <code>'enclos'</code> est <code>num_enclos</code>.</li> </ul> <p>Exemples avec la table <code>animaux</code> ci-dessus :</p> <pre><code>&gt;&gt;&gt; selection_enclos(animaux, 5)\n[{'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 2)\n[{'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 7)\n[]\n</code></pre> <pre><code>def selection_enclos(animaux, num_enclos):\n    table = []\n    for animal in animaux:\n        if animal['enclos'] == num_enclos:\n            table.append(animal)\n    return table\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-292","title":"Exercice 29.2","text":"<p>Exercice 29.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re des tableaux de nombres dont tous les \u00e9l\u00e9ments sont pr\u00e9sents exactement trois fois \u00e0 la suite, sauf un \u00e9l\u00e9ment qui est pr\u00e9sent une unique fois et que l'on appelle \u00ab l'intrus \u00bb. Voici quelques exemples :</p> <p><pre><code>tab_a = [3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n#l'intrus est 7\n\ntab_b = [8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3]\n#l'intrus est 8\n\ntab_c = [5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8]\n#l'intrus est 3\n</code></pre> On remarque qu'avec de tels tableaux :</p> <ul> <li>pour les indices multiples de 3 situ\u00e9s strictement avant l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite sont \u00e9gaux,</li> <li>pour les indices multiples de 3 situ\u00e9s apr\u00e8s l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite - s'il existe - sont diff\u00e9rents.</li> </ul> <p>Ce que l'on peut observer ci-dessous en observant les valeurs des paires de voisins marqu\u00e9es par des caract\u00e8res ^ :</p> <pre><code>[3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^\n 0        3        6        9        12       15       18       21\n</code></pre> <p>Dans des listes comme ceux ci-dessus, un algorithme r\u00e9cursif pour trouver l'intrus consiste alors \u00e0 choisir un indice <code>i</code> multiple de 3 situ\u00e9 approximativement au milieu des indices parmi lesquels se trouve l'intrus. </p> <p>Puis, en fonction des valeurs de l'\u00e9l\u00e9ment d'indice <code>i</code> et de son voisin de droite, \u00e0 appliquer r\u00e9cursivement l'algorithme \u00e0 la moiti\u00e9 droite ou \u00e0 la moiti\u00e9 gauche des indices parmi lesquels se trouve l'intrus. </p> <p>Par exemple, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 12, on voit les valeurs 2 et 4 qui sont diff\u00e9rentes : l\u2019intrus est donc \u00e0 gauche de l\u2019indice 12 (indice 12 compris)</p> <p>En revanche, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 3, on voit les valeurs 9 et 9 qui sont identiques : l\u2019intrus est donc \u00e0 droite des indices 3-4-5, donc \u00e0 partir de l\u2019indice 6.</p> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>trouver_intrus</code> propos\u00e9e page suivante qui met en \u0153uvre cet algorithme.</p> <pre><code>def trouver_intrus(tab, g, d):\n    '''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return ...\n\n    else:\n        nombre_de_triplets = (d - g) // ...\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if ... :\n            return ...\n        else:\n            return ...\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; trouver_intrus([3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8,\n8, 5, 5, 5], 0, 21)\n7\n\n&gt;&gt;&gt; trouver_intrus([8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3], 0, 12)\n8\n\n&gt;&gt;&gt; trouver_intrus([5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8], 0, 15)\n3\n</code></pre> <pre><code>def trouver_intrus(tab, g, d):\n    '''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return tab[g]\n\n    else:\n        nombre_de_triplets = (d - g) // 3\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if tab[indice] != tab[indice + 1] :\n            return trouver_intrus(tab, g, indice)\n        else:\n            return trouver_intrus(tab, indice + 3, d)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-30","title":"\u25b6 Sujet 30","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-301","title":"Exercice 30.1","text":"<p>Exercice 30.1</p> \u00c9nonc\u00e9Correction <p>Le codage par diff\u00e9rence (delta encoding en anglais) permet de compresser un tableau d\u2019entiers dont les valeurs sont proches les unes des autres. Le principe est de stocker la premi\u00e8re donn\u00e9e en indiquant pour chaque autre donn\u00e9e sa diff\u00e9rence avec la pr\u00e9c\u00e9dente plut\u00f4t que la donn\u00e9e elle-m\u00eame.</p> <p>On se retrouve alors avec un tableau de donn\u00e9es plus petit, n\u00e9cessitant moins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives sont proches. </p> <p>Programmer la fonction <code>delta(liste)</code> qui prend en param\u00e8tre un tableau non vide de nombres entiers et qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; delta([1000, 800, 802, 1000, 1003])\n[1000, -200, 2, 198, 3]\n&gt;&gt;&gt; delta([42])\n[42] \n</code></pre> <pre><code>def delta(tab):\n    diff = [tab[0]]\n    for i in range(1, len(tab)):\n        diff.append(tab[i] - tab[i-1])\n    return diff\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-302","title":"Exercice 30.2","text":"<p>Exercice 30.2</p> \u00c9nonc\u00e9Correction <p>Une expression arithm\u00e9tique ne comportant que les quatre op\u00e9rations +, \u2212, \u00d7, \u00f7 peut \u00eatre repr\u00e9sent\u00e9e sous forme d\u2019arbre binaire. Les n\u0153uds internes sont des op\u00e9rateurs et les feuilles sont des nombres. Dans un tel arbre, la disposition des n\u0153uds joue le r\u00f4le des parenth\u00e8ses que nous connaissons bien.  </p> <p></p> <p>En parcourant en profondeur infixe l\u2019arbre binaire ci-dessus, on retrouve l\u2019expression not\u00e9e habituellement :  </p> \\[(3 \\times (8 + 7)) \u2212 (2 + 1)\\] <p>La classe <code>Expr</code> ci-apr\u00e8s permet d\u2019impl\u00e9menter une structure d\u2019arbre binaire pour repr\u00e9senter de telles expressions.</p> <p>Compl\u00e9ter la m\u00e9thode r\u00e9cursive <code>infixe</code> qui renvoie une cha\u00eene de caract\u00e8res contenant des parenth\u00e8ses repr\u00e9sentant l\u2019expression arithm\u00e9tique sur laquelle on l\u2019applique.</p> <pre><code>class Expr:\n    \"\"\"Classe impl\u00e9mentant un arbre d'expression.\"\"\"\n\n    def __init__(self, g, v, d):\n        \"\"\"un objet Expr poss\u00e8de 3 attributs :\n        - gauche : la sous-expression gauche ;\n        - valeur : la valeur de l'\u00e9tiquette, op\u00e9rateur ou nombre ;\n        - droite : la sous-expression droite.\"\"\"\n        self.gauche = g\n        self.valeur = v\n        self.droite = d\n\n    def est_une_feuille(self):\n        \"\"\"renvoie True si et seulement \n        si le noeud est une feuille\"\"\"\n        return self.gauche is None and self.droite is None\n\n    def infixe(self):\n        \"\"\"renvoie la repr\u00e9sentation infixe de l'expression en\n        chaine de caract\u00e8res\"\"\"\n        s = ... \n        if self.gauche is not None:\n            s = s + '(' + ....infixe()\n        s = s + ... \n        if ... is not None: \n            s = s + ... + ... \n        return s\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; a = Expr(Expr(None, 1, None), '+', Expr(None, 2, None))\n&gt;&gt;&gt; a.infixe()\n'(1+2)'\n&gt;&gt;&gt; b = Expr(Expr(Expr(None, 1, None), '+', Expr(None, 2, None)), '*', Expr(Expr(None, 3, None), '+', Expr(None, 4, None)))\n&gt;&gt;&gt; b.infixe()\n'((1+2)*(3+4))'\n&gt;&gt;&gt; e = Expr(Expr(Expr(None, 3, None), '*', Expr(Expr(None, 8, None), '+', Expr(None, 7, None))),\n'-', Expr(Expr(None, 2, None), '+', Expr(None, 1, None)))\n&gt;&gt;&gt; e.infixe()\n'((3*(8+7))-(2+1))'\n</code></pre> <pre><code>class Expr:\n    \"\"\"Classe impl\u00e9mentant un arbre d'expression.\"\"\"\n\n    def __init__(self, g, v, d):\n        \"\"\"un objet Expr poss\u00e8de 3 attributs :\n        - gauche : la sous-expression gauche ;\n        - valeur : la valeur de l'\u00e9tiquette, op\u00e9rande ou nombre ;\n        - droite : la sous-expression droite.\"\"\"\n        self.gauche = g\n        self.valeur = v\n        self.droite = d\n\n    def est_une_feuille(self):\n        \"\"\"renvoie True si et seulement \n        si le noeud est une feuille\"\"\"\n        return self.gauche is None and self.droite is None\n\n    def infixe(self):\n        \"\"\"renvoie la repr\u00e9sentation infixe de l'expression en\n        chaine de caract\u00e8res\"\"\"\n        s = '' \n        if self.gauche is not None:\n            s = '(' + s + self.gauche.infixe() \n        s = s + str(self.valeur) \n        if self.droite is not None: \n            s = s + self.droite.infixe() + ')' \n        return s\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-31","title":"\u25b6 Sujet 31","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-311","title":"Exercice 31.1","text":"<p>Exercice 31.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche_motif</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>motif</code> non vide et une cha\u00eene de caract\u00e8res <code>texte</code> et qui renvoie la liste des positions de <code>motif</code> dans <code>texte</code>. Si <code>motif</code> n\u2019appara\u00eet pas, la fonction renvoie une liste vide.</p> <p>Exemples:</p> <pre><code>&gt;&gt;&gt; recherche_motif(\"ab\", \"\")\n[]\n&gt;&gt;&gt; recherche_motif(\"ab\", \"cdcdcdcd\")\n[]\n&gt;&gt;&gt; recherche_motif(\"ab\", \"abracadabra\")\n[0, 7]\n&gt;&gt;&gt; recherche_motif(\"ab\", \"abracadabraab\")\n[0, 7, 11]\n</code></pre> <pre><code>def recherche_motif(motif, texte):\n    sol = []\n    i = 0\n    while i &lt;= len(texte) - len(motif):\n        j = 0\n        while j &lt; len(motif) and motif[j] == texte[j+i]:\n            j += 1\n        if j == len(motif):\n            sol.append(i)\n        i += 1\n    return sol\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-312","title":"Exercice 31.2","text":"<p>Exercice 31.2</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, on consid\u00e8re un graphe non orient\u00e9 repr\u00e9sent\u00e9 sous forme de listes d\u2019adjacence. On suppose que les sommets sont num\u00e9rot\u00e9s de 0 \u00e0 n-1.</p> <p>Ainsi, le graphe suivant:</p> <p></p> <p>sera repr\u00e9sent\u00e9 par la liste d\u2019adjacence suivante:</p> <p><code>adj = [[1, 2], [0, 3], [0], [1], [5], [4]]</code></p> <p>On souhaite d\u00e9terminer les sommets accessibles depuis un sommet donn\u00e9 dans le graphe. Pour cela, on va proc\u00e9der \u00e0 un parcours en profondeur du graphe.</p> <p>Compl\u00e9ter la fonction suivante.</p> <pre><code>def parcours(adj, x, acc):\n    '''R\u00e9alise un parcours en profondeur r\u00e9cursif\n    du graphe donn\u00e9 par les listes d'adjacence adj \n    depuis le sommet x en accumulant les sommets\n    rencontr\u00e9s dans acc'''\n    if x ...: \n        acc.append(x)\n        for y in ...: \n            parcours(adj, ...) \n\ndef accessibles(adj, x):\n    '''Renvoie la liste des sommets accessibles dans le\n    graphe donn\u00e9 par les listes d'adjacence adj depuis\n    le sommet x.'''\n    acc = []\n    parcours(adj, ...) \n    return acc\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; accessibles([[1, 2], [0, 3], [0], [1], [5], [4]], 0)\n[0, 1, 3, 2]\n&gt;&gt;&gt; accessibles([[1, 2], [0, 3], [0], [1], [5], [4]], 4)\n[4, 5]\n</code></pre> <pre><code>adj = [[1, 2], [0, 3], [0], [1], [5], [4]]\n\ndef parcours(adj, x, acc):\n    '''R\u00e9alise un parcours en profondeur r\u00e9cursif\n    du graphe donn\u00e9 par les listes d'adjacence adj\n    depuis le sommet x en accumulant les sommets\n    rencontr\u00e9s dans acc'''\n    if x not in acc:\n        acc.append(x)\n        for y in adj[x]:\n            parcours(adj, y, acc)\n\ndef accessibles(adj, x):\n    '''Renvoie la liste des sommets accessibles dans le\n    graphe donn\u00e9 par les listes d'adjacence adj depuis\n    le sommet x.'''\n    acc = []\n    parcours(adj, x, acc)\n    return acc\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-32","title":"\u25b6 Sujet 32","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-321","title":"Exercice 32.1","text":"<p>Exercice 32.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>occurrences(caractere, chaine)</code> qui prend en param\u00e8tres <code>caractere</code>, une cha\u00eene de caract\u00e8re de longueur 1, et <code>chaine</code>, une cha\u00eene de caract\u00e8res. Cette fonction renvoie le nombre d\u2019occurrences de <code>caractere</code> dans <code>chaine</code>, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 <code>caractere</code> appara\u00eet dans <code>chaine</code>.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; occurrences('e', \"sciences\")\n2\n&gt;&gt;&gt; occurrences('i',\"mississippi\")\n4\n&gt;&gt;&gt; occurrences('a',\"mississippi\")\n0\n</code></pre></p> <pre><code>def occurrences(caractere, chaine):\n    somme = 0\n    for lettre in chaine:\n        if lettre == caractere:\n            somme += 1\n    return somme\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-322","title":"Exercice 32.2","text":"<p>Exercice 32.2</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets.</p> <p>Le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste <code>valeurs = [100, 50, 20, 10, 5, 2, 1]</code>. On suppose que les pi\u00e8ces et billets sont disponibles sans limitation.</p> <p>On cherche \u00e0 donner la liste des valeurs \u00e0 rendre pour une somme donn\u00e9e en argument. L\u2019algorithme utilis\u00e9 est de type glouton.</p> <p>Compl\u00e9ter le code Python ci-dessous de la fonction <code>rendu_glouton</code> qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.</p> <pre><code>valeurs = [100, 50, 20, 10, 5, 2, 1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\n        return ...\n    v = valeurs[rang]\n    if v &lt;= ... :\n        return ... + rendu_glouton(a_rendre - v, rang)\n    else :\n        return rendu_glouton(a_rendre, ...)\n</code></pre> <p>On devra obtenir :</p> <pre><code>&gt;&gt;&gt;rendu_glouton(67, 0)\n[50, 10, 5, 2]\n&gt;&gt;&gt;rendu_glouton(291, 0)\n[100, 100, 50, 20, 20, 1]\n&gt;&gt;&gt; rendu_glouton(291,1) # si on ne dispose pas de billets de 100\n[50, 50, 50, 50, 50, 20, 20, 1]\n</code></pre> <pre><code>valeurs = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\n        return []\n    v = valeurs[rang]\n    if v &lt;= a_rendre :\n        return [v] + rendu_glouton(a_rendre - v, rang)\n    else :\n        return rendu_glouton(a_rendre, rang + 1)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-33","title":"\u25b6 Sujet 33","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-331","title":"Exercice 33.1","text":"<p>Exercice 33.1</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, on consid\u00e8re des arbres binaires de recherche qui sont :</p> <ul> <li>soit l\u2019arbre vide identifi\u00e9 par <code>None</code> ;</li> <li>soit un n\u0153ud, contenant une cl\u00e9 et deux sous-arbres gauche et droit et repr\u00e9sent\u00e9 par un triplet <code>(g, v, d)</code> o\u00f9 <code>g</code> et <code>d</code> sont les sous-arbres gauche et droit et <code>v</code> la cl\u00e9.</li> </ul> <p></p> <p>Ainsi, l\u2019arbre binaire de recherche <code>abr1</code> ci- contre est cr\u00e9\u00e9 par le code python ci- dessous</p> <pre><code>n0 = (None, 0, None)\nn3 = (None, 3, None)\nn2 = (None, 2, n3)\nabr1 = (n0, 1, n2)\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>insertion_abr(a, cle)</code> qui prend en param\u00e8tres une cl\u00e9 <code>cle</code> et un arbre binaire de recherche <code>a</code>, et qui renvoie un arbre binaire de recherche dans lequel <code>cle</code> a \u00e9t\u00e9 ins\u00e9r\u00e9e. Dans le cas o\u00f9 <code>cle</code> est d\u00e9j\u00e0 pr\u00e9sente dans <code>a</code>, la fonction renvoie un arbre identique \u00e0 <code>a</code>.</p> <p>R\u00e9sultats \u00e0 obtenir :</p> <pre><code>&gt;&gt;&gt; insertion_abr(abr1, 4)\n((None,0,None),1,(None,2,(None,3,(None,4,None))))\n&gt;&gt;&gt; insertion_abr(abr1, -5)\n(((None,-5,None),0,None),1,(None,2,(None,3,None)))\n&gt;&gt;&gt; insertion_abr(abr1, 2)\n((None,0,None),1,(None,2,(None,3,None)))\n</code></pre> <pre><code>def insertion_abr(a, cle): \n    if a is None:\n        return (None, cle, None)\n    elif cle &gt; a[1]:\n        return (a[0], a[1], insertion_abr(a[2], cle))\n    elif cle &lt; a[1]:\n        return (insertion_abr(a[0], cle), a[1], a[2])\n    return a\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-332","title":"Exercice 33.2","text":"<p>Exercice 33.2</p> \u00c9nonc\u00e9Correction <p>On dispose d\u2019un ensemble d\u2019objets dont on conna\u00eet, pour chacun, la masse. On souhaite ranger l\u2019ensemble de ces objets dans des boites identiques de telle mani\u00e8re que la somme des masses des objets contenus dans une bo\u00eete ne d\u00e9passe pas la capacit\u00e9 <code>c</code> de la bo\u00eete. On souhaite utiliser le moins de bo\u00eetes possibles pour ranger cet ensemble d\u2019objets.</p> <p>Pour r\u00e9soudre ce probl\u00e8me, on utilisera un algorithme glouton consistant \u00e0 placer chacun des objets dans la premi\u00e8re bo\u00eete o\u00f9 cela est possible.</p> <p>Par exemple, pour ranger dans des bo\u00eetes de capacit\u00e9 <code>c = 5</code> un ensemble de trois objets dont les masses sont repr\u00e9sent\u00e9es en Python par la liste <code>[1, 5, 2]</code>, on proc\u00e8de de la fa\u00e7on suivante :</p> <ul> <li>Le premier objet, de masse 1, va dans une premi\u00e8re boite.</li> <li>Le deuxi\u00e8me objet, de masse 5, ne peut pas aller dans la m\u00eame boite que le premier objet car cela d\u00e9passerait la capacit\u00e9 de la boite. On place donc cet objet dans une deuxi\u00e8me bo\u00eete.</li> <li>Le troisi\u00e8me objet, de masse 2, va dans la premi\u00e8re bo\u00eete.</li> </ul> <p>On a donc utilis\u00e9 deux bo\u00eetes de capacit\u00e9 <code>c = 5</code> pour ranger les 3 objets.</p> <p>Compl\u00e9ter la fonction Python <code>empaqueter(liste_masses, c)</code> suivante pour qu\u2019elle renvoie le nombre de bo\u00eetes de capacit\u00e9 <code>c</code> n\u00e9cessaires pour empaqueter un ensemble d\u2019objets dont les masses sont contenues dans la liste <code>liste_masses</code>.</p> <pre><code>def empaqueter(liste_masses, c):\n    \"\"\"Renvoie le nombre minimal de bo\u00eetes n\u00e9cessaires pour\n    empaqueter les objets de la liste liste_masses, sachant\n    que chaque bo\u00eete peut contenir au maximum c kilogrammes\"\"\"\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [ 0 for _ in range(n) ]\n    for masse in ...: \n        i = 0\n        while i &lt; nb_boites and boites[i] + ... &gt; c: \n            i = i + 1\n        if i == nb_boites:\n            ...\n        boites[i] = ... \n    return ... \n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; empaqueter([1, 2, 3, 4, 5], 10)\n2\n&gt;&gt;&gt; empaqueter([1, 2, 3, 4, 5], 5)\n4\n&gt;&gt;&gt; empaqueter([7, 6, 3, 4, 8, 5, 9, 2], 11)\n5\n</code></pre> <pre><code>def empaqueter(liste_masses, c):\n    \"\"\"Renvoie le nombre minimal de bo\u00eetes n\u00e9cessaires pour\n    empaqueter les objets de la liste liste_masses, sachant\n    que chaque bo\u00eete peut contenir au maximum c kilogrammes\"\"\"\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [ 0 for _ in range(n) ]\n    for masse in liste_masses: \n        i = 0\n        while i &lt; nb_boites and boites[i] + masse &gt; c: \n            i = i + 1\n        if i == nb_boites:\n            nb_boites = nb_boites + 1\n        boites[i] = boites[i] + masse \n    return nb_boites\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-34","title":"\u25b6 Sujet 34","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-341","title":"Exercice 34.1","text":"<p>Exercice 34.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>tri_selection</code> qui prend en param\u00e8tre un tableau <code>tab</code> de nombres entiers (type <code>list</code>) et qui le modifie afin qu\u2019il soit tri\u00e9 par ordre croissant.</p> <p>On utilisera l\u2019algorithme suivant :</p> <ul> <li>on recherche le plus petit \u00e9l\u00e9ment du tableau, en le parcourant du rang 0 au dernier rang, et on l\u2019\u00e9change avec l\u2019\u00e9l\u00e9ment d\u2019indice 0 ;</li> <li>on recherche ensuite le plus petit \u00e9l\u00e9ment du tableau restreint du rang 1 au dernier rang, et on l\u2019\u00e9change avec l\u2019\u00e9l\u00e9ment d\u2019indice 1 ;</li> <li>on continue de cette fa\u00e7on jusqu\u2019\u00e0 ce que le tableau soit enti\u00e8rement tri\u00e9.</li> </ul> <p>Exemple : <pre><code>&gt;&gt;&gt; tab = [1, 52, 6, -9, 12]\n&gt;&gt;&gt; tri_selection(tab)\n&gt;&gt;&gt; tab\n[-9, 1, 6, 12, 52]\n</code></pre></p> <pre><code>def tri_selection(tab):\n    for i in range(len(tab)-1):\n        indice_min = i\n        for j in range(i+1, len(tab)):\n            if tab[j] &lt; tab[indice_min]:\n                indice_min = j\n        tab[i], tab[indice_min] = tab[indice_min], tab[i]\n    return tab\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-342","title":"Exercice 34.2","text":"<p>Exercice 34.2</p> \u00c9nonc\u00e9Correction <p>Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99.</p> <p>Une \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante :</p> <ul> <li>le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ;</li> <li>si la proposition de l\u2019utilisatrice est plus petite que le nombre cherch\u00e9, l\u2019utilisatrice en est avertie. Elle peut alors en tester un autre ;</li> <li>si la proposition de l\u2019utilisatrice est plus grande que le nombre cherch\u00e9, l\u2019utilisatrice en est avertie. Elle peut alors en tester un autre ;</li> <li>si l\u2019utilisatrice trouve le bon nombre en 10 essais ou moins, elle gagne ;</li> <li>si l\u2019utilisatrice a fait plus de 10 essais sans trouver le bon nombre, elle perd.</li> </ul> <p>La fonction <code>randint</code> est utilis\u00e9e. Si a et b sont des entiers tels que <code>a &lt;= b</code>, <code>randint(a,b)</code> renvoie un nombre entier compris entre <code>a</code> et <code>b</code>.</p> <p>Compl\u00e9ter le code ci-dessous et le tester :</p> <pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</code></pre> <pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,99)\n    nb_test = int(input('Proposez un nombre entre 1 et 99 : '))\n    compteur = 1\n\n    while nb_mystere != nb_test and compteur &lt; 10 :\n        compteur = compteur + 1\n        if nb_mystere &gt; nb_test:\n            nb_test = int(input('Trop petit ! Testez encore : '))\n        else:\n            nb_test = int(input('Trop grand ! Testez encore : '))\n\n    if nb_mystere == nb_test:\n        print ('Bravo ! Le nombre \u00e9tait ', nb_mystere)\n        print('Nombre d essais: ', compteur)\n    else:\n        print ('Perdu ! Le nombre \u00e9tait ', nb_mystere)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-35","title":"\u25b6 Sujet 35","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-351","title":"Exercice 35.1","text":"<p>Exercice 35.1</p> \u00c9nonc\u00e9Correction <p>Sur le r\u00e9seau social TipTop, on s\u2019int\u00e9resse au nombre de \u00ab like \u00bb des abonn\u00e9s. Les donn\u00e9es sont stock\u00e9es dans des dictionnaires o\u00f9 les cl\u00e9s sont les pseudos et les valeurs correspondantes sont les nombres de \u00ab like \u00bb comme ci-dessous :</p> <p><code>{'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50}</code></p> <p>\u00c9crire une fonction <code>max_dico</code> qui :</p> <ul> <li>Prend en param\u00e8tre un dictionnaire <code>dico</code> non vide dont les cl\u00e9s sont des cha\u00eenes de caract\u00e8res et les valeurs associ\u00e9es sont des entiers ;</li> <li>Renvoie un tuple dont :<ul> <li>La premi\u00e8re valeur est une cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale ;</li> <li>la seconde valeur est cette valeur maximale.</li> </ul> </li> </ul> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; max_dico({'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50})\n('Ada', 201)\n&gt;&gt;&gt; max_dico({'Alan': 222, 'Ada': 201, 'Eve': 220, 'Tim': 50})\n('Alan', 222)\n</code></pre> <pre><code>def max_dico(dico):\n    cle_max = ''\n    val_max = 0\n    for cle in dico:\n        if dico[cle] &gt; val_max:\n            val_max = dico[cle]\n            cle_max = cle\n    return (cle_max, val_max)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-352","title":"Exercice 35.2","text":"<p>Exercice 35.2</p> \u00c9nonc\u00e9Correction <p>Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme par exemple : (2 + 3) \u00d7 5. </p> <p>Il existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en saisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On mod\u00e9lise cette saisie par le tableau <code>[2, 3, '+', 5, '*']</code>. </p> <p>Autre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : </p> <p><code>[3, 2, '*', 5, '+']</code>. </p> <p>D\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation postfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche \u00e0 droite de la fa\u00e7on suivante :</p> <ul> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ;</li> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au sommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet de la pile.</li> <li>\u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de l\u2019expression arithm\u00e9tique.</li> </ul> <p>Dans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +.</p> <p>Pour cet exercice, on dispose d\u2019une classe <code>Pile</code> qui impl\u00e9mente les m\u00e9thodes de base sur la structure de pile.</p> <p>Compl\u00e9ter le script de la fonction <code>eval_expression</code> qui re\u00e7oit en param\u00e8tre une liste python repr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur associ\u00e9e.</p> <pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide. Produit une erreur sinon.\n        \"\"\"\n        assert not self.est_vide()\n        return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for ... in tab:\n        if element != '+' ... element != '*':\n            p.empiler(...)\n        else:\n            if element == ...:\n                resultat = ... + ...\n            else:\n                resultat = ...\n            p.empiler(...)\n    return ...\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; eval_expression([2, 3, '+', 5, '*'])\n25\n&gt;&gt;&gt; eval_expression([1, 2, '+', 3, '*'])\n9\n&gt;&gt;&gt; eval_expression([1, 2, 3, '+', '*'])\n5\n</code></pre> <pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for element in tab:\n        if element != '+' and element != '*':\n            p.empiler(element)\n        else:\n            if element == '+':\n                resultat = p.depiler() + p.depiler()\n            else:\n                resultat = p.depiler() * p.depiler()\n            p.empiler(resultat)\n    return p.depiler()\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-36","title":"\u25b6 Sujet 36","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-361","title":"Exercice 36.1","text":"<p>Exercice 36.1</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, on consid\u00e8re des phrases compos\u00e9es de mots.</p> <ul> <li> <p>On appelle \u00ab mot \u00bb une cha\u00eene de caract\u00e8res compos\u00e9e avec des caract\u00e8res choisis parmi les 26 lettres minuscules ou majuscules de l'alphabet,</p> </li> <li> <p>On appelle phrase une cha\u00eene de caract\u00e8res :</p> <ul> <li>compos\u00e9e avec un ou plusieurs mots s\u00e9par\u00e9s entre eux par un seul caract\u00e8re espace <code>' '</code>,</li> <li>se finissant :<ul> <li>soit par un point <code>'.'</code> qui est alors coll\u00e9 au dernier mot,</li> <li>soit par un point d'exclamation <code>'!'</code> ou d'interrogation <code>'?'</code> qui est alors s\u00e9par\u00e9 du dernier mot par un seul caract\u00e8re espace <code>' '</code>.</li> </ul> </li> </ul> </li> </ul> <p>Voici deux exemples de phrases :</p> <ul> <li>'Cet exercice est simple.'</li> <li>'Le point d exclamation est separe !'</li> </ul> <p>Apr\u00e8s avoir remarqu\u00e9 le lien entre le nombre de mots et le nombres de caract\u00e8res espace dans une phrase, programmer une fonction <code>nombre_de_mots</code> qui prend en param\u00e8tre une phrase et renvoie le nombre de mots pr\u00e9sents dans cette phrase.</p> <pre><code>&gt;&gt;&gt; nombre_de_mots('Cet exercice est simple.')\n4\n&gt;&gt;&gt; nombre_de_mots('Le point d exclamation est s\u00e9par\u00e9 !')\n6\n&gt;&gt;&gt; nombre_de_mots('Combien de mots y a t il dans cette phrase ?')\n10\n&gt;&gt;&gt; nombre_de_mots('Fin.')\n1\n</code></pre> <pre><code>def nombre_de_mots(phrase):\n    nb_mots = 0\n    for caractere in phrase:\n        if caractere == ' ' or caractere == '.':\n            nb_mots += 1\n    return nb_mots\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-362","title":"Exercice 36.2","text":"<p>Exercice 36.2</p> \u00c9nonc\u00e9Correction <p>Un arbre binaire de recherche est soit vide, repr\u00e9sent\u00e9 en Python par la valeur None, soit un n\u0153ud, contenant une \u00e9tiquette et deux sous-arbres gauche et droit et repr\u00e9sent\u00e9 par une instance de la classe Noeud donn\u00e9e ci-dessous.</p> <p>On consid\u00e8re ici que les \u00e9tiquettes des n\u0153uds sont des entiers et que les arbres binaires de recherche consid\u00e9r\u00e9s ne contiennent pas de doublons.</p> <pre><code>class Noeud:\n    def __init__(self, etiquette):\n        '''M\u00e9thode constructeur pour la classe Noeud.\n        Cr\u00e9e une feuille d'\u00e9tiquette donn\u00e9e.'''\n        self.etiquette = etiquette\n        self.gauche = None\n        self.droit = None\n\n    def inserer(self, cle):\n        '''Ins\u00e8re la cl\u00e9 dans l'arbre binaire de recherche\n        en pr\u00e9servant sa structure.'''\n        if cle &lt; self.etiquette:\n            if self.gauche != None:\n                ...\n            else:\n                self.gauche = ... \n        else:\n            ...\n                ...\n            else:\n                ... = Noeud(cle) \n</code></pre> <p>Compl\u00e9ter la m\u00e9thode r\u00e9cursive <code>inserer</code> afin qu\u2019elle permette d\u2019ins\u00e9rer une cl\u00e9 dans l\u2019arbre binaire de recherche non vide sur lequel on l\u2019appelle.</p> <p>Voici un exemple d'utilisation :</p> <pre><code>&gt;&gt;&gt; arbre = Noeud(7)\n&gt;&gt;&gt; for cle in (3, 9, 1, 6):\n        arbre.inserer(cle)\n&gt;&gt;&gt; arbre.gauche.etiquette\n3\n&gt;&gt;&gt; arbre.droit.etiquette\n9\n&gt;&gt;&gt; arbre.gauche.gauche.etiquette\n1\n&gt;&gt;&gt; arbre.gauche.droit.etiquette\n6\n</code></pre> <pre><code>class Noeud:\n    def __init__(self, etiquette):\n        '''M\u00e9thode constructeur pour la classe Noeud.\n        Cr\u00e9e une feuille d'\u00e9tiquette donn\u00e9e.'''\n        self.etiquette = etiquette\n        self.gauche = None\n        self.droit = None\n\n    def inserer(self, cle):\n        '''Ins\u00e8re la cl\u00e9 dans l'arbre binaire de recherche\n        en pr\u00e9servant sa structure.'''\n        if cle &lt; self.etiquette:\n            if self.gauche != None:\n                self.gauche.inserer(cle)\n            else:\n                self.gauche = Noeud(cle) \n        else:\n            if self.droit != None:\n                self.droit.inserer(cle)\n            else:\n                self.droit = Noeud(cle) \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-37","title":"\u25b6 Sujet 37","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-371","title":"Exercice 37.1","text":"<p>Exercice 37.1</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re dans cet exercice une repr\u00e9sentation binaire d\u2019un entier non sign\u00e9 en tant que tableau de bool\u00e9ens. Si</p> <pre><code>tab = [True, False, True, False, False, True, True]\n</code></pre> <p>est un tel tableau, alors l\u2019entier qu\u2019il repr\u00e9sente est \\(2^6 +2^4 + 2^1 + 2^0 = 83\\). Cette repr\u00e9sentation consistant \u00e0 placer en premier le bool\u00e9en indiquant la puissance la plus \u00e9lev\u00e9e de 2 est dite big-endian ou grand-boutiste.</p> <p>\u00c9crire une fonction <code>gb_vers_entier</code> qui prend en param\u00e8tre un tel tableau et renvoie l\u2019entier qu\u2019il repr\u00e9sente.</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; gb_vers_entier([])\n0\n&gt;&gt;&gt; gb_vers_entier([True])\n1\n&gt;&gt;&gt; gb_vers_entier([True, False, True, False, False, True, True])\n83\n&gt;&gt;&gt; gb_vers_entier([True, False, False, False, False, False, True, False])\n130\n</code></pre> <pre><code>def gb_vers_entier(tab):\n    somme = 0\n    for i in range(len(tab)):\n        if tab[i]:\n            somme += 2**(len(tab)-1-i)\n    return somme \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-372","title":"Exercice 37.2","text":"<p>Exercice 37.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>tri_insertion</code> suivante prend en argument un tableau <code>tab</code> et trie ce tableau en utilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la sp\u00e9cification demand\u00e9e.</p> <p>On rappelle le principe du tri par insertion : on consid\u00e8re les \u00e9l\u00e9ments \u00e0 trier un par un, le premier \u00e9l\u00e9ment constituant, \u00e0 lui tout seul, un tableau tri\u00e9 de longueur 1. On range ensuite le second \u00e9l\u00e9ment pour constituer un tableau tri\u00e9 de longueur 2, puis on range le troisi\u00e8me \u00e9l\u00e9ment pour avoir un tableau tri\u00e9 de longueur 3 et ainsi de suite...</p> <p>A chaque \u00e9tape, le premier \u00e9l\u00e9ment du sous-tableau non tri\u00e9 est plac\u00e9 dans le sous-tableau des \u00e9l\u00e9ments d\u00e9j\u00e0 tri\u00e9s de sorte que ce sous-tableau demeure tri\u00e9.</p> <p>Le principe du tri par insertion est donc d'ins\u00e9rer \u00e0 la n-i\u00e8me it\u00e9ration, le n-i\u00e8me \u00e9l\u00e9ment \u00e0 la bonne place.</p> <pre><code>def tri_insertion(tab):\n    '''Trie le tableau tab par ordre croissant\n    en appliquant l'algorithme de tri par insertion'''\n    n = len(tab)\n    for i in range(1, n):\n        valeur_insertion = ... \n        # la variable j sert \u00e0 d\u00e9terminer \n        # o\u00f9 placer la valeur \u00e0 ranger\n        j = ... \n        # tant qu'on n'a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0\n        # ins\u00e9rer on d\u00e9cale les valeurs du tableau vers la droite\n        while j &gt; ... and valeur_insertion &lt; tab[...]: \n            tab[j] = tab[j-1]\n            j = ... \n        tab[j] = ... \n</code></pre> <p>Exemples : <pre><code>&gt;&gt;&gt; tab = [98, 12, 104, 23, 131, 9]\n&gt;&gt;&gt; tri_insertion(tab)\n&gt;&gt;&gt; tab\n[9, 12, 23, 98, 104, 131]\n</code></pre></p> <pre><code>def tri_insertion(tab):\n    '''Trie le tableau tab par ordre croissant\n    en appliquant l'algorithme de tri par insertion'''\n    n = len(tab)\n    for i in range(1, n):\n        valeur_insertion = tab[i]\n        # la variable j sert \u00e0 d\u00e9terminer \n        # o\u00f9 placer la valeur \u00e0 ranger\n        j = i \n        # tant qu'on n'a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0\n        # ins\u00e9rer on d\u00e9cale les valeurs du tableau vers la droite\n        while j &gt; 0 and valeur_insertion &lt; tab[j-1]: \n            tab[j] = tab[j-1]\n            j = j - 1 \n        tab[j] = valeur_insertion \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-38","title":"\u25b6 Sujet 38","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-381","title":"Exercice 38.1","text":"<p>Exercice 38.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>moyenne</code> qui prend en param\u00e8tre un tableau non vide de nombres flottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; moyenne([1.0])\n1.0\n&gt;&gt;&gt; moyenne([1.0, 2.0, 4.0])\n2.3333333333333335\n</code></pre></p> <pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-382","title":"Exercice 38.2","text":"<p>Exercice 38.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la fonction <code>binaire</code>. Cette fonction prend en param\u00e8tre un entier positif <code>a</code> en \u00e9criture d\u00e9cimale et renvoie son \u00e9criture binaire sous la forme d\u2019une chaine de caract\u00e8res.</p> <p>L\u2019algorithme utilise la m\u00e9thode des divisions euclidiennes successives comme l\u2019illustre l\u2019exemple ci-apr\u00e8s.</p> <p></p> <p>Compl\u00e9ter le code de la fonction <code>binaire</code>.</p> <pre><code>def binaire(a):\n    '''convertit un nombre entier a en sa representation\n    binaire sous forme de chaine de caract\u00e8res.'''\n    if a == 0:\n        return ...\n    bin_a = ...\n    while ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</code></pre> <p>Exemples : <pre><code>&gt;&gt;&gt; binaire(83)\n'1010011'\n&gt;&gt;&gt; binaire(127)\n'1111111'\n&gt;&gt;&gt; binaire(0)\n'0'\n</code></pre></p> <pre><code>def binaire(a):\n    '''convertit un nombre entier a en sa representation \n    binaire sous forme de chaine de caract\u00e8res.'''\n    if a == 0:\n        return '0' \n    bin_a = '' \n    while a != 0 : \n        bin_a = str(a % 2) + bin_a \n        a = a // 2\n    return bin_a\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-39","title":"\u25b6 Sujet 39","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-391","title":"Exercice 39.1","text":"<p>Exercice 39.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>moyenne</code>   prenant en param\u00e8tre un tableau d'entiers <code>tab</code> (de type <code>list</code>) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide. Proposer une fa\u00e7on de traiter le cas o\u00f9 le tableau pass\u00e9 en param\u00e8tre est vide.</p> <p>Dans cet exercice, on s\u2019interdira d\u2019utiliser la fonction Python <code>sum</code>.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; moyenne([5,3,8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1,2,3,4,5,6,7,8,9,10])\n5.5\n&gt;&gt;&gt; moyenne([])\n# Comportement diff\u00e9rent suivant le traitement propos\u00e9.\n</code></pre></p> <pre><code>def moyenne(tab):\n    if tab == []:\n        print('Le tableau donn\u00e9 est vide')\n        return None\n    else:\n        somme = 0\n        for elt in tab:\n            somme += elt\n        return somme / len(tab)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-392","title":"Exercice 39.2","text":"<p>Exercice 39.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re un tableau d'entiers <code>tab</code> (de type <code>list</code>) dont les \u00e9l\u00e9ments sont des <code>0</code> ou des <code>1</code>). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri, le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des <code>0</code>, la seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des <code>1</code>. Au d\u00e9part, les zones ne contenant que des <code>0</code> et des <code>1</code> sont vides.</p> <pre><code>[0, ..., 0, &lt;zone non tri\u00e9e&gt;, 1, ..., 1]\n</code></pre> <p>Tant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier \u00e9l\u00e9ment :</p> <ul> <li>si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant que des 0 ;</li> <li>si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on consid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1.</li> </ul> <p>Dans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1.</p> <p>Compl\u00e9ter la fonction <code>tri</code> suivante :</p> <pre><code>def tri(tab):\n    '''tab est un tableau d'entiers contenant des 0 et des 1.\n    La fonction trie ce tableau en pla\u00e7ant tous les 0 \u00e0 gauche'''\n    i = ... # premier indice de la zone non tri\u00e9e \n    j = ... # dernier indice de la zone non tri\u00e9e \n    while i &lt; j:\n        if tab[i] == 0:\n            i = ... \n        else:\n            valeur = ... \n            tab[j] = ... \n            ...\n            j = ... \n</code></pre> <p>Exemple : <pre><code>&gt;&gt;&gt; tab = [0,1,0,1,0,1,0,1,0]\n&gt;&gt;&gt; tri(tab)\n&gt;&gt;&gt; tab\n[0, 0, 0, 0, 0, 1, 1, 1, 1]    \n</code></pre></p> <pre><code>def tri(tab):\n    '''tab est un tableau d'entiers contenant des 0 et des 1.\n    La fonction trie ce tableau en pla\u00e7ant tous les 0 \u00e0 gauche'''\n    i = 0 # premier indice de la zone non tri\u00e9e \n    j = len(tab) - 1 # dernier indice de la zone non tri\u00e9e \n    while i &lt; j:\n        if tab[i] == 0:\n            i = i + 1 \n        else:\n            valeur = tab[j] \n            tab[j] = tab[i] \n            tab[i] = valeur\n            j = j -1  \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-40","title":"\u25b6 Sujet 40","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-401","title":"Exercice 40.1","text":"<p>Exercice 40.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche_indices_classement</code> qui prend en param\u00e8tres un entier <code>elt</code> et un tableau d\u2019entiers <code>tab</code>, et qui renvoie trois listes :</p> <ul> <li>la premi\u00e8re liste contient les indices des valeurs du tableau <code>tab</code> strictement inf\u00e9rieures \u00e0 <code>elt</code> ;</li> <li>la deuxi\u00e8me liste contient les indices des valeurs du tableau <code>tab</code> \u00e9gales \u00e0 <code>elt</code> ;</li> <li>la troisi\u00e8me liste contient les indices des valeurs du tableau <code>tab</code> strictement sup\u00e9rieures \u00e0 <code>elt</code>.</li> </ul> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; recherche_indices_classement(3, [1, 3, 4, 2, 4, 6, 3, 0])\n([0, 3, 7], [1, 6], [2, 4, 5])\n&gt;&gt;&gt; recherche_indices_classement(3, [1, 4, 2, 4, 6, 0])\n([0, 2, 5], [], [1, 3, 4])\n&gt;&gt;&gt;recherche_indices_classement(3, [1, 1, 1, 1])\n([0, 1, 2, 3], [], [])\n&gt;&gt;&gt; recherche_indices_classement(3, [])\n([], [], [])\n</code></pre> <pre><code>def recherche_indices_classement(elt, tab):\n    ind_inf = []\n    ind_egal = []\n    ind_sup = [] \n    for i in range(len(tab)):\n        if tab[i] &lt; elt:\n            ind_inf.append(i)\n        elif tab[i] &gt; elt:\n            ind_sup.append(i)\n        else:\n            ind_egal.append(i)\n    return (ind_inf, ind_egal, ind_sup)\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-402","title":"Exercice 40.2","text":"<p>Exercice 40.2</p> \u00c9nonc\u00e9Correction <p>Une professeure de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un dictionnaire :</p> <ul> <li>les clefs sont les noms des \u00e9l\u00e8ves ;</li> <li>les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves sous forme de cha\u00eene de caract\u00e8res et les valeurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients dans une liste.</li> </ul> <p>Avec :</p> <pre><code>resultats = {'Dupont': {\n                        'DS1': [15.5, 4],\n                        'DM1': [14.5, 1],\n                        'DS2': [13, 4],\n                        'PROJET1': [16, 3],\n                        'DS3': [14, 4]\n                    },\n            'Durand': {\n                        'DS1': [6 , 4],\n                        'DS2': [8, 4],\n                        'PROJET1': [9, 3],\n                        'IE1': [7, 2],\n                        'DS3': [12, 4]\n                    }\n            }\n</code></pre> <p>L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4.</p> <p>Le professeur cr\u00e9e une fonction <code>moyenne</code> qui prend en param\u00e8tre le nom d\u2019un de ses \u00e9l\u00e8ves et renvoie sa moyenne arrondie au dixi\u00e8me. Si l\u2019\u00e9l\u00e8ve n\u2019a pas de notes, on consid\u00e8re que sa moyenne est nulle. Si le nom donn\u00e9 n\u2019est pas dans les r\u00e9sultats, la fonction renvoie <code>None</code>.</p> <p>Compl\u00e9ter le code de la professeure ci-dessous : <pre><code>def moyenne(nom, resultats):\n    '''Renvoie la moyenne de l'\u00e9l\u00e8ve nom, selon le dictionnaire \n    resultats. Si nom n'est pas dans le dictionnaire, \n    la fonction renvoie None.'''\n    if nom in ...: \n        notes = resultats[nom]\n        if ...: # pas de notes \n            return 0\n        total_points = ... \n        total_coefficients = ... \n        for ...  in notes.values(): \n            note, coefficient = valeurs\n            total_points = total_points + ... * coefficient \n            ... = ... + coefficient \n        return round( ... / total_coefficients, 1 ) \n    else:\n        return None\n</code></pre></p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; moyenne(\"Dupont\", resultats)\n14.5\n&gt;&gt;&gt; moyenne(\"Durand\", resultats)\n8.5\n</code></pre> <pre><code>def moyenne(nom, resultats):\n    '''Renvoie la moyenne de l'\u00e9l\u00e8ve nom, selon le dictionnaire \n    resultats. Si nom n'est pas dans le dictionnaire, \n    la fonction renvoie None.'''\n    if nom in resultats: \n        notes = resultats[nom]\n        if notes == {}: # pas de notes \n            return 0\n        total_points = 0 \n        total_coefficients = 0 \n        for valeurs in notes.values(): \n            note, coefficient = valeurs\n            total_points = total_points + note * coefficient \n            total_coefficients = total_coefficients + coefficient \n        return round( total_points / total_coefficients, 1 ) \n    else:\n        return None\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-41","title":"\u25b6 Sujet 41","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-411","title":"Exercice 41.1","text":"<p>Exercice 41.1</p> \u00c9nonc\u00e9Correction <p>L'op\u00e9rateur \u00ab ou exclusif \u00bb entre deux bits renvoie 0 si les deux bits sont \u00e9gaux et 1 s'ils sont diff\u00e9rents. Il est symbolis\u00e9 par le caract\u00e8re \u2295. Ainsi :</p> <ul> <li>0 \u2295 0 = 0</li> <li>0 \u2295 1 = 1</li> <li>1 \u2295 0 = 1</li> <li>1 \u2295 1 = 0  </li> </ul> <p>\u00c9crire une fonction <code>ou_exclusif</code> qui prend en param\u00e8tres deux tableaux de 0 ou de 1 de m\u00eame longueur et qui renvoie un tableau o\u00f9 l\u2019\u00e9l\u00e9ment situ\u00e9 \u00e0 position <code>i</code> est le r\u00e9sultat, par l\u2019op\u00e9rateur \u00ab ou exclusif \u00bb, des \u00e9l\u00e9ments \u00e0 la position <code>i</code> des tableaux pass\u00e9s en param\u00e8tres.</p> <pre><code>&gt;&gt;&gt; ou_exclusif([1, 0, 1, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0])\n[1, 1, 0, 1, 1, 0, 0, 1]\n&gt;&gt;&gt; ou_exclusif([1, 1, 0, 1], [0, 0, 1, 1])\n[1, 1, 1, 0]\n</code></pre> <pre><code>def ou_exclusif(tab1, tab2):\n    resultat = []\n    taille = len(tab1)\n    for i in range(taille):\n        resultat.append(tab1[i] ^ tab2[i])\n    return resultat\n</code></pre> <p>Si on ne connait pas la fonction native ^ qui fait le \u00abou exclusif\u00bb de deux entiers en Python, on peut la recoder :</p> <pre><code>def ou_exc(a, b):\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 1:\n        return 1\n    if a == 1 and b == 0:\n        return 1\n    if a == 1 and b == 1:\n        return 0\n</code></pre> <p>Le code devient alors :</p> <pre><code>def ou_exclusif(tab1, tab2):\n    resultat = []\n    taille = len(tab1)\n    for i in range(taille):\n        resultat.append(ou_exc(tab1[i],tab2[i]))\n    return resultat\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-412","title":"Exercice 41.2","text":"<p>Exercice 41.2</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, on appelle carr\u00e9 d\u2019ordre \\(n\\) un tableau de \\(n\\) lignes et \\(n\\) colonnes dont chaque case contient un entier naturel.</p> <p>Exemples : </p> <p>Un carr\u00e9 est dit semimagique lorsque les sommes des \u00e9l\u00e9ments situ\u00e9s sur chaque ligne, chaque colonne sont \u00e9gales.</p> <ul> <li> <p>Ainsi c2 et c3 sont semimagiques car la somme de chaque ligne et chaque colonne est \u00e9gale \u00e0 8 pour c2 et 12 pour c3.</p> </li> <li> <p>Le carre c3bis n'est pas semimagique car la somme de la premi\u00e8re ligne est \u00e9gale \u00e0 15 alors que celle de la deuxi\u00e8me ligne est \u00e9gale \u00e0 10.</p> </li> </ul> <p>La classe <code>Carre</code> ci-apr\u00e8s contient des m\u00e9thodes qui permettent de manipuler des carr\u00e9s.</p> <ul> <li> <p>La m\u00e9thode constructeur cr\u00e9e un carr\u00e9 sous forme d\u2019un tableau \u00e0 deux dimensions \u00e0 partir d\u2019une liste d\u2019entiers, et d\u2019un ordre.</p> </li> <li> <p>La m\u00e9thode <code>affiche</code> permet d\u2019afficher le carr\u00e9 cr\u00e9\u00e9.</p> </li> </ul> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; lst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\n&gt;&gt;&gt; c3 = Carre(lst_c3, 3)\n&gt;&gt;&gt; c3.affiche()\n[3, 4, 5]\n[4, 4, 4]\n[5, 4, 3]\n</code></pre> <p>Compl\u00e9ter la m\u00e9thode <code>est_semimagique</code> qui renvoie <code>True</code> si le carr\u00e9 est semimagique, <code>False</code> sinon. </p> <pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n        '''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n        '''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n        '''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\n        for i in range(...):\n            if ... != s:\n                return ...\n\n        #test de la somme de chaque colonne\n        for j in range(...):\n            if ... != s:\n                return ...\n\n        return ...\n</code></pre> <p>Tester la m\u00e9thode <code>est_semimagique</code> sur les carr\u00e9s c2, c3 et c3bis.</p> <pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n        '''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n        '''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n        '''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\n        for i in range(self.ordre):\n            if self.somme_ligne(i) != s:\n                return False\n\n        #test de la somme de chaque colonne\n        for j in range(self.ordre):\n            if self.somme_col(j) != s:\n                return False\n\n        return True\n</code></pre> <p>Tests avec :</p> <pre><code>lst_c2 = [1, 7, 7, 1]\nlst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\nlst_c3bis = [2, 9, 4, 7, 0, 3, 6, 1, 8]\n</code></pre> <pre><code>&gt;&gt;&gt; c2 = Carre(lst_c2, 2)\n&gt;&gt;&gt; c2.est_semimagique()\nTrue\n\n&gt;&gt;&gt; c3 = Carre(lst_c3, 3)\n&gt;&gt;&gt; c3.est_semimagique()\nTrue\n\n&gt;&gt;&gt; c3bis = Carre(lst_c3bis, 2)\n&gt;&gt;&gt; c3bis.est_semimagique()\nFalse\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-42","title":"\u25b6 Sujet 42","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-421","title":"Exercice 42.1","text":"<p>Exercice 42.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction Python appel\u00e9e <code>nb_repetitions</code> qui prend en param\u00e8tres un \u00e9l\u00e9ment <code>elt</code> et un tableau <code>tab</code> (type <code>list</code>) et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans le tableau.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; nb_repetitions(5, [2, 5, 3, 5, 6, 9, 5])\n3\n&gt;&gt;&gt; nb_repetitions('A', ['B', 'A', 'B', 'A', 'R'])\n2\n&gt;&gt;&gt; nb_repetitions(12, [1, 3, 7, 21, 36, 44])\n0\n</code></pre></p> <pre><code>def nb_repetitions(elt, tab):\n    nb = 0\n    for element in tab:\n        if element == elt:\n            nb += 1\n    return nb\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-422","title":"Exercice 42.2","text":"<p>Exercice 42.2</p> \u00c9nonc\u00e9Correction <p>Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide des divisions successives comme illustr\u00e9 ici :</p> <p></p> <p>Voici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de convertir un nombre entier positif en binaire :</p> <p>Compl\u00e9ter la fonction <code>binaire</code></p> <p><pre><code>def binaire(a):\n    '''convertit un nombre entier a en sa representation \n    binaire sous forme de chaine de caract\u00e8res.'''\n    if a == 0:\n        return '0'\n    bin_a = ... \n    while ...: \n        bin_a = ... + bin_a \n        a = ... \n    return bin_a\n</code></pre> .</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; binaire(0)\n'0'\n&gt;&gt;&gt; binaire(77)\n'1001101'\n</code></pre> <pre><code>def binaire(a):\n    '''convertit un nombre entier a en sa representation \n    binaire sous forme de chaine de caract\u00e8res.'''\n    if a == 0:\n        return '0' \n    bin_a = '' \n    while a != 0 : \n        bin_a = str(a % 2) + bin_a \n        a = a // 2\n    return bin_a\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-43","title":"\u25b6 Sujet 43","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-431","title":"Exercice 43.1","text":"<p>Exercice 43.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>couples_consecutifs</code> qui prend en param\u00e8tre un tableau de nombres entiers <code>tab</code> non vide (type <code>list</code>), et qui renvoie la liste Python (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans <code>tab</code>.</p> <p>Exemples : <pre><code>&gt;&gt;&gt; couples_consecutifs([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; couples_consecutifs([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; couples_consecutifs([1, 1, 2, 4])\n[(1, 2)]\n&gt;&gt;&gt; couples_consecutifs([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; couples_consecutifs([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n</code></pre></p> <pre><code>def couples_consecutifs(tab):\n    solution = []\n    for i in range(len(tab)-1):\n        if tab[i] + 1 == tab[i+1]:\n            solution.append((tab[i], tab[i+1]))\n    return solution\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-432","title":"Exercice 43.2","text":"<p>Exercice 43.2</p> \u00c9nonc\u00e9Correction <p>Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments <code>M[i][j]</code>, appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 <code>0</code> soit \u00e0 <code>1</code>.</p> <p>Une composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de <code>1</code> et de <code>0</code> qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement.</p> <p>Par exemple, les composantes de  sont </p> <p>On souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 <code>1</code> dans une image <code>M</code>, donner la valeur <code>val</code> \u00e0 tous les pixels de la composante \u00e0 laquelle appartient ce pixel.</p> <p>La fonction <code>colore_comp1</code> prend pour param\u00e8tre une image <code>M</code> (repr\u00e9sent\u00e9e par une liste de listes), deux entiers <code>i</code> et <code>j</code> et une valeur enti\u00e8re <code>val</code>. Elle met \u00e0 la valeur <code>val</code> tous les pixels de la composante du pixel <code>M[i][j]</code> s\u2019il vaut <code>1</code> et ne fait rien sinon.</p> <p>Par exemple, <code>colore_comp1(M, 2, 1, 3)</code> donne </p> <p>Compl\u00e9ter le code r\u00e9cursif de la fonction <code>colore_comp1</code> donn\u00e9 ci-dessous :</p> <pre><code>def colore_comp1(M, i, j, val):\n    if M[i][j] != 1:\n        return\n\n    M[i][j] = val\n\n    if i-1 &gt;= 0: # propage en haut\n        colore_comp1(M, i-1, j, val)\n    if ... &lt; len(M): # propage en bas\n        colore_comp1(M, ..., j, val) \n    if ...: # propage \u00e0 gauche \n        colore_comp1(M, ..., ..., val) \n    if ...: # propage \u00e0 droite \n        ...\n</code></pre> <p> dans le sujet original, les commentaires sur la direction de propagation sont erron\u00e9s </p> <p>Exemple : <pre><code>&gt;&gt;&gt; M = [[0, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 0], [0, 1, 1, 0]]\n&gt;&gt;&gt; colore_comp1(M, 2, 1, 3)\n&gt;&gt;&gt; M\n[[0, 0, 1, 0], [0, 3, 0, 1], [3, 3, 3, 0], [0, 3, 3, 0]]\n</code></pre></p> <pre><code>def colore_comp1(M, i, j, val):\n    if M[i][j] != 1:\n        return\n\n    M[i][j] = val\n\n    if i-1 &gt;= 0: # propage \u00e0 gauche\n        colore_comp1(M, i-1, j, val)\n    if i+1 &lt; len(M): # propage \u00e0 droite \n        colore_comp1(M, i+1, j, val) \n    if j-1 &gt;= 0: # propage en haut \n        colore_comp1(M, i, j-1, val) \n    if j+1 &lt; len(M[i]): # propage en bas \n        colore_comp1(M, i, j+1, val) \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-44","title":"\u25b6 Sujet 44","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-441","title":"Exercice 44.1","text":"<p>Exercice 44.1</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice on cherche \u00e0 calculer la moyenne pond\u00e9r\u00e9e d\u2019un \u00e9l\u00e8ve dans une mati\u00e8re donn\u00e9e. Chaque note est associ\u00e9e \u00e0 un coefficient qui la pond\u00e8re.</p> <p>Par exemple, si ses notes sont : 14 avec coefficient 3, 12 avec coefficient 1 et 16 avec coeffi- cient 2, sa moyenne pond\u00e9r\u00e9e sera donn\u00e9e par</p> \\[\\dfrac{14 \\times 3 + 12 \\times 1 + 16 \\times 2}{3+1+2}=14,333... \\] <p>\u00c9crire une fonction <code>moyenne</code> :</p> <ul> <li>qui prend en param\u00e8tre une liste notes non vide de tuples \u00e0 deux \u00e9l\u00e9ments entiers de la forme <code>(note, coefficient)</code> (<code>int</code> ou <code>float</code>) positifs ou nuls ;</li> <li>et qui renvoie la moyenne pond\u00e9r\u00e9e des notes de la liste sous forme de flottant si la somme des coefficients est non nulle, <code>None</code> sinon.</li> </ul> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; moyenne([(8, 2), (12, 0), (13.5, 1), (5, 0.5)])\n9.142857142857142\n&gt;&gt;&gt; moyenne([(3, 0), (5, 0)])\nNone\n</code></pre> <pre><code>def moyenne(tab):\n    somme = 0\n    coeffs = 0\n    for couple in tab:\n        somme += couple[0] * couple[1]\n        coeffs += couple[1]\n    if coeffs == 0:\n        return None\n    return somme / coeffs\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-442","title":"Exercice 44.2","text":"<p>Exercice 44.2</p> \u00c9nonc\u00e9Correction <p> On travaille sur des dessins en noir et blanc obtenus \u00e0 partir de pixels noirs et blancs : La figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple. On la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs. Chaque sous-liste repr\u00e9sentera donc une ligne du dessin.</p> <p>Dans le code ci-dessous, la fonction <code>affiche</code> permet d\u2019afficher le dessin. Les pixels noirs (1 dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re \"*\" et les blancs (0 dans la grille) par une espace.</p> <p>La fonction <code>liste_zoom</code> prend en arguments une liste <code>liste_depart</code> et un entier <code>k</code>. Elle renvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de <code>liste_depart</code> est dupliqu\u00e9 <code>k</code> fois.</p> <p>La fonction <code>dessin_zoom</code> prend en argument la grille <code>dessin</code> et renvoie une grille o\u00f9 toutes les lignes de <code>dessin</code> sont zoom\u00e9es <code>k</code> fois et r\u00e9p\u00e9t\u00e9es <code>k</code> fois.</p> <p>Compl\u00e9ter les fonctions <code>liste_zoom</code> et <code>dessin_zoom</code> du code suivant :</p> <pre><code>def affiche(dessin):\n    ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n        un \"*\" , les 0 par une espace \" \" '''\n    for ligne in dessin:\n        affichage = ''\n        for col in ligne:\n            if col == 1:\n                affichage = affichage + \"*\"\n            else:\n                affichage = affichage + \" \"\n        print(affichage)\n\n\ndef liste_zoom(liste_depart,k):\n    '''renvoie une liste contenant k fois chaque \u00e9l\u00e9ment de\n       liste_depart'''\n    liste_zoomee = ... \n    for elt in ... : \n        for i in range(k):\n            ...\n    return liste_zoomee\n\ndef dessin_zoom(grille,k):\n    '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n       ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoomee=[]\n    for ligne in grille:\n        ligne_zoomee = ... \n        for i in range(k):\n            ... .append(...) \n    return grille_zoomee\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n&gt;&gt;&gt; affiche(coeur)\n\n       * *       * *      \n     *     *   *     *    \n   *         *         *  \n   *                   *  \n   *                   *  \n     *               *    \n       *           *      \n         *       *        \n           *   *          \n             *            \n\n&gt;&gt;&gt; affiche(dessin_zoom(coeur,2))\n\n\n             * * * *             * * * *            \n             * * * *             * * * *            \n         * *         * *     * *         * *        \n         * *         * *     * *         * *        \n     * *                 * *                 * *    \n     * *                 * *                 * *    \n     * *                                     * *    \n     * *                                     * *    \n     * *                                     * *    \n     * *                                     * *    \n         * *                             * *        \n         * *                             * *        \n             * *                     * *            \n             * *                     * *            \n                 * *             * *                \n                 * *             * *                \n                     * *     * *                    \n                     * *     * *                    \n                         * *                        \n                         * *                        \n\n\n&gt;&gt;&gt; liste_zoom([1,2,3],3)\n[1, 1, 1, 2, 2, 2, 3, 3, 3]\n</code></pre> <pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n    ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n    des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        affichage = ''\n        for col in ligne:\n            if col == 1:\n                affichage = affichage + \"*\"\n            else:\n                affichage = affichage + \" \"\n        print(affichage)\n\n\ndef liste_zoom(liste_depart, k):\n    '''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\n    liste_zoomee = []\n    for elt in liste_depart:\n        for i in range(k):\n            liste_zoomee.append(elt)\n    return liste_zoomee\n\ndef dessin_zoom(grille, k):\n    '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoomee = []\n    for ligne in grille:\n        liste_zoomee = liste_zoom(ligne, k)\n        for i in range(k):\n            grille_zoomee.append(liste_zoomee)\n    return grille_zoomee\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-45","title":"\u25b6 Sujet 45","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-451","title":"Exercice 45.1","text":"<p>Exercice 45.1</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re des cha\u00eenes de caract\u00e8res contenant uniquement des majuscules et des carac- t\u00e8res <code>*</code> appel\u00e9es mots \u00e0 trous. </p> <p>Par exemple <code>INFO*MA*IQUE</code>, <code>***I***E**</code> et <code>*S*</code> sont des mots \u00e0 trous.  </p> <p>Programmer une fonction <code>correspond</code> qui :</p> <ul> <li>prend en param\u00e8tres deux cha\u00eenes de caract\u00e8res <code>mot</code> et <code>mot_a_trous</code> o\u00f9 <code>mot_a_trous</code> est un mot \u00e0 trous comme indiqu\u00e9 ci-dessus, </li> <li>renvoie :<ul> <li><code>True</code> si on peut obtenir <code>mot</code> en rempla\u00e7ant convenablement les caract\u00e8res <code>'*'</code> de <code>mot_a_trous</code>.</li> <li><code>False</code> sinon.</li> </ul> </li> </ul> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; correspond('INFORMATIQUE', 'INFO*MA*IQUE')\nTrue\n&gt;&gt;&gt; correspond('AUTOMATIQUE', 'INFO*MA*IQUE')\nFalse\n&gt;&gt;&gt; correspond('STOP', 'S*')\nFalse\n&gt;&gt;&gt; correspond('AUTO', '*UT*')\nTrue\n</code></pre> <pre><code>def correspond(mot, mot_a_trous):\n    if len(mot) != len(mot_a_trous):\n        return False\n    for i in range(len(mot)):\n        if mot[i] != mot_a_trous[i] and mot_a_trous[i] != '*':\n            return False\n    return True\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-452","title":"Exercice 45.2","text":"<p>Exercice 45.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re au plus 26 personnes A, B, C, D, E, F ... qui peuvent s'envoyer des messages avec deux r\u00e8gles \u00e0 respecter :</p> <ul> <li>chaque personne ne peut envoyer des messages qu'\u00e0 une seule personne (\u00e9ventuellement elle-m\u00eame),</li> <li>chaque personne ne peut recevoir des messages qu'en provenance d'une seule personne (\u00e9ventuellement elle-m\u00eame).</li> </ul> <p>Voici un exemple - avec 6 personnes - de \u00ab plan d'envoi des messages \u00bb qui respecte les r\u00e8gles ci-dessus, puisque chaque personne est pr\u00e9sente une seule fois dans chaque colonne :</p> <ul> <li>A envoie ses messages \u00e0 E</li> <li>E envoie ses messages \u00e0 B</li> <li>B envoie ses messages \u00e0 F</li> <li>F envoie ses messages \u00e0 A</li> <li>C envoie ses messages \u00e0 D</li> <li>D envoie ses messages \u00e0 C</li> </ul> <p>Et le dictionnaire correspondant \u00e0 ce plan d'envoi est le suivant :</p> <p><code>plan_a = {'A':'E', 'B':'F', 'C':'D', 'D':'C', 'E':'B', 'F':'A'}</code></p> <p>Un cycle est une suite de personnes dans laquelle la derni\u00e8re est la m\u00eame que la premi\u00e8re.</p> <p>Sur le plan d'envoi <code>plan_a</code> des messages ci-dessus, il y a deux cycles distincts : un premier cycle avec A, E, B, F et un second cycle avec C et D.</p> <p>En revanche, le plan d\u2019envoi <code>plan_b</code> ci-dessous :</p> <p><code>plan_b = {'A':'C', 'B':'F', 'C':'E', 'D':'A', 'E':'B', 'F':'D'}</code></p> <p>comporte un unique cycle : A, C, E, B, F, D. Dans ce cas, lorsqu\u2019un plan d\u2019envoi comporte un unique cycle, on dit que le plan d\u2019envoi est cyclique.</p> <p>Pour savoir si un plan d'envoi de messages comportant N personnes est cyclique, on peut utiliser l'algorithme ci-dessous :</p> <ul> <li>on part d\u2019un exp\u00e9diteur (ici A) et on inspecte son destinataire dans le plan d'envoi,</li> <li>chaque destinataire devient \u00e0 son tour exp\u00e9diteur, selon le plan d\u2019envoi, tant qu\u2019on ne \u00ab retombe \u00bb pas sur l\u2019exp\u00e9diteur initial,</li> <li>le plan d\u2019envoi est cyclique si on l\u2019a parcouru en entier.</li> </ul> <p>Compl\u00e9ter la fonction <code>est_cyclique</code> en respectant la sp\u00e9cification.</p> <p>On rappelle que la fonction Python <code>len</code> permet d'obtenir la longueur d'un dictionnaire.</p> <pre><code>def est_cyclique(plan):\n    '''Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 \n    un plan d'envoi de messages (ici entre les personnes A, B, C,\n    D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et \n    False sinon.'''\n    expediteur = 'A'\n    destinataire = plan[...] \n    nb_destinataires = 1\n\n    while destinataire != expediteur:\n        destinataire = ... \n        nb_destinataires = ... \n\n    return nb_destinataires == ... \n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'})\nFalse\n&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'})\nFalse\n</code></pre> <pre><code>def est_cyclique(plan):\n    '''Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 \n    un plan d'envoi de messages (ici entre les personnes A, B, C,\n    D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et \n    False sinon.'''\n    expediteur = 'A'\n    destinataire = plan[expediteur]\n    nb_destinaires = 1\n\n    while destinataire != expediteur:\n        destinataire = plan[destinataire]\n        nb_destinaires += 1\n\n    return nb_destinaires == len(plan)\n\n#tests\nprint(est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'}))\nprint(est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'}))\nprint(est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'}))\nprint(est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'}))\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-46","title":"\u25b6 Sujet 46","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-461","title":"Exercice 46.1","text":"<p>Exercice 46.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>compte_occurrences</code> prenant en param\u00e8tres une valeur <code>x</code> et un tableau <code>tab</code> (de type <code>list</code>) et renvoyant le nombre d\u2019occurrences de <code>x</code> dans <code>tab</code>.</p> <p>L\u2019objectif de cet exercice \u00e9tant de parcourir un tableau, il est interdit d\u2019utiliser la m\u00e9thode <code>count</code> des listes Python.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; compte_occurrences(5, [])\n0\n&gt;&gt;&gt; compte_occurrences(5, [-2, 3, 1, 5, 3, 7, 4])\n1\n&gt;&gt;&gt; compte_occurrences('a', ['a','b','c','a','d','e','a'])\n3\n</code></pre> <pre><code>def compte_occurrences(x, tab):\n    nb = 0\n    for element in tab:\n        if element == x:\n            nb += 1\n    return nb\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-462","title":"Exercice 46.2","text":"<p>Exercice 46.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re dans cet exercice un algorithme glouton pour le rendu de monnaie. Pour rendre une somme en monnaie, on utilise \u00e0 chaque fois la plus grosse pi\u00e8ce possible et ainsi de suite jusqu\u2019\u00e0 ce que la somme restante \u00e0 rendre soit nulle.</p> <p>Les pi\u00e8ces de monnaie utilis\u00e9es sont :</p> <p><code>pieces = [1, 2, 5, 10, 20, 50, 100, 200]</code></p> <p>On souhaite \u00e9crire une fonction <code>rendu_monnaie</code> qui prend en param\u00e8tres</p> <ul> <li>un entier <code>somme_due</code> repr\u00e9sentant la somme \u00e0 payer ;</li> <li>un entier <code>somme_versee</code> repr\u00e9sentant la somme vers\u00e9e qui est sup\u00e9rieure ou \u00e9gale \u00e0 <code>somme_due</code> ;</li> </ul> <p>et qui renvoie un tableau de type <code>list</code> contenant les pi\u00e8ces qui composent le rendu de la monnaie restante, c\u2019est-\u00e0-dire de <code>somme_versee - somme_due</code>.</p> <p>Ainsi, l\u2019instruction <code>rendu_monnaie(452, 500)</code> renvoie le tableau <code>[20, 20, 5, 2, 1]</code>.</p> <p>En effet, la somme \u00e0 rendre est de <code>48</code> euros soit <code>20 + 20 + 5 + 2 + 1</code>.</p> <p>Le code de la fonction <code>rendu_monnaie</code> est donn\u00e9 ci-dessous :</p> <pre><code>def rendu_monnaie(somme_due, somme_versee):\n    '''Renvoie la liste des pi\u00e8ces \u00e0 rendre pour rendre la monnaie\n    lorsqu'on doit rendre somme_versee - somme_due'''\n    rendu = ... \n    a_rendre = ... \n    i = len(pieces) - 1\n    while a_rendre &gt; ...: \n        while pieces[i] &gt; a_rendre:\n            i = i - 1\n        rendu.append(...) \n        a_rendre = ... \n    return rendu\n</code></pre> <p>Compl\u00e9ter ce code et le tester :</p> <pre><code>&gt;&gt;&gt; rendu_monnaie(700, 700)\n[]\n&gt;&gt;&gt; rendu_monnaie(102, 500)\n[200, 100, 50, 20, 20, 5, 2, 1]\n</code></pre> <pre><code>pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n\ndef rendu_monnaie(somme_due, somme_versee):\n    '''Renvoie la liste des pi\u00e8ces \u00e0 rendre pour rendre la monnaie\n    lorsqu'on doit rendre somme_versee - somme_due'''\n    rendu = [] \n    a_rendre = somme_versee - somme_due \n    i = len(pieces) - 1\n    while a_rendre &gt; 0: \n        while pieces[i] &gt; a_rendre:\n            i = i - 1\n        rendu.append(pieces[i]) \n        a_rendre = a_rendre - pieces[i] \n    return rendu\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-47","title":"\u25b6 Sujet 47","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-471","title":"Exercice 47.1","text":"<p>Exercice 47.1</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, un arbre binaire de caract\u00e8res non vide est stock\u00e9 sous la forme d\u2019un dictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour chaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud.</p> <p>On utilise la valeur <code>''</code> pour repr\u00e9senter un fils vide.</p> <p>Par exemple, l\u2019arbre</p> <p></p> <p>est stock\u00e9 dans</p> <pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], \\\n'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], \\\n'H':['','']}\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tres un arbre binaire <code>arbre</code> non vide sous la forme d\u2019un dictionnaire et un caract\u00e8re <code>lettre</code> qui est la valeur du sommet de l\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153uds.  </p> <p>On observe que, par exemple, <code>arbre[lettre][0]</code>, respectivement <code>arbre[lettre][1]</code>, permet d\u2019atteindre la cl\u00e9 du sous-arbre gauche, respectivement droit, de l\u2019arbre <code>arbre</code> de sommet <code>lettre</code>.</p> <p>Exemple : <pre><code>&gt;&gt;&gt; taille(a, 'F')\n9\n&gt;&gt;&gt; taille(a, 'B')\n5\n&gt;&gt;&gt; taille(a, 'I')\n2\n</code></pre></p> <pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], 'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], 'H':['','']}\n\n\ndef taille(arbre, lettre):\n    if lettre == '':\n        return 0\n    return 1 + taille(arbre, arbre[lettre][0]) + taille(arbre, arbre[lettre][1])\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-472","title":"Exercice 47.2","text":"<p>Exercice 47.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt le sous- tableau des \u00e9l\u00e9ments non rang\u00e9s et on place le plus petit \u00e9l\u00e9ment en premi\u00e8re position de ce sous-tableau.</p> <p>Exemple avec le tableau : <code>t = [41, 55, 21, 18, 12, 6, 25]</code> </p> <ul> <li> <p>\u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus petit \u00e9l\u00e9ment avec le premier. Le tableau devient <code>t = [6, 55, 21, 18, 12, 41, 25]</code></p> </li> <li> <p>\u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments sauf le premier, on permute le plus petit \u00e9l\u00e9ment trouv\u00e9 avec le second. Le tableau devient : <code>t = [6, 12, 21, 18, 55, 41, 25]</code> </p> </li> </ul> <p>Et ainsi de suite. </p> <p>Le programme ci-dessous impl\u00e9mente cet algorithme.</p> <pre><code>def echange(tab, i, j):\n    '''Echange les \u00e9l\u00e9ments d'indice i et j dans le tableau tab.'''\n    temp = ... \n    tab[i] = ... \n    tab[j] = ... \n\ndef tri_selection(tab):\n    '''Trie le tableau tab dans l'ordre croissant\n    par la m\u00e9thode du tri par s\u00e9lection.'''\n    N = len(tab)\n    for k in range(...): \n        imin = ... \n        for i in range(..., N): \n            if tab[i] &lt; ...: \n                imin = i\n        echange(tab, ..., ...) \n</code></pre> <p>Compl\u00e9ter le code de cette fonction de fa\u00e7on \u00e0 obtenir :</p> <pre><code>&gt;&gt;&gt; liste = [41, 55, 21, 18, 12, 6, 25]\n&gt;&gt;&gt; tri_selection(liste)\n&gt;&gt;&gt; liste\n[6, 12, 18, 21, 25, 41, 55]\n</code></pre> <pre><code>def echange(tab, i, j):\n    '''Echange les \u00e9l\u00e9ments d'indice i et j dans le tableau tab.'''\n    temp = tab[i] \n    tab[i] = tab[j] \n    tab[j] = temp \n\ndef tri_selection(tab):\n    '''Trie le tableau tab dans l'ordre croissant\n    par la m\u00e9thode du tri par s\u00e9lection.'''\n    N = len(tab)\n    for k in range(N): \n        imin = k \n        for i in range(k + 1, N): \n            if tab[i] &lt; tab[imin]: \n                imin = i\n        echange(tab, k, imin) \n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#sujet-48","title":"\u25b6 Sujet 48","text":""},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-481","title":"Exercice 48.1","text":"<p>Exercice 48.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>recherche</code>, prenant en param\u00e8tres un tableau non vide <code>tab</code> (type <code>list</code>) d'entiers et un entier <code>n</code>, et qui renvoie l'indice de la derni\u00e8re occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie <code>None</code>.</p> <p>Exemples <pre><code>&gt;&gt;&gt; recherche([5, 3], 1) # renvoie None\n2\n&gt;&gt;&gt; recherche([2, 4], 2)\n0\n&gt;&gt;&gt; recherche([2, 3, 5, 2, 4], 2)\n3\n</code></pre></p> <pre><code>def recherche(tab, n):\n    indice_solution = None\n    for i in range(len(tab)):\n        if tab[i] == n:\n            indice_solution = i\n    return indice_solution\n</code></pre>"},{"location":"02_Epreuve_Pratique/Epreuves_pratique_2025/#exercice-482","title":"Exercice 48.2","text":"<p>Exercice 48.2</p> \u00c9nonc\u00e9Correction <p>On souhaite programmer une fonction indiquant le point le plus proche d\u2019un point de d\u00e9part dans un tableau de points non vide. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res et sont donn\u00e9s sous la forme d\u2019un tuple de deux entiers. Le tableau des points \u00e0 traiter est donc un tableau de tuples.</p> <p>On rappelle que la distance \\(d\\) entre deux points du plan de coordonn\u00e9es \\((x;y)\\) et \\((x';y')\\) v\u00e9rifie la formule :</p> \\[d^2=(x-x')^2+(y-y')^2\\] <p>Compl\u00e9ter le code des fonctions <code>distance_carre</code> et <code>point_le_plus_proche</code> fournies ci-dessous pour qu\u2019elles r\u00e9pondent \u00e0 leurs sp\u00e9cifications.</p> <pre><code>def distance_carre(point1, point2):\n    \"\"\" Calcule et renvoie la distance au carre entre \n    deux points.\"\"\"\n    return (...)**2 + (...)**2 \n\ndef point_le_plus_proche(depart, tab):\n    \"\"\" Renvoie les coordonn\u00e9es du premier point du tableau tab se \n    trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    min_point = tab[0]\n    min_dist = ... \n    for i in range(1, len(tab)):\n        if distance_carre(tab[i], depart) &lt; ...: \n            min_point = ... \n            min_dist = ... \n    return min_point\n</code></pre> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; distance_carre((1, 0), (5, 3))\n25\n&gt;&gt;&gt; distance_carre((1, 0), (0, 1))\n2\n&gt;&gt;&gt; point_le_plus_proche((0, 0), [(7, 9), (2, 5), (5, 2)])\n(2, 5)\n&gt;&gt;&gt; point_le_plus_proche((5, 2), [(7, 9), (2, 5), (5, 2)])\n(5, 2)\n</code></pre> <pre><code>def distance_carre(point1, point2):\n    \"\"\" Calcule et renvoie la distance au carre entre \n    deux points.\"\"\"\n    return (point1[0] - point2[0])**2 + ((point1[1] - point2[1]))**2\n\ndef point_le_plus_proche(depart, tab):\n    \"\"\" Renvoie les coordonn\u00e9es du premier point du tableau tab se \n    trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    min_point = tab[0]\n    min_dist = distance_carre(min_point, depart) \n    for i in range(1, len(tab)):\n        if distance_carre(tab[i], depart) &lt; min_dist: \n            min_point = tab[i] \n            min_dist = distance_carre(tab[i], depart) \n    return min_point\n</code></pre>"}]}